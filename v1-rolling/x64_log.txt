2022-05-13T16:22:01.7211612Z ##[section]Starting: Build JtR
2022-05-13T16:22:01.7440517Z ==============================================================================
2022-05-13T16:22:01.7441324Z Task         : PowerShell
2022-05-13T16:22:01.7441636Z Description  : Run a PowerShell script on Linux, macOS, or Windows
2022-05-13T16:22:01.7442047Z Version      : 2.200.0
2022-05-13T16:22:01.7442419Z Author       : Microsoft Corporation
2022-05-13T16:22:01.7442872Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/powershell
2022-05-13T16:22:01.7443397Z ==============================================================================
2022-05-13T16:22:03.2202487Z Generating script.
2022-05-13T16:22:03.2786246Z ========================== Starting Command Output ===========================
2022-05-13T16:22:03.3193354Z ##[command]"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command ". 'D:\a\_temp\661599bc-d9a9-4bae-9f4c-06c58cd0fb89.ps1'"
2022-05-13T16:22:13.1872965Z 52a9bed
2022-05-13T16:22:13.3200565Z --------------------------------
2022-05-13T16:22:13.3358271Z --------------------------------------------------------
2022-05-13T16:22:13.3386103Z              =====  Installing CygWin  =====            
2022-05-13T16:22:13.3410970Z --------------------------------------------------------
2022-05-13T16:22:14.2886370Z Chocolatey v1.1.0
2022-05-13T16:22:14.6454261Z Installing the following packages:
2022-05-13T16:22:14.6455406Z cygwin;cyg-get
2022-05-13T16:22:14.6458955Z By installing, you accept licenses for the packages.
2022-05-13T16:22:17.6099855Z 
2022-05-13T16:22:17.6102494Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6105590Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6106459Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6109049Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6110963Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6111828Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6112589Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6115082Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6116654Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6117996Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6121290Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6122727Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6123706Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6125108Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6126262Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6127186Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6131684Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6132668Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6144802Z Progress: Downloading Cygwin 3.3.4.20220408... 0%
2022-05-13T16:22:17.6145993Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6150238Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6151232Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6152032Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6158895Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6161622Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6162645Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6163414Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6165461Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6167161Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6168533Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6172036Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6173177Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6175404Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6176970Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6178259Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6180517Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6182137Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6183585Z Progress: Downloading Cygwin 3.3.4.20220408... 1%
2022-05-13T16:22:17.6185269Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6186977Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6188546Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6189811Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6191029Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6192310Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6193953Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6194958Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6195883Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6196826Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6197719Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6198642Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6199852Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6201277Z Progress: Downloading Cygwin 3.3.4.20220408... 2%
2022-05-13T16:22:17.6202572Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6203615Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6205090Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6206080Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6207189Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6208342Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6210770Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6214029Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6216588Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6218006Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6218932Z Progress: Downloading Cygwin 3.3.4.20220408... 3%
2022-05-13T16:22:17.6221259Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6222311Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6223091Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6223849Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6224845Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6225596Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6226336Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6227042Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6227778Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6228527Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6229914Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6230661Z Progress: Downloading Cygwin 3.3.4.20220408... 4%
2022-05-13T16:22:17.6231416Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6232153Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6233333Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6234424Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6235190Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6235921Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6236873Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6238177Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6238961Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6240338Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6241078Z Progress: Downloading Cygwin 3.3.4.20220408... 5%
2022-05-13T16:22:17.6241842Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6243214Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6244423Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6246452Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6247514Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6251937Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6252882Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6253701Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6254774Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6256304Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6257159Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6257967Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6259384Z Progress: Downloading Cygwin 3.3.4.20220408... 6%
2022-05-13T16:22:17.6260807Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6261511Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6262239Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6263998Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6265497Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6266360Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6267207Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6270731Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6273439Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6275136Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6276159Z Progress: Downloading Cygwin 3.3.4.20220408... 7%
2022-05-13T16:22:17.6277131Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6278413Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6280571Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6282066Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6283136Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6284061Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6285120Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6285991Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6286841Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6288306Z Progress: Downloading Cygwin 3.3.4.20220408... 8%
2022-05-13T16:22:17.6290355Z Progress: Downloading Cygwin 3.3.4.20220408... 9%
2022-05-13T16:22:17.6291599Z Progress: Downloading Cygwin 3.3.4.20220408... 9%
2022-05-13T16:22:17.6293367Z Progress: Downloading Cygwin 3.3.4.20220408... 9%
2022-05-13T16:22:17.6294820Z Progress: Downloading Cygwin 3.3.4.20220408... 9%
2022-05-13T16:22:17.6295850Z Progress: Downloading Cygwin 3.3.4.20220408... 9%
2022-05-13T16:22:17.6297578Z Progress: Downloading Cygwin 3.3.4.20220408... 9%
2022-05-13T16:22:17.6300318Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6302563Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6303846Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6305026Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6305967Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6307290Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6308260Z Progress: Downloading Cygwin 3.3.4.20220408... 10%
2022-05-13T16:22:17.6311268Z Progress: Downloading Cygwin 3.3.4.20220408... 11%
2022-05-13T16:22:17.6312463Z Progress: Downloading Cygwin 3.3.4.20220408... 11%
2022-05-13T16:22:17.6313517Z Progress: Downloading Cygwin 3.3.4.20220408... 11%
2022-05-13T16:22:17.6315209Z Progress: Downloading Cygwin 3.3.4.20220408... 11%
2022-05-13T16:22:17.6316581Z Progress: Downloading Cygwin 3.3.4.20220408... 11%
2022-05-13T16:22:17.6317663Z Progress: Downloading Cygwin 3.3.4.20220408... 11%
2022-05-13T16:22:17.6318843Z Progress: Downloading Cygwin 3.3.4.20220408... 12%
2022-05-13T16:22:17.6320386Z Progress: Downloading Cygwin 3.3.4.20220408... 12%
2022-05-13T16:22:17.6322280Z Progress: Downloading Cygwin 3.3.4.20220408... 12%
2022-05-13T16:22:17.6323881Z Progress: Downloading Cygwin 3.3.4.20220408... 12%
2022-05-13T16:22:17.6325082Z Progress: Downloading Cygwin 3.3.4.20220408... 12%
2022-05-13T16:22:17.6325892Z Progress: Downloading Cygwin 3.3.4.20220408... 12%
2022-05-13T16:22:17.6327308Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6329563Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6331140Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6332100Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6333518Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6335166Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6336139Z Progress: Downloading Cygwin 3.3.4.20220408... 13%
2022-05-13T16:22:17.6337050Z Progress: Downloading Cygwin 3.3.4.20220408... 14%
2022-05-13T16:22:17.6338210Z Progress: Downloading Cygwin 3.3.4.20220408... 14%
2022-05-13T16:22:17.6340971Z Progress: Downloading Cygwin 3.3.4.20220408... 14%
2022-05-13T16:22:17.6343573Z Progress: Downloading Cygwin 3.3.4.20220408... 14%
2022-05-13T16:22:17.6344751Z Progress: Downloading Cygwin 3.3.4.20220408... 14%
2022-05-13T16:22:17.6349499Z Progress: Downloading Cygwin 3.3.4.20220408... 14%
2022-05-13T16:22:17.6351717Z Progress: Downloading Cygwin 3.3.4.20220408... 15%
2022-05-13T16:22:17.6353727Z Progress: Downloading Cygwin 3.3.4.20220408... 15%
2022-05-13T16:22:17.6355551Z Progress: Downloading Cygwin 3.3.4.20220408... 15%
2022-05-13T16:22:17.6357393Z Progress: Downloading Cygwin 3.3.4.20220408... 15%
2022-05-13T16:22:17.6363120Z Progress: Downloading Cygwin 3.3.4.20220408... 15%
2022-05-13T16:22:17.6364656Z Progress: Downloading Cygwin 3.3.4.20220408... 15%
2022-05-13T16:22:17.6366312Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6367420Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6370933Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6372449Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6373476Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6375912Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6378162Z Progress: Downloading Cygwin 3.3.4.20220408... 16%
2022-05-13T16:22:17.6379595Z Progress: Downloading Cygwin 3.3.4.20220408... 17%
2022-05-13T16:22:17.6380580Z Progress: Downloading Cygwin 3.3.4.20220408... 17%
2022-05-13T16:22:17.6381717Z Progress: Downloading Cygwin 3.3.4.20220408... 17%
2022-05-13T16:22:17.6382688Z Progress: Downloading Cygwin 3.3.4.20220408... 17%
2022-05-13T16:22:17.6384076Z Progress: Downloading Cygwin 3.3.4.20220408... 17%
2022-05-13T16:22:17.6387820Z Progress: Downloading Cygwin 3.3.4.20220408... 17%
2022-05-13T16:22:17.6389635Z Progress: Downloading Cygwin 3.3.4.20220408... 18%
2022-05-13T16:22:17.6391183Z Progress: Downloading Cygwin 3.3.4.20220408... 18%
2022-05-13T16:22:17.6392109Z Progress: Downloading Cygwin 3.3.4.20220408... 18%
2022-05-13T16:22:17.6393423Z Progress: Downloading Cygwin 3.3.4.20220408... 18%
2022-05-13T16:22:17.6394578Z Progress: Downloading Cygwin 3.3.4.20220408... 18%
2022-05-13T16:22:17.6395514Z Progress: Downloading Cygwin 3.3.4.20220408... 18%
2022-05-13T16:22:17.6396566Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6398095Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6402241Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6403377Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6404748Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6406440Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6408071Z Progress: Downloading Cygwin 3.3.4.20220408... 19%
2022-05-13T16:22:17.6409123Z Progress: Downloading Cygwin 3.3.4.20220408... 20%
2022-05-13T16:22:17.6410102Z Progress: Downloading Cygwin 3.3.4.20220408... 20%
2022-05-13T16:22:17.6410932Z Progress: Downloading Cygwin 3.3.4.20220408... 20%
2022-05-13T16:22:17.6411853Z Progress: Downloading Cygwin 3.3.4.20220408... 20%
2022-05-13T16:22:17.6412797Z Progress: Downloading Cygwin 3.3.4.20220408... 20%
2022-05-13T16:22:17.6413705Z Progress: Downloading Cygwin 3.3.4.20220408... 20%
2022-05-13T16:22:17.6416233Z Progress: Downloading Cygwin 3.3.4.20220408... 21%
2022-05-13T16:22:17.6417320Z Progress: Downloading Cygwin 3.3.4.20220408... 21%
2022-05-13T16:22:17.6418318Z Progress: Downloading Cygwin 3.3.4.20220408... 21%
2022-05-13T16:22:17.6419420Z Progress: Downloading Cygwin 3.3.4.20220408... 21%
2022-05-13T16:22:17.6421055Z Progress: Downloading Cygwin 3.3.4.20220408... 21%
2022-05-13T16:22:17.6422814Z Progress: Downloading Cygwin 3.3.4.20220408... 21%
2022-05-13T16:22:17.6425761Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6427967Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6430298Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6431615Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6432610Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6433499Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6434876Z Progress: Downloading Cygwin 3.3.4.20220408... 22%
2022-05-13T16:22:17.6435864Z Progress: Downloading Cygwin 3.3.4.20220408... 23%
2022-05-13T16:22:17.6437136Z Progress: Downloading Cygwin 3.3.4.20220408... 23%
2022-05-13T16:22:17.6438463Z Progress: Downloading Cygwin 3.3.4.20220408... 23%
2022-05-13T16:22:17.6439541Z Progress: Downloading Cygwin 3.3.4.20220408... 23%
2022-05-13T16:22:17.6440962Z Progress: Downloading Cygwin 3.3.4.20220408... 23%
2022-05-13T16:22:17.6441907Z Progress: Downloading Cygwin 3.3.4.20220408... 23%
2022-05-13T16:22:17.6442875Z Progress: Downloading Cygwin 3.3.4.20220408... 24%
2022-05-13T16:22:17.6443785Z Progress: Downloading Cygwin 3.3.4.20220408... 24%
2022-05-13T16:22:17.6446306Z Progress: Downloading Cygwin 3.3.4.20220408... 24%
2022-05-13T16:22:17.6447266Z Progress: Downloading Cygwin 3.3.4.20220408... 24%
2022-05-13T16:22:17.6448404Z Progress: Downloading Cygwin 3.3.4.20220408... 24%
2022-05-13T16:22:17.6449707Z Progress: Downloading Cygwin 3.3.4.20220408... 24%
2022-05-13T16:22:17.6450980Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6451937Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6452890Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6453833Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6456959Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6458506Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6460499Z Progress: Downloading Cygwin 3.3.4.20220408... 25%
2022-05-13T16:22:17.6462845Z Progress: Downloading Cygwin 3.3.4.20220408... 26%
2022-05-13T16:22:17.6464372Z Progress: Downloading Cygwin 3.3.4.20220408... 26%
2022-05-13T16:22:17.6465692Z Progress: Downloading Cygwin 3.3.4.20220408... 26%
2022-05-13T16:22:17.6466661Z Progress: Downloading Cygwin 3.3.4.20220408... 26%
2022-05-13T16:22:17.6467657Z Progress: Downloading Cygwin 3.3.4.20220408... 26%
2022-05-13T16:22:17.6468619Z Progress: Downloading Cygwin 3.3.4.20220408... 26%
2022-05-13T16:22:17.6470326Z Progress: Downloading Cygwin 3.3.4.20220408... 27%
2022-05-13T16:22:17.6472036Z Progress: Downloading Cygwin 3.3.4.20220408... 27%
2022-05-13T16:22:17.6472927Z Progress: Downloading Cygwin 3.3.4.20220408... 27%
2022-05-13T16:22:17.6473679Z Progress: Downloading Cygwin 3.3.4.20220408... 27%
2022-05-13T16:22:17.6474582Z Progress: Downloading Cygwin 3.3.4.20220408... 27%
2022-05-13T16:22:17.6476354Z Progress: Downloading Cygwin 3.3.4.20220408... 27%
2022-05-13T16:22:17.6477341Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6478207Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6480149Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6481014Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6481769Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6482497Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6483170Z Progress: Downloading Cygwin 3.3.4.20220408... 28%
2022-05-13T16:22:17.6484433Z Progress: Downloading Cygwin 3.3.4.20220408... 29%
2022-05-13T16:22:17.6485334Z Progress: Downloading Cygwin 3.3.4.20220408... 29%
2022-05-13T16:22:17.6486060Z Progress: Downloading Cygwin 3.3.4.20220408... 29%
2022-05-13T16:22:17.6487137Z Progress: Downloading Cygwin 3.3.4.20220408... 29%
2022-05-13T16:22:17.6488043Z Progress: Downloading Cygwin 3.3.4.20220408... 29%
2022-05-13T16:22:17.6489401Z Progress: Downloading Cygwin 3.3.4.20220408... 29%
2022-05-13T16:22:17.6491799Z Progress: Downloading Cygwin 3.3.4.20220408... 30%
2022-05-13T16:22:17.6492994Z Progress: Downloading Cygwin 3.3.4.20220408... 30%
2022-05-13T16:22:17.6495368Z Progress: Downloading Cygwin 3.3.4.20220408... 30%
2022-05-13T16:22:17.6496729Z Progress: Downloading Cygwin 3.3.4.20220408... 30%
2022-05-13T16:22:17.6497897Z Progress: Downloading Cygwin 3.3.4.20220408... 30%
2022-05-13T16:22:17.6499179Z Progress: Downloading Cygwin 3.3.4.20220408... 30%
2022-05-13T16:22:17.6501338Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6502457Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6503595Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6505942Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6507111Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6508101Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6510451Z Progress: Downloading Cygwin 3.3.4.20220408... 31%
2022-05-13T16:22:17.6511532Z Progress: Downloading Cygwin 3.3.4.20220408... 32%
2022-05-13T16:22:17.6512827Z Progress: Downloading Cygwin 3.3.4.20220408... 32%
2022-05-13T16:22:17.6513668Z Progress: Downloading Cygwin 3.3.4.20220408... 32%
2022-05-13T16:22:17.6515853Z Progress: Downloading Cygwin 3.3.4.20220408... 32%
2022-05-13T16:22:17.6516925Z Progress: Downloading Cygwin 3.3.4.20220408... 32%
2022-05-13T16:22:17.6517836Z Progress: Downloading Cygwin 3.3.4.20220408... 32%
2022-05-13T16:22:17.6519239Z Progress: Downloading Cygwin 3.3.4.20220408... 33%
2022-05-13T16:22:17.6520930Z Progress: Downloading Cygwin 3.3.4.20220408... 33%
2022-05-13T16:22:17.6521725Z Progress: Downloading Cygwin 3.3.4.20220408... 33%
2022-05-13T16:22:17.6522488Z Progress: Downloading Cygwin 3.3.4.20220408... 33%
2022-05-13T16:22:17.6523351Z Progress: Downloading Cygwin 3.3.4.20220408... 33%
2022-05-13T16:22:17.6524384Z Progress: Downloading Cygwin 3.3.4.20220408... 33%
2022-05-13T16:22:17.6526700Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6527845Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6528925Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6530778Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6531791Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6532688Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6533575Z Progress: Downloading Cygwin 3.3.4.20220408... 34%
2022-05-13T16:22:17.6535489Z Progress: Downloading Cygwin 3.3.4.20220408... 35%
2022-05-13T16:22:17.6537542Z Progress: Downloading Cygwin 3.3.4.20220408... 35%
2022-05-13T16:22:17.6539254Z Progress: Downloading Cygwin 3.3.4.20220408... 35%
2022-05-13T16:22:17.6540198Z Progress: Downloading Cygwin 3.3.4.20220408... 35%
2022-05-13T16:22:17.6540999Z Progress: Downloading Cygwin 3.3.4.20220408... 35%
2022-05-13T16:22:17.6541791Z Progress: Downloading Cygwin 3.3.4.20220408... 35%
2022-05-13T16:22:17.6542653Z Progress: Downloading Cygwin 3.3.4.20220408... 36%
2022-05-13T16:22:17.6543563Z Progress: Downloading Cygwin 3.3.4.20220408... 36%
2022-05-13T16:22:17.6547093Z Progress: Downloading Cygwin 3.3.4.20220408... 36%
2022-05-13T16:22:17.6548170Z Progress: Downloading Cygwin 3.3.4.20220408... 36%
2022-05-13T16:22:17.6549144Z Progress: Downloading Cygwin 3.3.4.20220408... 36%
2022-05-13T16:22:17.6550030Z Progress: Downloading Cygwin 3.3.4.20220408... 36%
2022-05-13T16:22:17.6550977Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6551917Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6552884Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6553809Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6570121Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6570971Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6572695Z Progress: Downloading Cygwin 3.3.4.20220408... 37%
2022-05-13T16:22:17.6573584Z Progress: Downloading Cygwin 3.3.4.20220408... 38%
2022-05-13T16:22:17.6575551Z Progress: Downloading Cygwin 3.3.4.20220408... 38%
2022-05-13T16:22:17.6576346Z Progress: Downloading Cygwin 3.3.4.20220408... 38%
2022-05-13T16:22:17.6577084Z Progress: Downloading Cygwin 3.3.4.20220408... 38%
2022-05-13T16:22:17.6577809Z Progress: Downloading Cygwin 3.3.4.20220408... 38%
2022-05-13T16:22:17.6578492Z Progress: Downloading Cygwin 3.3.4.20220408... 38%
2022-05-13T16:22:17.6579242Z Progress: Downloading Cygwin 3.3.4.20220408... 39%
2022-05-13T16:22:17.6579976Z Progress: Downloading Cygwin 3.3.4.20220408... 39%
2022-05-13T16:22:17.6581107Z Progress: Downloading Cygwin 3.3.4.20220408... 39%
2022-05-13T16:22:17.6582826Z Progress: Downloading Cygwin 3.3.4.20220408... 39%
2022-05-13T16:22:17.6583856Z Progress: Downloading Cygwin 3.3.4.20220408... 39%
2022-05-13T16:22:17.6585948Z Progress: Downloading Cygwin 3.3.4.20220408... 39%
2022-05-13T16:22:17.6586722Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6587463Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6588194Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6588888Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6589623Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6590688Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6591444Z Progress: Downloading Cygwin 3.3.4.20220408... 40%
2022-05-13T16:22:17.6592085Z Progress: Downloading Cygwin 3.3.4.20220408... 41%
2022-05-13T16:22:17.6594979Z Progress: Downloading Cygwin 3.3.4.20220408... 41%
2022-05-13T16:22:17.6599502Z Progress: Downloading Cygwin 3.3.4.20220408... 41%
2022-05-13T16:22:17.6600586Z Progress: Downloading Cygwin 3.3.4.20220408... 41%
2022-05-13T16:22:17.6601368Z Progress: Downloading Cygwin 3.3.4.20220408... 41%
2022-05-13T16:22:17.6602078Z Progress: Downloading Cygwin 3.3.4.20220408... 41%
2022-05-13T16:22:17.6602806Z Progress: Downloading Cygwin 3.3.4.20220408... 42%
2022-05-13T16:22:17.6603509Z Progress: Downloading Cygwin 3.3.4.20220408... 42%
2022-05-13T16:22:17.6605668Z Progress: Downloading Cygwin 3.3.4.20220408... 42%
2022-05-13T16:22:17.6606466Z Progress: Downloading Cygwin 3.3.4.20220408... 42%
2022-05-13T16:22:17.6607187Z Progress: Downloading Cygwin 3.3.4.20220408... 42%
2022-05-13T16:22:17.6607885Z Progress: Downloading Cygwin 3.3.4.20220408... 42%
2022-05-13T16:22:17.6608761Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6609450Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6610151Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6610859Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6611549Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6612276Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6612991Z Progress: Downloading Cygwin 3.3.4.20220408... 43%
2022-05-13T16:22:17.6613691Z Progress: Downloading Cygwin 3.3.4.20220408... 44%
2022-05-13T16:22:17.6614673Z Progress: Downloading Cygwin 3.3.4.20220408... 44%
2022-05-13T16:22:17.6615394Z Progress: Downloading Cygwin 3.3.4.20220408... 44%
2022-05-13T16:22:17.6617592Z Progress: Downloading Cygwin 3.3.4.20220408... 44%
2022-05-13T16:22:17.6618368Z Progress: Downloading Cygwin 3.3.4.20220408... 44%
2022-05-13T16:22:17.6619082Z Progress: Downloading Cygwin 3.3.4.20220408... 44%
2022-05-13T16:22:17.6619820Z Progress: Downloading Cygwin 3.3.4.20220408... 45%
2022-05-13T16:22:17.6620538Z Progress: Downloading Cygwin 3.3.4.20220408... 45%
2022-05-13T16:22:17.6621248Z Progress: Downloading Cygwin 3.3.4.20220408... 45%
2022-05-13T16:22:17.6623123Z Progress: Downloading Cygwin 3.3.4.20220408... 45%
2022-05-13T16:22:17.6625558Z Progress: Downloading Cygwin 3.3.4.20220408... 45%
2022-05-13T16:22:17.6627460Z Progress: Downloading Cygwin 3.3.4.20220408... 45%
2022-05-13T16:22:17.6630432Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6631361Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6632120Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6633432Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6634161Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6635790Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6637139Z Progress: Downloading Cygwin 3.3.4.20220408... 46%
2022-05-13T16:22:17.6637898Z Progress: Downloading Cygwin 3.3.4.20220408... 47%
2022-05-13T16:22:17.6638603Z Progress: Downloading Cygwin 3.3.4.20220408... 47%
2022-05-13T16:22:17.6639327Z Progress: Downloading Cygwin 3.3.4.20220408... 47%
2022-05-13T16:22:17.6640059Z Progress: Downloading Cygwin 3.3.4.20220408... 47%
2022-05-13T16:22:17.6640790Z Progress: Downloading Cygwin 3.3.4.20220408... 47%
2022-05-13T16:22:17.6641326Z Progress: Downloading Cygwin 3.3.4.20220408... 47%
2022-05-13T16:22:17.6641863Z Progress: Downloading Cygwin 3.3.4.20220408... 48%
2022-05-13T16:22:17.6642398Z Progress: Downloading Cygwin 3.3.4.20220408... 48%
2022-05-13T16:22:17.6643070Z Progress: Downloading Cygwin 3.3.4.20220408... 48%
2022-05-13T16:22:17.6643789Z Progress: Downloading Cygwin 3.3.4.20220408... 48%
2022-05-13T16:22:17.6645421Z Progress: Downloading Cygwin 3.3.4.20220408... 48%
2022-05-13T16:22:17.6646186Z Progress: Downloading Cygwin 3.3.4.20220408... 48%
2022-05-13T16:22:17.6646920Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6647647Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6648378Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6649088Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6650865Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6651744Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6652481Z Progress: Downloading Cygwin 3.3.4.20220408... 49%
2022-05-13T16:22:17.6653204Z Progress: Downloading Cygwin 3.3.4.20220408... 50%
2022-05-13T16:22:17.6653897Z Progress: Downloading Cygwin 3.3.4.20220408... 50%
2022-05-13T16:22:17.6654768Z Progress: Downloading Cygwin 3.3.4.20220408... 50%
2022-05-13T16:22:17.6655531Z Progress: Downloading Cygwin 3.3.4.20220408... 50%
2022-05-13T16:22:17.6656249Z Progress: Downloading Cygwin 3.3.4.20220408... 50%
2022-05-13T16:22:17.6656954Z Progress: Downloading Cygwin 3.3.4.20220408... 50%
2022-05-13T16:22:17.6657842Z Progress: Downloading Cygwin 3.3.4.20220408... 51%
2022-05-13T16:22:17.6658572Z Progress: Downloading Cygwin 3.3.4.20220408... 51%
2022-05-13T16:22:17.6710416Z Progress: Downloading Cygwin 3.3.4.20220408... 51%
2022-05-13T16:22:17.6711123Z Progress: Downloading Cygwin 3.3.4.20220408... 51%
2022-05-13T16:22:17.6711691Z Progress: Downloading Cygwin 3.3.4.20220408... 51%
2022-05-13T16:22:17.6712301Z Progress: Downloading Cygwin 3.3.4.20220408... 51%
2022-05-13T16:22:17.6712824Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6713358Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6713894Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6714660Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6715196Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6715716Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6716261Z Progress: Downloading Cygwin 3.3.4.20220408... 52%
2022-05-13T16:22:17.6716798Z Progress: Downloading Cygwin 3.3.4.20220408... 53%
2022-05-13T16:22:17.6717315Z Progress: Downloading Cygwin 3.3.4.20220408... 53%
2022-05-13T16:22:17.6717848Z Progress: Downloading Cygwin 3.3.4.20220408... 53%
2022-05-13T16:22:17.6718384Z Progress: Downloading Cygwin 3.3.4.20220408... 53%
2022-05-13T16:22:17.6718920Z Progress: Downloading Cygwin 3.3.4.20220408... 53%
2022-05-13T16:22:17.6719437Z Progress: Downloading Cygwin 3.3.4.20220408... 53%
2022-05-13T16:22:17.6719971Z Progress: Downloading Cygwin 3.3.4.20220408... 54%
2022-05-13T16:22:17.6720504Z Progress: Downloading Cygwin 3.3.4.20220408... 54%
2022-05-13T16:22:17.6721019Z Progress: Downloading Cygwin 3.3.4.20220408... 54%
2022-05-13T16:22:17.6721553Z Progress: Downloading Cygwin 3.3.4.20220408... 54%
2022-05-13T16:22:17.6722085Z Progress: Downloading Cygwin 3.3.4.20220408... 54%
2022-05-13T16:22:17.6722614Z Progress: Downloading Cygwin 3.3.4.20220408... 54%
2022-05-13T16:22:17.6723127Z Progress: Downloading Cygwin 3.3.4.20220408... 55%
2022-05-13T16:22:17.6723656Z Progress: Downloading Cygwin 3.3.4.20220408... 55%
2022-05-13T16:22:17.6724182Z Progress: Downloading Cygwin 3.3.4.20220408... 55%
2022-05-13T16:22:17.6724912Z Progress: Downloading Cygwin 3.3.4.20220408... 55%
2022-05-13T16:22:17.6725579Z Progress: Downloading Cygwin 3.3.4.20220408... 55%
2022-05-13T16:22:17.6726123Z Progress: Downloading Cygwin 3.3.4.20220408... 55%
2022-05-13T16:22:17.6726657Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6727171Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6727588Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6728020Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6728447Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6728866Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6729281Z Progress: Downloading Cygwin 3.3.4.20220408... 56%
2022-05-13T16:22:17.6729710Z Progress: Downloading Cygwin 3.3.4.20220408... 57%
2022-05-13T16:22:17.6730134Z Progress: Downloading Cygwin 3.3.4.20220408... 57%
2022-05-13T16:22:17.6730537Z Progress: Downloading Cygwin 3.3.4.20220408... 57%
2022-05-13T16:22:17.6730961Z Progress: Downloading Cygwin 3.3.4.20220408... 57%
2022-05-13T16:22:17.6731386Z Progress: Downloading Cygwin 3.3.4.20220408... 57%
2022-05-13T16:22:17.6731809Z Progress: Downloading Cygwin 3.3.4.20220408... 57%
2022-05-13T16:22:17.6732207Z Progress: Downloading Cygwin 3.3.4.20220408... 58%
2022-05-13T16:22:17.6732629Z Progress: Downloading Cygwin 3.3.4.20220408... 58%
2022-05-13T16:22:17.6733053Z Progress: Downloading Cygwin 3.3.4.20220408... 58%
2022-05-13T16:22:17.6733473Z Progress: Downloading Cygwin 3.3.4.20220408... 58%
2022-05-13T16:22:17.6733876Z Progress: Downloading Cygwin 3.3.4.20220408... 58%
2022-05-13T16:22:17.6734298Z Progress: Downloading Cygwin 3.3.4.20220408... 58%
2022-05-13T16:22:17.6735213Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6735638Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6736044Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6736466Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6736900Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6737307Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6737739Z Progress: Downloading Cygwin 3.3.4.20220408... 59%
2022-05-13T16:22:17.6738162Z Progress: Downloading Cygwin 3.3.4.20220408... 60%
2022-05-13T16:22:17.6738587Z Progress: Downloading Cygwin 3.3.4.20220408... 60%
2022-05-13T16:22:17.6738991Z Progress: Downloading Cygwin 3.3.4.20220408... 60%
2022-05-13T16:22:17.6739410Z Progress: Downloading Cygwin 3.3.4.20220408... 60%
2022-05-13T16:22:17.6739835Z Progress: Downloading Cygwin 3.3.4.20220408... 60%
2022-05-13T16:22:17.6740261Z Progress: Downloading Cygwin 3.3.4.20220408... 60%
2022-05-13T16:22:17.6740667Z Progress: Downloading Cygwin 3.3.4.20220408... 61%
2022-05-13T16:22:17.6741095Z Progress: Downloading Cygwin 3.3.4.20220408... 61%
2022-05-13T16:22:17.6741523Z Progress: Downloading Cygwin 3.3.4.20220408... 61%
2022-05-13T16:22:17.6742664Z Progress: Downloading Cygwin 3.3.4.20220408... 61%
2022-05-13T16:22:17.6743441Z Progress: Downloading Cygwin 3.3.4.20220408... 61%
2022-05-13T16:22:17.6743916Z Progress: Downloading Cygwin 3.3.4.20220408... 61%
2022-05-13T16:22:17.6744351Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6744775Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6745183Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6745610Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6746037Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6746445Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6746874Z Progress: Downloading Cygwin 3.3.4.20220408... 62%
2022-05-13T16:22:17.6747307Z Progress: Downloading Cygwin 3.3.4.20220408... 63%
2022-05-13T16:22:17.6747735Z Progress: Downloading Cygwin 3.3.4.20220408... 63%
2022-05-13T16:22:17.6748136Z Progress: Downloading Cygwin 3.3.4.20220408... 63%
2022-05-13T16:22:17.6758646Z Progress: Downloading Cygwin 3.3.4.20220408... 63%
2022-05-13T16:22:17.6759593Z Progress: Downloading Cygwin 3.3.4.20220408... 63%
2022-05-13T16:22:17.6760191Z Progress: Downloading Cygwin 3.3.4.20220408... 63%
2022-05-13T16:22:17.6760920Z Progress: Downloading Cygwin 3.3.4.20220408... 64%
2022-05-13T16:22:17.6761374Z Progress: Downloading Cygwin 3.3.4.20220408... 64%
2022-05-13T16:22:17.6761911Z Progress: Downloading Cygwin 3.3.4.20220408... 64%
2022-05-13T16:22:17.6762447Z Progress: Downloading Cygwin 3.3.4.20220408... 64%
2022-05-13T16:22:17.6762955Z Progress: Downloading Cygwin 3.3.4.20220408... 64%
2022-05-13T16:22:17.6763481Z Progress: Downloading Cygwin 3.3.4.20220408... 64%
2022-05-13T16:22:17.6764013Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6764765Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6765212Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6765653Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6768332Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6768914Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6769457Z Progress: Downloading Cygwin 3.3.4.20220408... 65%
2022-05-13T16:22:17.6769993Z Progress: Downloading Cygwin 3.3.4.20220408... 66%
2022-05-13T16:22:17.6770513Z Progress: Downloading Cygwin 3.3.4.20220408... 66%
2022-05-13T16:22:17.6771025Z Progress: Downloading Cygwin 3.3.4.20220408... 66%
2022-05-13T16:22:17.6771557Z Progress: Downloading Cygwin 3.3.4.20220408... 66%
2022-05-13T16:22:17.6772090Z Progress: Downloading Cygwin 3.3.4.20220408... 66%
2022-05-13T16:22:17.6772621Z Progress: Downloading Cygwin 3.3.4.20220408... 66%
2022-05-13T16:22:17.6773256Z Progress: Downloading Cygwin 3.3.4.20220408... 67%
2022-05-13T16:22:17.6773785Z Progress: Downloading Cygwin 3.3.4.20220408... 67%
2022-05-13T16:22:17.6774503Z Progress: Downloading Cygwin 3.3.4.20220408... 67%
2022-05-13T16:22:17.6775186Z Progress: Downloading Cygwin 3.3.4.20220408... 67%
2022-05-13T16:22:17.6775620Z Progress: Downloading Cygwin 3.3.4.20220408... 67%
2022-05-13T16:22:17.6776154Z Progress: Downloading Cygwin 3.3.4.20220408... 67%
2022-05-13T16:22:17.6776681Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6777190Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6777722Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6778248Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6778809Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6780305Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6780763Z Progress: Downloading Cygwin 3.3.4.20220408... 68%
2022-05-13T16:22:17.6781308Z Progress: Downloading Cygwin 3.3.4.20220408... 69%
2022-05-13T16:22:17.6781834Z Progress: Downloading Cygwin 3.3.4.20220408... 69%
2022-05-13T16:22:17.6782343Z Progress: Downloading Cygwin 3.3.4.20220408... 69%
2022-05-13T16:22:17.6782877Z Progress: Downloading Cygwin 3.3.4.20220408... 69%
2022-05-13T16:22:17.6783412Z Progress: Downloading Cygwin 3.3.4.20220408... 69%
2022-05-13T16:22:17.6783938Z Progress: Downloading Cygwin 3.3.4.20220408... 69%
2022-05-13T16:22:17.6784688Z Progress: Downloading Cygwin 3.3.4.20220408... 70%
2022-05-13T16:22:17.6785144Z Progress: Downloading Cygwin 3.3.4.20220408... 70%
2022-05-13T16:22:17.6785679Z Progress: Downloading Cygwin 3.3.4.20220408... 70%
2022-05-13T16:22:17.6786679Z Progress: Downloading Cygwin 3.3.4.20220408... 70%
2022-05-13T16:22:17.6787270Z Progress: Downloading Cygwin 3.3.4.20220408... 70%
2022-05-13T16:22:17.6787803Z Progress: Downloading Cygwin 3.3.4.20220408... 70%
2022-05-13T16:22:17.6788334Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6788838Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6789368Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6789896Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6790559Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6791067Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6792075Z Progress: Downloading Cygwin 3.3.4.20220408... 71%
2022-05-13T16:22:17.6792619Z Progress: Downloading Cygwin 3.3.4.20220408... 72%
2022-05-13T16:22:17.6793143Z Progress: Downloading Cygwin 3.3.4.20220408... 72%
2022-05-13T16:22:17.6793651Z Progress: Downloading Cygwin 3.3.4.20220408... 72%
2022-05-13T16:22:17.6794172Z Progress: Downloading Cygwin 3.3.4.20220408... 72%
2022-05-13T16:22:17.6794965Z Progress: Downloading Cygwin 3.3.4.20220408... 72%
2022-05-13T16:22:17.6795602Z Progress: Downloading Cygwin 3.3.4.20220408... 72%
2022-05-13T16:22:17.6796975Z Progress: Downloading Cygwin 3.3.4.20220408... 73%
2022-05-13T16:22:17.6797562Z Progress: Downloading Cygwin 3.3.4.20220408... 73%
2022-05-13T16:22:17.6798097Z Progress: Downloading Cygwin 3.3.4.20220408... 73%
2022-05-13T16:22:17.6798595Z Progress: Downloading Cygwin 3.3.4.20220408... 73%
2022-05-13T16:22:17.6799111Z Progress: Downloading Cygwin 3.3.4.20220408... 73%
2022-05-13T16:22:17.6799550Z Progress: Downloading Cygwin 3.3.4.20220408... 73%
2022-05-13T16:22:17.6799980Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6800389Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6800813Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6801238Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6801663Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6802065Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6802607Z Progress: Downloading Cygwin 3.3.4.20220408... 74%
2022-05-13T16:22:17.6803035Z Progress: Downloading Cygwin 3.3.4.20220408... 75%
2022-05-13T16:22:17.6808274Z Progress: Downloading Cygwin 3.3.4.20220408... 75%
2022-05-13T16:22:17.6808734Z Progress: Downloading Cygwin 3.3.4.20220408... 75%
2022-05-13T16:22:17.6809161Z Progress: Downloading Cygwin 3.3.4.20220408... 75%
2022-05-13T16:22:17.6810414Z Progress: Downloading Cygwin 3.3.4.20220408... 75%
2022-05-13T16:22:17.6810979Z Progress: Downloading Cygwin 3.3.4.20220408... 75%
2022-05-13T16:22:17.6811497Z Progress: Downloading Cygwin 3.3.4.20220408... 76%
2022-05-13T16:22:17.6812034Z Progress: Downloading Cygwin 3.3.4.20220408... 76%
2022-05-13T16:22:17.6812563Z Progress: Downloading Cygwin 3.3.4.20220408... 76%
2022-05-13T16:22:17.6813070Z Progress: Downloading Cygwin 3.3.4.20220408... 76%
2022-05-13T16:22:17.6813598Z Progress: Downloading Cygwin 3.3.4.20220408... 76%
2022-05-13T16:22:17.6814123Z Progress: Downloading Cygwin 3.3.4.20220408... 76%
2022-05-13T16:22:17.6814853Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6815395Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6815942Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6816473Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6817002Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6817520Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6818055Z Progress: Downloading Cygwin 3.3.4.20220408... 77%
2022-05-13T16:22:17.6818583Z Progress: Downloading Cygwin 3.3.4.20220408... 78%
2022-05-13T16:22:17.6819104Z Progress: Downloading Cygwin 3.3.4.20220408... 78%
2022-05-13T16:22:17.6819612Z Progress: Downloading Cygwin 3.3.4.20220408... 78%
2022-05-13T16:22:17.6820204Z Progress: Downloading Cygwin 3.3.4.20220408... 78%
2022-05-13T16:22:17.6820728Z Progress: Downloading Cygwin 3.3.4.20220408... 78%
2022-05-13T16:22:17.6821229Z Progress: Downloading Cygwin 3.3.4.20220408... 78%
2022-05-13T16:22:17.6821766Z Progress: Downloading Cygwin 3.3.4.20220408... 79%
2022-05-13T16:22:17.6822290Z Progress: Downloading Cygwin 3.3.4.20220408... 79%
2022-05-13T16:22:17.6822817Z Progress: Downloading Cygwin 3.3.4.20220408... 79%
2022-05-13T16:22:17.6823319Z Progress: Downloading Cygwin 3.3.4.20220408... 79%
2022-05-13T16:22:17.6823984Z Progress: Downloading Cygwin 3.3.4.20220408... 79%
2022-05-13T16:22:17.6824760Z Progress: Downloading Cygwin 3.3.4.20220408... 79%
2022-05-13T16:22:17.6825205Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6825696Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6826132Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6826655Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6827163Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6827568Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6828106Z Progress: Downloading Cygwin 3.3.4.20220408... 80%
2022-05-13T16:22:17.6828635Z Progress: Downloading Cygwin 3.3.4.20220408... 81%
2022-05-13T16:22:17.6829165Z Progress: Downloading Cygwin 3.3.4.20220408... 81%
2022-05-13T16:22:17.6829668Z Progress: Downloading Cygwin 3.3.4.20220408... 81%
2022-05-13T16:22:17.6830203Z Progress: Downloading Cygwin 3.3.4.20220408... 81%
2022-05-13T16:22:17.6830729Z Progress: Downloading Cygwin 3.3.4.20220408... 81%
2022-05-13T16:22:17.6831232Z Progress: Downloading Cygwin 3.3.4.20220408... 81%
2022-05-13T16:22:17.6831762Z Progress: Downloading Cygwin 3.3.4.20220408... 82%
2022-05-13T16:22:17.6832283Z Progress: Downloading Cygwin 3.3.4.20220408... 82%
2022-05-13T16:22:17.6832817Z Progress: Downloading Cygwin 3.3.4.20220408... 82%
2022-05-13T16:22:17.6833327Z Progress: Downloading Cygwin 3.3.4.20220408... 82%
2022-05-13T16:22:17.6833851Z Progress: Downloading Cygwin 3.3.4.20220408... 82%
2022-05-13T16:22:17.6834599Z Progress: Downloading Cygwin 3.3.4.20220408... 82%
2022-05-13T16:22:17.6835303Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6835797Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6836335Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6836871Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6837403Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6837914Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6838427Z Progress: Downloading Cygwin 3.3.4.20220408... 83%
2022-05-13T16:22:17.6838866Z Progress: Downloading Cygwin 3.3.4.20220408... 84%
2022-05-13T16:22:17.6839273Z Progress: Downloading Cygwin 3.3.4.20220408... 84%
2022-05-13T16:22:17.6839704Z Progress: Downloading Cygwin 3.3.4.20220408... 84%
2022-05-13T16:22:17.6840136Z Progress: Downloading Cygwin 3.3.4.20220408... 84%
2022-05-13T16:22:17.6840565Z Progress: Downloading Cygwin 3.3.4.20220408... 84%
2022-05-13T16:22:17.6842208Z Progress: Downloading Cygwin 3.3.4.20220408... 84%
2022-05-13T16:22:17.6842785Z Progress: Downloading Cygwin 3.3.4.20220408... 85%
2022-05-13T16:22:17.6843318Z Progress: Downloading Cygwin 3.3.4.20220408... 85%
2022-05-13T16:22:17.6843855Z Progress: Downloading Cygwin 3.3.4.20220408... 85%
2022-05-13T16:22:17.6845713Z Progress: Downloading Cygwin 3.3.4.20220408... 85%
2022-05-13T16:22:17.6848397Z Progress: Downloading Cygwin 3.3.4.20220408... 85%
2022-05-13T16:22:17.6849187Z Progress: Downloading Cygwin 3.3.4.20220408... 85%
2022-05-13T16:22:17.6849959Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6850662Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6851377Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6852086Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6852799Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6853504Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6854365Z Progress: Downloading Cygwin 3.3.4.20220408... 86%
2022-05-13T16:22:17.6855096Z Progress: Downloading Cygwin 3.3.4.20220408... 87%
2022-05-13T16:22:17.6855798Z Progress: Downloading Cygwin 3.3.4.20220408... 87%
2022-05-13T16:22:17.6856509Z Progress: Downloading Cygwin 3.3.4.20220408... 87%
2022-05-13T16:22:17.6857901Z Progress: Downloading Cygwin 3.3.4.20220408... 87%
2022-05-13T16:22:17.6858650Z Progress: Downloading Cygwin 3.3.4.20220408... 87%
2022-05-13T16:22:17.6859341Z Progress: Downloading Cygwin 3.3.4.20220408... 87%
2022-05-13T16:22:17.6859806Z Progress: Downloading Cygwin 3.3.4.20220408... 88%
2022-05-13T16:22:17.6860461Z Progress: Downloading Cygwin 3.3.4.20220408... 88%
2022-05-13T16:22:17.6861308Z Progress: Downloading Cygwin 3.3.4.20220408... 88%
2022-05-13T16:22:17.6862180Z Progress: Downloading Cygwin 3.3.4.20220408... 88%
2022-05-13T16:22:17.6863036Z Progress: Downloading Cygwin 3.3.4.20220408... 88%
2022-05-13T16:22:17.6863935Z Progress: Downloading Cygwin 3.3.4.20220408... 88%
2022-05-13T16:22:17.6865115Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6865853Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6866670Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6867406Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6868892Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6869668Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6870396Z Progress: Downloading Cygwin 3.3.4.20220408... 89%
2022-05-13T16:22:17.6871656Z Progress: Downloading Cygwin 3.3.4.20220408... 90%
2022-05-13T16:22:17.6872397Z Progress: Downloading Cygwin 3.3.4.20220408... 90%
2022-05-13T16:22:17.6873249Z Progress: Downloading Cygwin 3.3.4.20220408... 90%
2022-05-13T16:22:17.6874727Z Progress: Downloading Cygwin 3.3.4.20220408... 90%
2022-05-13T16:22:17.6875580Z Progress: Downloading Cygwin 3.3.4.20220408... 90%
2022-05-13T16:22:17.6876424Z Progress: Downloading Cygwin 3.3.4.20220408... 90%
2022-05-13T16:22:17.6877153Z Progress: Downloading Cygwin 3.3.4.20220408... 91%
2022-05-13T16:22:17.6877874Z Progress: Downloading Cygwin 3.3.4.20220408... 91%
2022-05-13T16:22:17.6878655Z Progress: Downloading Cygwin 3.3.4.20220408... 91%
2022-05-13T16:22:17.6879349Z Progress: Downloading Cygwin 3.3.4.20220408... 91%
2022-05-13T16:22:17.6880073Z Progress: Downloading Cygwin 3.3.4.20220408... 91%
2022-05-13T16:22:17.6880781Z Progress: Downloading Cygwin 3.3.4.20220408... 91%
2022-05-13T16:22:17.6881494Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6882190Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6882921Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6883651Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6884460Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6885190Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6885922Z Progress: Downloading Cygwin 3.3.4.20220408... 92%
2022-05-13T16:22:17.6886651Z Progress: Downloading Cygwin 3.3.4.20220408... 93%
2022-05-13T16:22:17.6887363Z Progress: Downloading Cygwin 3.3.4.20220408... 93%
2022-05-13T16:22:17.6888087Z Progress: Downloading Cygwin 3.3.4.20220408... 93%
2022-05-13T16:22:17.6888804Z Progress: Downloading Cygwin 3.3.4.20220408... 93%
2022-05-13T16:22:17.6889515Z Progress: Downloading Cygwin 3.3.4.20220408... 93%
2022-05-13T16:22:17.6890206Z Progress: Downloading Cygwin 3.3.4.20220408... 93%
2022-05-13T16:22:17.6890932Z Progress: Downloading Cygwin 3.3.4.20220408... 94%
2022-05-13T16:22:17.6891546Z Progress: Downloading Cygwin 3.3.4.20220408... 94%
2022-05-13T16:22:17.6892085Z Progress: Downloading Cygwin 3.3.4.20220408... 94%
2022-05-13T16:22:17.6892602Z Progress: Downloading Cygwin 3.3.4.20220408... 94%
2022-05-13T16:22:17.6893133Z Progress: Downloading Cygwin 3.3.4.20220408... 94%
2022-05-13T16:22:17.6893677Z Progress: Downloading Cygwin 3.3.4.20220408... 94%
2022-05-13T16:22:17.6894375Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6894946Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6895386Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6895813Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6896647Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6897208Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6897737Z Progress: Downloading Cygwin 3.3.4.20220408... 95%
2022-05-13T16:22:17.6898265Z Progress: Downloading Cygwin 3.3.4.20220408... 96%
2022-05-13T16:22:17.6898756Z Progress: Downloading Cygwin 3.3.4.20220408... 96%
2022-05-13T16:22:17.6899191Z Progress: Downloading Cygwin 3.3.4.20220408... 96%
2022-05-13T16:22:17.6899661Z Progress: Downloading Cygwin 3.3.4.20220408... 96%
2022-05-13T16:22:17.6901064Z Progress: Downloading Cygwin 3.3.4.20220408... 96%
2022-05-13T16:22:17.6901494Z Progress: Downloading Cygwin 3.3.4.20220408... 96%
2022-05-13T16:22:17.6901928Z Progress: Downloading Cygwin 3.3.4.20220408... 97%
2022-05-13T16:22:17.6902357Z Progress: Downloading Cygwin 3.3.4.20220408... 97%
2022-05-13T16:22:17.6902787Z Progress: Downloading Cygwin 3.3.4.20220408... 97%
2022-05-13T16:22:17.6903205Z Progress: Downloading Cygwin 3.3.4.20220408... 97%
2022-05-13T16:22:17.6903640Z Progress: Downloading Cygwin 3.3.4.20220408... 97%
2022-05-13T16:22:17.6904146Z Progress: Downloading Cygwin 3.3.4.20220408... 97%
2022-05-13T16:22:17.6904558Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6904981Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6905405Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6905827Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6906237Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6906658Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6907676Z Progress: Downloading Cygwin 3.3.4.20220408... 98%
2022-05-13T16:22:17.6908370Z Progress: Downloading Cygwin 3.3.4.20220408... 99%
2022-05-13T16:22:17.6909142Z Progress: Downloading Cygwin 3.3.4.20220408... 99%
2022-05-13T16:22:17.6909855Z Progress: Downloading Cygwin 3.3.4.20220408... 99%
2022-05-13T16:22:17.6910568Z Progress: Downloading Cygwin 3.3.4.20220408... 99%
2022-05-13T16:22:17.6911281Z Progress: Downloading Cygwin 3.3.4.20220408... 99%
2022-05-13T16:22:17.6911985Z Progress: Downloading Cygwin 3.3.4.20220408... 99%
2022-05-13T16:22:17.6912722Z Progress: Downloading Cygwin 3.3.4.20220408... 100%
2022-05-13T16:22:19.6891594Z 
2022-05-13T16:22:19.6893906Z Cygwin v3.3.4.20220408 [Approved]
2022-05-13T16:22:19.7101247Z cygwin package files install completed. Performing other installation steps.
2022-05-13T16:22:22.1862116Z Download site: http://mirrors.kernel.org/sourceware/cygwin/
2022-05-13T16:22:22.2348181Z Installing 64-bit Cygwin...
2022-05-13T16:23:31.8278598Z Cygwin has been installed.
2022-05-13T16:23:32.1437615Z Added C:\ProgramData\chocolatey\bin\Cygwin.exe shim pointed to 'c:\tools\cygwin\cygwin.bat'.
2022-05-13T16:23:32.1454530Z Copying cygwin package manager (setup) to C:\tools\cygwin
2022-05-13T16:23:32.5897414Z Environment Vars (like PATH) have changed. Close/reopen your shell to
2022-05-13T16:23:32.5899405Z  see the changes (or in powershell/cmd.exe just type `refreshenv`).
2022-05-13T16:23:32.7119683Z  The install of cygwin was successful.
2022-05-13T16:23:32.7126997Z   Software installed to 'C:\tools\cygwin'
2022-05-13T16:23:33.2342410Z 
2022-05-13T16:23:33.2344031Z Progress: Downloading cyg-get 1.2.1... 13%
2022-05-13T16:23:33.2346191Z Progress: Downloading cyg-get 1.2.1... 40%
2022-05-13T16:23:33.2347463Z Progress: Downloading cyg-get 1.2.1... 67%
2022-05-13T16:23:33.2350187Z Progress: Downloading cyg-get 1.2.1... 94%
2022-05-13T16:23:33.2350956Z Progress: Downloading cyg-get 1.2.1... 100%
2022-05-13T16:23:33.5033792Z 
2022-05-13T16:23:33.5035422Z cyg-get v1.2.1 [Approved]
2022-05-13T16:23:33.5054016Z cyg-get package files install completed. Performing other installation steps.
2022-05-13T16:23:34.1681486Z Adding C:\ProgramData\chocolatey\bin\cyg-get.bat and pointing it to powershell command C:\ProgramData\chocolatey\lib\cyg-get\tools\cyg-get.ps1
2022-05-13T16:23:34.7125946Z  The install of cyg-get was successful.
2022-05-13T16:23:34.7128841Z   Software install location not explicitly set, it could be in package or
2022-05-13T16:23:34.7130751Z   default install location of installer.
2022-05-13T16:23:34.7318615Z 
2022-05-13T16:23:34.7323507Z Chocolatey installed 2/2 packages. 
2022-05-13T16:23:34.7326582Z  See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).
2022-05-13T16:23:35.8695046Z Attempting to install cygwin packages: libssl-devel,libbz2-devel,libgmp-devel,zlib-devel,gcc-core,libOpenCL-devel,libcrypt-devel,make,wget,rebase,perl
2022-05-13T16:25:18.3653317Z --------------------------------------------------------
2022-05-13T16:25:18.3672935Z                  =====  Building  =====                 
2022-05-13T16:25:18.3687471Z --------------------------------------------------------
2022-05-13T16:25:18.3692929Z Compiler version
2022-05-13T16:25:18.3764378Z Executing 'gcc --version'
2022-05-13T16:25:18.4892198Z Copying skeleton files.
2022-05-13T16:25:18.4894206Z These files are for the users to personalise their cygwin experience.
2022-05-13T16:25:18.4895826Z 
2022-05-13T16:25:18.4897252Z They will never be overwritten nor automatically updated.
2022-05-13T16:25:18.4898130Z 
2022-05-13T16:25:18.5604919Z './.bashrc' -> '/home/VssAdministrator//.bashrc'
2022-05-13T16:25:18.6046211Z './.bash_profile' -> '/home/VssAdministrator//.bash_profile'
2022-05-13T16:25:18.6290715Z './.inputrc' -> '/home/VssAdministrator//.inputrc'
2022-05-13T16:25:18.6530505Z './.profile' -> '/home/VssAdministrator//.profile'
2022-05-13T16:25:18.8720076Z gcc (GCC) 11.3.0
2022-05-13T16:25:18.8722125Z Copyright (C) 2021 Free Software Foundation, Inc.
2022-05-13T16:25:18.8725133Z This is free software; see the source for copying conditions.  There is NO
2022-05-13T16:25:18.8727682Z warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
2022-05-13T16:25:18.8728390Z 
2022-05-13T16:25:18.8815501Z --------------------------------
2022-05-13T16:25:18.8837960Z Executing 'gcc -dM -E -x c /dev/null'
2022-05-13T16:25:19.2240710Z #define __DBL_MIN_EXP__ (-1021)
2022-05-13T16:25:19.2242505Z #define __UINT_LEAST16_MAX__ 0xffff
2022-05-13T16:25:19.2243295Z #define __ATOMIC_ACQUIRE 2
2022-05-13T16:25:19.2244104Z #define __FLT128_MAX_10_EXP__ 4932
2022-05-13T16:25:19.2245167Z #define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
2022-05-13T16:25:19.2246050Z #define __GCC_IEC_559_COMPLEX 2
2022-05-13T16:25:19.2247851Z #define __UINT_LEAST8_TYPE__ unsigned char
2022-05-13T16:25:19.2248948Z #define __SIZEOF_FLOAT80__ 16
2022-05-13T16:25:19.2250063Z #define __INTMAX_C(c) c ## L
2022-05-13T16:25:19.2252220Z #define __CHAR_BIT__ 8
2022-05-13T16:25:19.2253350Z #define __UINT8_MAX__ 0xff
2022-05-13T16:25:19.2254643Z #define __SCHAR_WIDTH__ 8
2022-05-13T16:25:19.2255420Z #define __WINT_MAX__ 0xffffffffU
2022-05-13T16:25:19.2256275Z #define __FLT32_MIN_EXP__ (-125)
2022-05-13T16:25:19.2257132Z #define __ORDER_LITTLE_ENDIAN__ 1234
2022-05-13T16:25:19.2258071Z #define __SIZE_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2258902Z #define __WCHAR_MAX__ 0xffff
2022-05-13T16:25:19.2259801Z #define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
2022-05-13T16:25:19.2260791Z #define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
2022-05-13T16:25:19.2261704Z #define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
2022-05-13T16:25:19.2262703Z #define __DBL_DENORM_MIN__ ((double)4.94065645841246544176568792868221372e-324L)
2022-05-13T16:25:19.2263786Z #define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
2022-05-13T16:25:19.2265109Z #define __GCC_ATOMIC_CHAR_LOCK_FREE 2
2022-05-13T16:25:19.2265945Z #define __GCC_IEC_559 2
2022-05-13T16:25:19.2266894Z #define __FLT32X_DECIMAL_DIG__ 17
2022-05-13T16:25:19.2267772Z #define __FLT_EVAL_METHOD__ 0
2022-05-13T16:25:19.2268626Z #define __FLT64_DECIMAL_DIG__ 17
2022-05-13T16:25:19.2269316Z #define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
2022-05-13T16:25:19.2270292Z #define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2271472Z #define __SIG_ATOMIC_TYPE__ int
2022-05-13T16:25:19.2272375Z #define __DBL_MIN_10_EXP__ (-307)
2022-05-13T16:25:19.2273202Z #define __FINITE_MATH_ONLY__ 0
2022-05-13T16:25:19.2274418Z #define __FLT32X_MAX_EXP__ 1024
2022-05-13T16:25:19.2276089Z #define __FLT32_HAS_DENORM__ 1
2022-05-13T16:25:19.2276851Z #define __UINT_FAST8_MAX__ 0xff
2022-05-13T16:25:19.2277679Z #define __FLT32_MAX_10_EXP__ 38
2022-05-13T16:25:19.2278445Z #define _stdcall __attribute__((__stdcall__))
2022-05-13T16:25:19.2279155Z #define __DEC64_MAX_EXP__ 385
2022-05-13T16:25:19.2279758Z #define __INT8_C(c) c
2022-05-13T16:25:19.2280501Z #define __INT_LEAST8_WIDTH__ 8
2022-05-13T16:25:19.2281254Z #define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2281902Z #define __SHRT_MAX__ 0x7fff
2022-05-13T16:25:19.2282709Z #define __LDBL_MAX__ 1.18973149535723176502126385303097021e+4932L
2022-05-13T16:25:19.2283485Z #define __FLT64X_MAX_10_EXP__ 4932
2022-05-13T16:25:19.2284178Z #define __LDBL_IS_IEC_60559__ 2
2022-05-13T16:25:19.2284957Z #define __FLT64X_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2285663Z #define __UINT_LEAST8_MAX__ 0xff
2022-05-13T16:25:19.2287197Z #define __GCC_ATOMIC_BOOL_LOCK_FREE 2
2022-05-13T16:25:19.2288182Z #define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
2022-05-13T16:25:19.2289174Z #define __UINTMAX_TYPE__ long unsigned int
2022-05-13T16:25:19.2290002Z #define __DEC32_EPSILON__ 1E-6DF
2022-05-13T16:25:19.2290682Z #define __FLT_EVAL_METHOD_TS_18661_3__ 0
2022-05-13T16:25:19.2291389Z #define __unix 1
2022-05-13T16:25:19.2292104Z #define __UINT32_MAX__ 0xffffffffU
2022-05-13T16:25:19.2293863Z #define __FLT128_MIN_EXP__ (-16381)
2022-05-13T16:25:19.2295001Z #define __WINT_MIN__ 0U
2022-05-13T16:25:19.2295716Z #define __FLT128_MIN_10_EXP__ (-4931)
2022-05-13T16:25:19.2297279Z #define __FLT32X_IS_IEC_60559__ 2
2022-05-13T16:25:19.2298224Z #define __INT_LEAST16_WIDTH__ 16
2022-05-13T16:25:19.2299680Z #define __SCHAR_MAX__ 0x7f
2022-05-13T16:25:19.2300872Z #define __FLT128_MANT_DIG__ 113
2022-05-13T16:25:19.2301660Z #define __WCHAR_MIN__ 0
2022-05-13T16:25:19.2302461Z #define __INT64_C(c) c ## L
2022-05-13T16:25:19.2303261Z #define __GCC_ATOMIC_POINTER_LOCK_FREE 2
2022-05-13T16:25:19.2304380Z #define __FLT32X_MANT_DIG__ 53
2022-05-13T16:25:19.2305159Z #define __USER_LABEL_PREFIX__ 
2022-05-13T16:25:19.2305964Z #define __FLT64X_EPSILON__ 1.08420217248550443400745280086994171e-19F64x
2022-05-13T16:25:19.2308078Z #define __STDC_HOSTED__ 1
2022-05-13T16:25:19.2309394Z #define __DEC64_MIN_EXP__ (-382)
2022-05-13T16:25:19.2310166Z #define __DBL_DIG__ 15
2022-05-13T16:25:19.2310696Z #define __FLT32_DIG__ 6
2022-05-13T16:25:19.2311417Z #define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
2022-05-13T16:25:19.2312123Z #define __SHRT_WIDTH__ 16
2022-05-13T16:25:19.2312671Z #define __FLT32_IS_IEC_60559__ 2
2022-05-13T16:25:19.2313447Z #define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
2022-05-13T16:25:19.2314168Z #define __STDC_UTF_16__ 1
2022-05-13T16:25:19.2314771Z #define __DBL_IS_IEC_60559__ 2
2022-05-13T16:25:19.2315328Z #define __DEC32_MAX__ 9.999999E96DF
2022-05-13T16:25:19.2316104Z #define __FLT64X_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951F64x
2022-05-13T16:25:19.2316904Z #define __FLT32X_HAS_INFINITY__ 1
2022-05-13T16:25:19.2317544Z #define __INT32_MAX__ 0x7fffffff
2022-05-13T16:25:19.2318067Z #define __unix__ 1
2022-05-13T16:25:19.2318603Z #define __INT_WIDTH__ 32
2022-05-13T16:25:19.2319169Z #define __SIZEOF_LONG__ 8
2022-05-13T16:25:19.2319682Z #define __UINT16_C(c) c
2022-05-13T16:25:19.2320255Z #define __DECIMAL_DIG__ 21
2022-05-13T16:25:19.2320974Z #define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
2022-05-13T16:25:19.2321639Z #define __FLT128_IS_IEC_60559__ 2
2022-05-13T16:25:19.2322130Z #define __FLT64X_MIN_10_EXP__ (-4931)
2022-05-13T16:25:19.2322688Z #define __LDBL_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2323736Z #define __FLT64_MANT_DIG__ 53
2022-05-13T16:25:19.2324426Z #define __FLT64X_MANT_DIG__ 64
2022-05-13T16:25:19.2324988Z #define __GNUC__ 11
2022-05-13T16:25:19.2325526Z #define _cdecl __attribute__((__cdecl__))
2022-05-13T16:25:19.2326077Z #define __MMX__ 1
2022-05-13T16:25:19.2326514Z #define __FLT_HAS_DENORM__ 1
2022-05-13T16:25:19.2327056Z #define __SIZEOF_LONG_DOUBLE__ 16
2022-05-13T16:25:19.2328060Z #define __BIGGEST_ALIGNMENT__ 16
2022-05-13T16:25:19.2328647Z #define __FLT64_MAX_10_EXP__ 308
2022-05-13T16:25:19.2329348Z #define __DBL_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
2022-05-13T16:25:19.2330639Z #define _thiscall __attribute__((__thiscall__))
2022-05-13T16:25:19.2331304Z #define __INT_FAST32_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2331857Z #define __DBL_HAS_INFINITY__ 1
2022-05-13T16:25:19.2332917Z #define __SIZEOF_FLOAT__ 4
2022-05-13T16:25:19.2333505Z #define __HAVE_SPECULATION_SAFE_VALUE 1
2022-05-13T16:25:19.2334093Z #define __DEC32_MIN_EXP__ (-94)
2022-05-13T16:25:19.2334611Z #define __INTPTR_WIDTH__ 64
2022-05-13T16:25:19.2335380Z #define __FLT64X_HAS_INFINITY__ 1
2022-05-13T16:25:19.2335998Z #define __UINT_LEAST32_MAX__ 0xffffffffU
2022-05-13T16:25:19.2336559Z #define __FLT32X_HAS_DENORM__ 1
2022-05-13T16:25:19.2337138Z #define __INT_FAST16_TYPE__ long int
2022-05-13T16:25:19.2337687Z #define __MMX_WITH_SSE__ 1
2022-05-13T16:25:19.2339219Z #define _fastcall __attribute__((__fastcall__))
2022-05-13T16:25:19.2340011Z #define __LDBL_HAS_DENORM__ 1
2022-05-13T16:25:19.2340815Z #define __FLT128_HAS_INFINITY__ 1
2022-05-13T16:25:19.2341571Z #define __DEC32_MIN__ 1E-95DF
2022-05-13T16:25:19.2342673Z #define __DBL_MAX_EXP__ 1024
2022-05-13T16:25:19.2343524Z #define __WCHAR_WIDTH__ 16
2022-05-13T16:25:19.2346856Z #define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
2022-05-13T16:25:19.2347656Z #define __DEC128_EPSILON__ 1E-33DL
2022-05-13T16:25:19.2348296Z #define __SSE2_MATH__ 1
2022-05-13T16:25:19.2349008Z #define __ATOMIC_HLE_RELEASE 131072
2022-05-13T16:25:19.2349756Z #define __PTRDIFF_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2350372Z #define __amd64 1
2022-05-13T16:25:19.2351064Z #define __ATOMIC_HLE_ACQUIRE 65536
2022-05-13T16:25:19.2351801Z #define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
2022-05-13T16:25:19.2352513Z #define __SIZEOF_SIZE_T__ 8
2022-05-13T16:25:19.2353263Z #define __FLT64X_MIN_EXP__ (-16381)
2022-05-13T16:25:19.2354648Z #define __SIZEOF_WINT_T__ 4
2022-05-13T16:25:19.2355381Z #define __LONG_LONG_WIDTH__ 64
2022-05-13T16:25:19.2356325Z #define __FLT32_MAX_EXP__ 128
2022-05-13T16:25:19.2357685Z #define __GXX_ABI_VERSION 1016
2022-05-13T16:25:19.2358327Z #define __FLT_MIN_EXP__ (-125)
2022-05-13T16:25:19.2359022Z #define __INT16_MAX__ 0x7fff
2022-05-13T16:25:19.2359690Z #define __x86_64 1
2022-05-13T16:25:19.2360380Z #define __INT_FAST64_TYPE__ long int
2022-05-13T16:25:19.2361126Z #define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
2022-05-13T16:25:19.2362012Z #define __DBL_MIN__ ((double)2.22507385850720138309023271733240406e-308L)
2022-05-13T16:25:19.2362871Z #define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
2022-05-13T16:25:19.2363744Z #define __FLT64X_NORM_MAX__ 1.18973149535723176502126385303097021e+4932F64x
2022-05-13T16:25:19.2365465Z #define __SIZEOF_POINTER__ 8
2022-05-13T16:25:19.2366260Z #define __SIZE_TYPE__ long unsigned int
2022-05-13T16:25:19.2366678Z #define __LP64__ 1
2022-05-13T16:25:19.2367300Z #define __DBL_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2368094Z #define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
2022-05-13T16:25:19.2369805Z #define __DECIMAL_BID_FORMAT__ 1
2022-05-13T16:25:19.2370556Z #define __FLT64_MIN_EXP__ (-1021)
2022-05-13T16:25:19.2371198Z #define __GXX_TYPEINFO_EQUALITY_INLINE 0
2022-05-13T16:25:19.2371961Z #define __FLT64_MIN_10_EXP__ (-307)
2022-05-13T16:25:19.2372676Z #define __FLT64X_DECIMAL_DIG__ 21
2022-05-13T16:25:19.2373365Z #define __DEC128_MIN__ 1E-6143DL
2022-05-13T16:25:19.2374654Z #define __REGISTER_PREFIX__ 
2022-05-13T16:25:19.2376019Z #define __UINT16_MAX__ 0xffff
2022-05-13T16:25:19.2376773Z #define __DBL_HAS_DENORM__ 1
2022-05-13T16:25:19.2377476Z #define __cdecl __attribute__((__cdecl__))
2022-05-13T16:25:19.2378243Z #define __LDBL_HAS_INFINITY__ 1
2022-05-13T16:25:19.2379037Z #define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
2022-05-13T16:25:19.2379801Z #define __UINT8_TYPE__ unsigned char
2022-05-13T16:25:19.2380543Z #define __FLT_DIG__ 6
2022-05-13T16:25:19.2381162Z #define __NO_INLINE__ 1
2022-05-13T16:25:19.2381892Z #define __DEC_EVAL_METHOD__ 2
2022-05-13T16:25:19.2382637Z #define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
2022-05-13T16:25:19.2383392Z #define __FLT_MANT_DIG__ 24
2022-05-13T16:25:19.2385240Z #define __LDBL_DECIMAL_DIG__ 21
2022-05-13T16:25:19.2386323Z #define __VERSION__ "11.3.0"
2022-05-13T16:25:19.2387109Z #define __UINT64_C(c) c ## UL
2022-05-13T16:25:19.2387843Z #define __SEH__ 1
2022-05-13T16:25:19.2388583Z #define __INT_LEAST32_MAX__ 0x7fffffff
2022-05-13T16:25:19.2389403Z #define __GCC_ATOMIC_INT_LOCK_FREE 2
2022-05-13T16:25:19.2390141Z #define __FLT128_MAX_EXP__ 16384
2022-05-13T16:25:19.2391573Z #define __FLT32_MANT_DIG__ 24
2022-05-13T16:25:19.2393414Z #define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
2022-05-13T16:25:19.2395456Z #define __FLT128_HAS_DENORM__ 1
2022-05-13T16:25:19.2396288Z #define __FLT32_DECIMAL_DIG__ 9
2022-05-13T16:25:19.2397031Z #define __FLT128_DIG__ 33
2022-05-13T16:25:19.2397698Z #define __INT32_C(c) c
2022-05-13T16:25:19.2398328Z #define __DEC64_EPSILON__ 1E-15DD
2022-05-13T16:25:19.2399768Z #define __ORDER_PDP_ENDIAN__ 3412
2022-05-13T16:25:19.2400554Z #define __DEC128_MIN_EXP__ (-6142)
2022-05-13T16:25:19.2401386Z #define __INT_FAST32_TYPE__ long int
2022-05-13T16:25:19.2402036Z #define __UINT_LEAST16_TYPE__ short unsigned int
2022-05-13T16:25:19.2402825Z #define unix 1
2022-05-13T16:25:19.2403556Z #define __UINT64_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2405511Z #define __FLT_IS_IEC_60559__ 2
2022-05-13T16:25:19.2406370Z #define __GNUC_WIDE_EXECUTION_CHARSET_NAME "UTF-16LE"
2022-05-13T16:25:19.2407099Z #define __FLT64X_DIG__ 18
2022-05-13T16:25:19.2407739Z #define __INT8_TYPE__ signed char
2022-05-13T16:25:19.2408454Z #define __GCC_ASM_FLAG_OUTPUTS__ 1
2022-05-13T16:25:19.2410076Z #define __UINT32_TYPE__ unsigned int
2022-05-13T16:25:19.2411554Z #define __FLT_RADIX__ 2
2022-05-13T16:25:19.2413303Z #define __INT_LEAST16_TYPE__ short int
2022-05-13T16:25:19.2416977Z #define __LDBL_EPSILON__ 1.08420217248550443400745280086994171e-19L
2022-05-13T16:25:19.2418155Z #define __UINTMAX_C(c) c ## UL
2022-05-13T16:25:19.2418941Z #define __SSE_MATH__ 1
2022-05-13T16:25:19.2419610Z #define __k8 1
2022-05-13T16:25:19.2420422Z #define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
2022-05-13T16:25:19.2421385Z #define __SIG_ATOMIC_MAX__ 0x7fffffff
2022-05-13T16:25:19.2422197Z #define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
2022-05-13T16:25:19.2423051Z #define __SIZEOF_PTRDIFF_T__ 8
2022-05-13T16:25:19.2423834Z #define __LDBL_DIG__ 18
2022-05-13T16:25:19.2424882Z #define __CYGWIN__ 1
2022-05-13T16:25:19.2425628Z #define __FLT64_IS_IEC_60559__ 2
2022-05-13T16:25:19.2426981Z #define __x86_64__ 1
2022-05-13T16:25:19.2427907Z #define __FLT32X_MIN_EXP__ (-1021)
2022-05-13T16:25:19.2428628Z #define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
2022-05-13T16:25:19.2430063Z #define __INT_FAST16_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2431512Z #define __FLT64_DIG__ 15
2022-05-13T16:25:19.2432302Z #define __UINT_FAST32_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2433033Z #define __UINT_LEAST64_TYPE__ long unsigned int
2022-05-13T16:25:19.2433746Z #define __FLT_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2434427Z #define __FLT_MAX_10_EXP__ 38
2022-05-13T16:25:19.2435178Z #define __LONG_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2435872Z #define __FLT64X_HAS_DENORM__ 1
2022-05-13T16:25:19.2436659Z #define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
2022-05-13T16:25:19.2437633Z #define __FLT_HAS_INFINITY__ 1
2022-05-13T16:25:19.2438688Z #define __GNUC_EXECUTION_CHARSET_NAME "UTF-8"
2022-05-13T16:25:19.2439825Z #define __UINT_FAST16_TYPE__ long unsigned int
2022-05-13T16:25:19.2440639Z #define __DEC64_MAX__ 9.999999999999999E384DD
2022-05-13T16:25:19.2441355Z #define __INT_FAST32_WIDTH__ 64
2022-05-13T16:25:19.2442018Z #define __CHAR16_TYPE__ short unsigned int
2022-05-13T16:25:19.2442727Z #define __PRAGMA_REDEFINE_EXTNAME 1
2022-05-13T16:25:19.2443402Z #define __SIZE_WIDTH__ 64
2022-05-13T16:25:19.2443979Z #define __SEG_FS 1
2022-05-13T16:25:19.2444781Z #define __INT_LEAST16_MAX__ 0x7fff
2022-05-13T16:25:19.2445470Z #define __DEC64_MANT_DIG__ 16
2022-05-13T16:25:19.2446170Z #define __INT64_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2446768Z #define __SEG_GS 1
2022-05-13T16:25:19.2447513Z #define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
2022-05-13T16:25:19.2448291Z #define __SIG_ATOMIC_WIDTH__ 32
2022-05-13T16:25:19.2449136Z #define __INT_LEAST64_TYPE__ long int
2022-05-13T16:25:19.2450003Z #define __INT16_TYPE__ short int
2022-05-13T16:25:19.2450778Z #define __INT_LEAST8_TYPE__ signed char
2022-05-13T16:25:19.2451505Z #define __STDC_VERSION__ 201710L
2022-05-13T16:25:19.2452131Z #define __SIZEOF_INT__ 4
2022-05-13T16:25:19.2452823Z #define __DEC32_MAX_EXP__ 97
2022-05-13T16:25:19.2453527Z #define __INT_FAST8_MAX__ 0x7f
2022-05-13T16:25:19.2454268Z #define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
2022-05-13T16:25:19.2455139Z #define __INTPTR_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2455885Z #define __FLT64_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2456622Z #define __stdcall __attribute__((__stdcall__))
2022-05-13T16:25:19.2457452Z #define __FLT32_MIN_10_EXP__ (-37)
2022-05-13T16:25:19.2458143Z #define __FLT32X_DIG__ 15
2022-05-13T16:25:19.2458860Z #define __GXX_MERGED_TYPEINFO_NAMES 0
2022-05-13T16:25:19.2459534Z #define __PTRDIFF_WIDTH__ 64
2022-05-13T16:25:19.2460172Z #define __LDBL_MANT_DIG__ 64
2022-05-13T16:25:19.2460866Z #define __FLT64_HAS_INFINITY__ 1
2022-05-13T16:25:19.2461659Z #define __FLT64X_MAX__ 1.18973149535723176502126385303097021e+4932F64x
2022-05-13T16:25:19.2462421Z #define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
2022-05-13T16:25:19.2463152Z #define __GCC_ATOMIC_LONG_LOCK_FREE 2
2022-05-13T16:25:19.2463879Z #define __DEC32_MANT_DIG__ 7
2022-05-13T16:25:19.2464666Z #define __k8__ 1
2022-05-13T16:25:19.2465351Z #define __INTPTR_TYPE__ long int
2022-05-13T16:25:19.2466073Z #define __UINT16_TYPE__ short unsigned int
2022-05-13T16:25:19.2466811Z #define __WCHAR_TYPE__ short unsigned int
2022-05-13T16:25:19.2467490Z #define __pic__ 1
2022-05-13T16:25:19.2468145Z #define __UINTPTR_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2468891Z #define __INT_FAST64_WIDTH__ 64
2022-05-13T16:25:19.2469621Z #define __INT_FAST64_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2470304Z #define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
2022-05-13T16:25:19.2471138Z #define __FLT_NORM_MAX__ 3.40282346638528859811704183484516925e+38F
2022-05-13T16:25:19.2471909Z #define __FLT32_HAS_INFINITY__ 1
2022-05-13T16:25:19.2472590Z #define __FLT64X_MAX_EXP__ 16384
2022-05-13T16:25:19.2473273Z #define __UINT_FAST64_TYPE__ long unsigned int
2022-05-13T16:25:19.2473969Z #define __INT_MAX__ 0x7fffffff
2022-05-13T16:25:19.2474805Z #define __code_model_medium__ 1
2022-05-13T16:25:19.2475476Z #define __INT64_TYPE__ long int
2022-05-13T16:25:19.2476166Z #define __FLT_MAX_EXP__ 128
2022-05-13T16:25:19.2476866Z #define __ORDER_BIG_ENDIAN__ 4321
2022-05-13T16:25:19.2477559Z #define __DBL_MANT_DIG__ 53
2022-05-13T16:25:19.2478174Z #define __SIZEOF_FLOAT128__ 16
2022-05-13T16:25:19.2478919Z #define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2479652Z #define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
2022-05-13T16:25:19.2480346Z #define __DEC64_MIN__ 1E-383DD
2022-05-13T16:25:19.2480988Z #define __WINT_TYPE__ unsigned int
2022-05-13T16:25:19.2481704Z #define __UINT_LEAST32_TYPE__ unsigned int
2022-05-13T16:25:19.2482555Z #define __SIZEOF_SHORT__ 2
2022-05-13T16:25:19.2483297Z #define __FLT32_NORM_MAX__ 3.40282346638528859811704183484516925e+38F32
2022-05-13T16:25:19.2484017Z #define __SSE__ 1
2022-05-13T16:25:19.2484853Z #define __LDBL_MIN_EXP__ (-16381)
2022-05-13T16:25:19.2485676Z #define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
2022-05-13T16:25:19.2486349Z #define __amd64__ 1
2022-05-13T16:25:19.2487019Z #define __WINT_WIDTH__ 32
2022-05-13T16:25:19.2487763Z #define __INT_LEAST8_MAX__ 0x7f
2022-05-13T16:25:19.2488400Z #define __INT_LEAST64_WIDTH__ 64
2022-05-13T16:25:19.2489081Z #define __LDBL_MAX_EXP__ 16384
2022-05-13T16:25:19.2489792Z #define __FLT32X_MAX_10_EXP__ 308
2022-05-13T16:25:19.2490488Z #define __SIZEOF_INT128__ 16
2022-05-13T16:25:19.2495637Z #define __FLT64X_IS_IEC_60559__ 2
2022-05-13T16:25:19.2496592Z #define __LDBL_MAX_10_EXP__ 4932
2022-05-13T16:25:19.2497365Z #define __ATOMIC_RELAXED 0
2022-05-13T16:25:19.2498122Z #define __DBL_EPSILON__ ((double)2.22044604925031308084726333618164062e-16L)
2022-05-13T16:25:19.2498971Z #define __thiscall __attribute__((__thiscall__))
2022-05-13T16:25:19.2499806Z #define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
2022-05-13T16:25:19.2500506Z #define _LP64 1
2022-05-13T16:25:19.2501104Z #define __UINT8_C(c) c
2022-05-13T16:25:19.2501786Z #define __FLT64_MAX_EXP__ 1024
2022-05-13T16:25:19.2503580Z #define __INT_LEAST32_TYPE__ int
2022-05-13T16:25:19.2504292Z #define __SIZEOF_WCHAR_T__ 2
2022-05-13T16:25:19.2505093Z #define __UINT64_TYPE__ long unsigned int
2022-05-13T16:25:19.2505785Z #define __GNUC_PATCHLEVEL__ 0
2022-05-13T16:25:19.2506586Z #define __FLT128_NORM_MAX__ 1.18973149535723176508575932662800702e+4932F128
2022-05-13T16:25:19.2507575Z #define __FLT64_NORM_MAX__ 1.79769313486231570814527423731704357e+308F64
2022-05-13T16:25:19.2508422Z #define __FLT128_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2509177Z #define __INTMAX_MAX__ 0x7fffffffffffffffL
2022-05-13T16:25:19.2509899Z #define __INT_FAST8_TYPE__ signed char
2022-05-13T16:25:19.2510599Z #define __fastcall __attribute__((__fastcall__))
2022-05-13T16:25:19.2511422Z #define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
2022-05-13T16:25:19.2512183Z #define __GNUC_STDC_INLINE__ 1
2022-05-13T16:25:19.2512961Z #define __FLT64_HAS_DENORM__ 1
2022-05-13T16:25:19.2513711Z #define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
2022-05-13T16:25:19.2514478Z #define __DBL_DECIMAL_DIG__ 17
2022-05-13T16:25:19.2515326Z #define __STDC_UTF_32__ 1
2022-05-13T16:25:19.2515934Z #define __INT_FAST8_WIDTH__ 8
2022-05-13T16:25:19.2516647Z #define __FXSR__ 1
2022-05-13T16:25:19.2517459Z #define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
2022-05-13T16:25:19.2518349Z #define __DBL_NORM_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
2022-05-13T16:25:19.2519125Z #define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
2022-05-13T16:25:19.2519826Z #define __INTMAX_WIDTH__ 64
2022-05-13T16:25:19.2520531Z #define __UINT32_C(c) c ## U
2022-05-13T16:25:19.2521322Z #define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
2022-05-13T16:25:19.2522017Z #define __INT8_MAX__ 0x7f
2022-05-13T16:25:19.2522698Z #define __LONG_WIDTH__ 64
2022-05-13T16:25:19.2523353Z #define __PIC__ 1
2022-05-13T16:25:19.2524016Z #define __UINT_FAST32_TYPE__ long unsigned int
2022-05-13T16:25:19.2524967Z #define __FLT32X_NORM_MAX__ 1.79769313486231570814527423731704357e+308F32x
2022-05-13T16:25:19.2525741Z #define __CHAR32_TYPE__ unsigned int
2022-05-13T16:25:19.2526548Z #define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
2022-05-13T16:25:19.2527205Z #define __SSE2__ 1
2022-05-13T16:25:19.2527911Z #define __INT32_TYPE__ int
2022-05-13T16:25:19.2528608Z #define __SIZEOF_DOUBLE__ 8
2022-05-13T16:25:19.2529290Z #define __FLT_MIN_10_EXP__ (-37)
2022-05-13T16:25:19.2530030Z #define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
2022-05-13T16:25:19.2530770Z #define __INT_LEAST32_WIDTH__ 32
2022-05-13T16:25:19.2531646Z #define __INTMAX_TYPE__ long int
2022-05-13T16:25:19.2532302Z #define __DEC128_MAX_EXP__ 6145
2022-05-13T16:25:19.2533012Z #define __FLT32X_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2533729Z #define __ATOMIC_CONSUME 1
2022-05-13T16:25:19.2534383Z #define __GNUC_MINOR__ 3
2022-05-13T16:25:19.2535139Z #define __INT_FAST16_WIDTH__ 64
2022-05-13T16:25:19.2535918Z #define __UINTMAX_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2536738Z #define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
2022-05-13T16:25:19.2537452Z #define __DBL_MAX_10_EXP__ 308
2022-05-13T16:25:19.2538275Z #define __LDBL_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951L
2022-05-13T16:25:19.2539016Z #define __INT16_C(c) c
2022-05-13T16:25:19.2539678Z #define __STDC__ 1
2022-05-13T16:25:19.2540358Z #define __PTRDIFF_TYPE__ long int
2022-05-13T16:25:19.2541032Z #define __ATOMIC_SEQ_CST 5
2022-05-13T16:25:19.2541763Z #define __FLT32X_MIN_10_EXP__ (-307)
2022-05-13T16:25:19.2542505Z #define __UINTPTR_TYPE__ long unsigned int
2022-05-13T16:25:19.2543860Z #define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
2022-05-13T16:25:19.2546327Z #define __DEC128_MANT_DIG__ 34
2022-05-13T16:25:19.2548458Z #define __LDBL_MIN_10_EXP__ (-4931)
2022-05-13T16:25:19.2549190Z #define __SIZEOF_LONG_LONG__ 8
2022-05-13T16:25:19.2549902Z #define __FLT128_DECIMAL_DIG__ 36
2022-05-13T16:25:19.2550592Z #define __GCC_ATOMIC_LLONG_LOCK_FREE 2
2022-05-13T16:25:19.2551288Z #define __FLT32_HAS_QUIET_NAN__ 1
2022-05-13T16:25:19.2551921Z #define __FLT_DECIMAL_DIG__ 9
2022-05-13T16:25:19.2552637Z #define __UINT_FAST16_MAX__ 0xffffffffffffffffUL
2022-05-13T16:25:19.2553666Z #define __LDBL_NORM_MAX__ 1.18973149535723176502126385303097021e+4932L
2022-05-13T16:25:19.2554579Z #define __GCC_ATOMIC_SHORT_LOCK_FREE 2
2022-05-13T16:25:19.2555812Z #define __UINT_FAST8_TYPE__ unsigned char
2022-05-13T16:25:19.2556515Z #define __ATOMIC_ACQ_REL 4
2022-05-13T16:25:19.2558460Z #define __ATOMIC_RELEASE 3
2022-05-13T16:25:19.2559154Z #define __declspec(x) __attribute__((x))
2022-05-13T16:25:19.2559871Z --------------------------------
2022-05-13T16:25:19.2560891Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=sse2                                                                                                                                                       && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-sse2-non-omp'
2022-05-13T16:25:22.4260558Z checking build system type... x86_64-unknown-cygwin
2022-05-13T16:25:22.4262925Z checking host system type... x86_64-unknown-cygwin
2022-05-13T16:25:22.4453773Z checking whether to compile using MPI... no
2022-05-13T16:25:22.4470450Z checking for gcc... gcc
2022-05-13T16:25:23.3267147Z checking whether the C compiler works... yes
2022-05-13T16:25:23.3272806Z checking for C compiler default output file name... a.exe
2022-05-13T16:25:23.6990730Z checking for suffix of executables... .exe
2022-05-13T16:25:24.1308510Z checking whether we are cross compiling... no
2022-05-13T16:25:24.3975334Z checking for suffix of object files... o
2022-05-13T16:25:24.5875424Z checking whether we are using the GNU C compiler... yes
2022-05-13T16:25:24.7700000Z checking whether gcc accepts -g... yes
2022-05-13T16:25:25.0490504Z checking for gcc option to accept ISO C89... none needed
2022-05-13T16:25:25.3451472Z checking whether gcc understands -c and -o together... yes
2022-05-13T16:25:25.8032963Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T16:25:25.8034458Z checking whether gcc accepts -g... (cached) yes
2022-05-13T16:25:25.8036205Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T16:25:25.8037280Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T16:25:25.8049270Z checking additional paths...  -L/usr/local/lib
2022-05-13T16:25:26.6743120Z checking arg check macro for -m with gcc... yes
2022-05-13T16:25:26.9916718Z checking arg check macro for -Q with gcc... yes
2022-05-13T16:25:27.1909239Z checking if gcc supports -funroll-loops... yes
2022-05-13T16:25:27.3869367Z checking if gcc supports -Os... yes
2022-05-13T16:25:27.7698825Z checking if gcc supports -finline-functions... yes
2022-05-13T16:25:27.9535558Z checking if gcc supports -Og... yes
2022-05-13T16:25:28.1391691Z checking if gcc supports -Wall... yes
2022-05-13T16:25:28.3628237Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T16:25:28.5681352Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T16:25:28.7578003Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T16:25:29.0874290Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T16:25:29.2737215Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T16:25:29.5811781Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T16:25:29.7788295Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T16:25:30.0823343Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T16:25:30.2714159Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T16:25:30.5499620Z checking if gcc supports -Qunused-arguments... no
2022-05-13T16:25:30.7324339Z checking if gcc supports -std=gnu89... yes
2022-05-13T16:25:30.9189041Z checking if gcc supports -Wdate-time... yes
2022-05-13T16:25:31.3233746Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T16:25:31.7136578Z checking for 32/64 bit... 64-bit
2022-05-13T16:25:31.7347310Z checking additional paths (64 bit)... none
2022-05-13T16:25:31.7350861Z checking whether ln -s works... yes
2022-05-13T16:25:31.7816380Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T16:25:31.8506918Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T16:25:32.0075219Z checking for GNU make... make
2022-05-13T16:25:32.1828527Z checking whether make sets $(MAKE)... yes
2022-05-13T16:25:32.5613732Z checking how to run the C preprocessor... gcc -E
2022-05-13T16:25:32.9616742Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T16:25:33.2179206Z checking for sort... /usr/bin/sort
2022-05-13T16:25:33.2187411Z checking for find... /usr/bin/find
2022-05-13T16:25:33.2196315Z checking for perl... /usr/bin/perl
2022-05-13T16:25:33.2212420Z checking for ar... ar
2022-05-13T16:25:33.2225209Z checking for strip... strip
2022-05-13T16:25:33.2237729Z checking for strings... strings
2022-05-13T16:25:33.2250516Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T16:25:33.2591563Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T16:25:33.2594526Z checking if pkg-config will be used... no
2022-05-13T16:25:33.3278712Z checking for egrep... /usr/bin/grep -E
2022-05-13T16:25:34.4706160Z checking for ANSI C header files... yes
2022-05-13T16:25:34.7444433Z checking for sys/types.h... yes
2022-05-13T16:25:35.1482418Z checking for sys/stat.h... yes
2022-05-13T16:25:35.5548623Z checking for stdlib.h... yes
2022-05-13T16:25:36.3238362Z checking for string.h... yes
2022-05-13T16:25:36.8998974Z checking for memory.h... yes
2022-05-13T16:25:37.3467906Z checking for strings.h... yes
2022-05-13T16:25:37.7716719Z checking for inttypes.h... yes
2022-05-13T16:25:38.1557979Z checking for stdint.h... yes
2022-05-13T16:25:38.5406700Z checking for unistd.h... yes
2022-05-13T16:25:39.1629384Z checking size of short... 2
2022-05-13T16:25:39.6878891Z checking size of int... 4
2022-05-13T16:25:40.2015886Z checking size of long... 8
2022-05-13T16:25:40.8495084Z checking size of long long... 8
2022-05-13T16:25:41.4729651Z checking size of wchar_t... 2
2022-05-13T16:25:41.9895512Z checking size of int *... 8
2022-05-13T16:25:42.5306740Z checking size of void *... 8
2022-05-13T16:25:42.6275618Z configure: Trying to force SSE2 using default method (--enable-simd=sse2).
2022-05-13T16:25:43.0091639Z checking if gcc supports -msse2 w/ linking... yes
2022-05-13T16:25:43.4443111Z checking for extra ASFLAGS... None needed
2022-05-13T16:25:43.6984184Z checking for X32 ABI... no
2022-05-13T16:25:43.7353593Z checking special compiler flags... Intel x86
2022-05-13T16:25:43.7354880Z configure: Testing tool-chain's CPU support with given options
2022-05-13T16:25:44.1493977Z checking for MMX... yes
2022-05-13T16:25:44.6366029Z checking for SSE2... yes
2022-05-13T16:25:45.0552759Z checking for SSSE3... no
2022-05-13T16:25:45.0748986Z checking for arch.h alternative... x86-64.h
2022-05-13T16:25:45.0758921Z checking for byte ordering according to target triple... little
2022-05-13T16:25:45.0770854Z checking supplied paths for OpenSSL...  
2022-05-13T16:25:45.0775080Z checking additional paths for OpenSSL... none
2022-05-13T16:25:45.3240303Z checking openssl/opensslv.h usability... yes
2022-05-13T16:25:45.4915126Z checking openssl/opensslv.h presence... yes
2022-05-13T16:25:45.4936466Z checking for openssl/opensslv.h... yes
2022-05-13T16:25:45.8925258Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T16:25:46.2765707Z checking for MD5_Update in -lcrypto... yes
2022-05-13T16:25:46.2787396Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T16:25:46.7496130Z checking for sqrt in -lm... yes
2022-05-13T16:25:47.1560693Z checking for clock_gettime in -lrt... yes
2022-05-13T16:25:47.5856474Z checking for deflate in -lz... yes
2022-05-13T16:25:48.4331715Z checking for library containing crypt... -lcrypt
2022-05-13T16:25:48.7568358Z checking gmp.h usability... yes
2022-05-13T16:25:48.9175130Z checking gmp.h presence... yes
2022-05-13T16:25:48.9179050Z checking for gmp.h... yes
2022-05-13T16:25:49.3974384Z checking for __gmpz_init in -lgmp... yes
2022-05-13T16:25:49.7192011Z checking skey.h usability... no
2022-05-13T16:25:49.9277712Z checking skey.h presence... no
2022-05-13T16:25:49.9279719Z checking for skey.h... no
2022-05-13T16:25:49.9286493Z checking for S/Key... using our own code
2022-05-13T16:25:50.1522518Z checking bzlib.h usability... yes
2022-05-13T16:25:50.2874926Z checking bzlib.h presence... yes
2022-05-13T16:25:50.2877209Z checking for bzlib.h... yes
2022-05-13T16:25:50.6493919Z checking for main in -lbz2... yes
2022-05-13T16:25:51.0256814Z checking for main in -lkernel32... yes
2022-05-13T16:25:51.4514855Z checking for dlopen in -ldl... yes
2022-05-13T16:25:52.8119161Z checking intrin.h usability... yes
2022-05-13T16:25:53.2817797Z checking intrin.h presence... yes
2022-05-13T16:25:53.2820048Z checking for intrin.h... yes
2022-05-13T16:25:53.6526363Z checking openssl/cmac.h usability... yes
2022-05-13T16:25:53.8922085Z checking openssl/cmac.h presence... yes
2022-05-13T16:25:53.8923844Z checking for openssl/cmac.h... yes
2022-05-13T16:25:53.9196925Z configure: rexgen check not enabled
2022-05-13T16:25:54.2979286Z checking pcap.h usability... no
2022-05-13T16:25:54.5084719Z checking pcap.h presence... no
2022-05-13T16:25:54.5085924Z checking for pcap.h... no
2022-05-13T16:25:54.8635744Z checking pcap/pcap.h usability... no
2022-05-13T16:25:55.0791383Z checking pcap/pcap.h presence... no
2022-05-13T16:25:55.0796587Z checking for pcap/pcap.h... no
2022-05-13T16:25:55.1341751Z checking for pcap.h... (cached) no
2022-05-13T16:25:55.1870156Z checking for pcap/pcap.h... (cached) no
2022-05-13T16:25:55.4104632Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T16:25:55.6306569Z checking whether string.h and strings.h may both be included... yes
2022-05-13T16:25:56.1310480Z checking for SHA256... yes
2022-05-13T16:25:56.6749827Z checking for WHIRLPOOL... yes
2022-05-13T16:25:57.2522573Z checking for RIPEMD160... yes
2022-05-13T16:25:57.8443501Z checking for AES_encrypt... yes
2022-05-13T16:25:58.3994139Z checking for DSA_get0_pqg... yes
2022-05-13T16:25:58.7445049Z checking additional paths for OpenCL... none
2022-05-13T16:25:59.0285257Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T16:25:59.6412138Z checking for the pthreads library -lpthreads... no
2022-05-13T16:26:00.1458139Z checking whether pthreads work without any flags... yes
2022-05-13T16:26:00.5829194Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T16:26:00.5831196Z checking if more special flags are required for pthreads... no
2022-05-13T16:26:00.9215524Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T16:26:01.1895402Z checking whether we are using the Microsoft C compiler... no
2022-05-13T16:26:01.5504238Z checking CL/cl.h usability... yes
2022-05-13T16:26:01.7277448Z checking CL/cl.h presence... yes
2022-05-13T16:26:01.7279109Z checking for CL/cl.h... yes
2022-05-13T16:26:02.2024903Z checking OpenCL/cl.h usability... no
2022-05-13T16:26:02.4777038Z checking OpenCL/cl.h presence... no
2022-05-13T16:26:02.4778376Z checking for OpenCL/cl.h... no
2022-05-13T16:26:05.0807590Z checking windows.h usability... yes
2022-05-13T16:26:06.4297974Z checking windows.h presence... yes
2022-05-13T16:26:06.4300597Z checking for windows.h... yes
2022-05-13T16:26:06.9481572Z checking for OpenCL library... -lOpenCL
2022-05-13T16:26:07.2585145Z checking arpa/inet.h usability... yes
2022-05-13T16:26:07.4053390Z checking arpa/inet.h presence... yes
2022-05-13T16:26:07.4057212Z checking for arpa/inet.h... yes
2022-05-13T16:26:07.7812531Z checking crypt.h usability... yes
2022-05-13T16:26:07.9182831Z checking crypt.h presence... yes
2022-05-13T16:26:07.9184549Z checking for crypt.h... yes
2022-05-13T16:26:08.2579820Z checking dirent.h usability... yes
2022-05-13T16:26:08.3960665Z checking dirent.h presence... yes
2022-05-13T16:26:08.3962642Z checking for dirent.h... yes
2022-05-13T16:26:08.7543393Z checking limits.h usability... yes
2022-05-13T16:26:08.8627758Z checking limits.h presence... yes
2022-05-13T16:26:08.8629155Z checking for limits.h... yes
2022-05-13T16:26:09.2390584Z checking locale.h usability... yes
2022-05-13T16:26:09.3865886Z checking locale.h presence... yes
2022-05-13T16:26:09.3867675Z checking for locale.h... yes
2022-05-13T16:26:09.7589216Z checking malloc.h usability... yes
2022-05-13T16:26:09.8931130Z checking malloc.h presence... yes
2022-05-13T16:26:09.8934819Z checking for malloc.h... yes
2022-05-13T16:26:10.3980526Z checking net/ethernet.h usability... no
2022-05-13T16:26:10.6247059Z checking net/ethernet.h presence... no
2022-05-13T16:26:10.6248428Z checking for net/ethernet.h... no
2022-05-13T16:26:10.9136516Z checking netdb.h usability... yes
2022-05-13T16:26:11.0563926Z checking netdb.h presence... yes
2022-05-13T16:26:11.0565119Z checking for netdb.h... yes
2022-05-13T16:26:11.4735511Z checking netinet/in.h usability... yes
2022-05-13T16:26:11.6240178Z checking netinet/in.h presence... yes
2022-05-13T16:26:11.6241450Z checking for netinet/in.h... yes
2022-05-13T16:26:12.0246203Z checking netinet/in_systm.h usability... yes
2022-05-13T16:26:12.1640626Z checking netinet/in_systm.h presence... yes
2022-05-13T16:26:12.1642644Z checking for netinet/in_systm.h... yes
2022-05-13T16:26:12.3255669Z checking for string.h... (cached) yes
2022-05-13T16:26:12.4647857Z checking for strings.h... (cached) yes
2022-05-13T16:26:12.9566205Z checking sys/ethernet.h usability... no
2022-05-13T16:26:13.1724007Z checking sys/ethernet.h presence... no
2022-05-13T16:26:13.1726028Z checking for sys/ethernet.h... no
2022-05-13T16:26:13.4867872Z checking sys/file.h usability... yes
2022-05-13T16:26:13.6424782Z checking sys/file.h presence... yes
2022-05-13T16:26:13.6426144Z checking for sys/file.h... yes
2022-05-13T16:26:14.0346831Z checking sys/param.h usability... yes
2022-05-13T16:26:14.1832549Z checking sys/param.h presence... yes
2022-05-13T16:26:14.1844721Z checking for sys/param.h... yes
2022-05-13T16:26:14.6068077Z checking sys/socket.h usability... yes
2022-05-13T16:26:14.7558332Z checking sys/socket.h presence... yes
2022-05-13T16:26:14.7561425Z checking for sys/socket.h... yes
2022-05-13T16:26:15.1216528Z checking sys/time.h usability... yes
2022-05-13T16:26:15.2794091Z checking sys/time.h presence... yes
2022-05-13T16:26:15.2795369Z checking for sys/time.h... yes
2022-05-13T16:26:15.6540734Z checking sys/times.h usability... yes
2022-05-13T16:26:15.7951126Z checking sys/times.h presence... yes
2022-05-13T16:26:15.9537972Z checking for sys/times.h... yes
2022-05-13T16:26:15.9539150Z checking for sys/types.h... (cached) yes
2022-05-13T16:26:16.3433319Z checking termios.h usability... yes
2022-05-13T16:26:16.4925866Z checking termios.h presence... yes
2022-05-13T16:26:16.4927675Z checking for termios.h... yes
2022-05-13T16:26:16.6554184Z checking for unistd.h... (cached) yes
2022-05-13T16:26:17.1744001Z checking unixlib/local.h usability... no
2022-05-13T16:26:17.4481109Z checking unixlib/local.h presence... no
2022-05-13T16:26:17.4482998Z checking for unixlib/local.h... no
2022-05-13T16:26:17.5099716Z checking for windows.h... (cached) yes
2022-05-13T16:26:17.8075783Z checking for net/if.h... yes
2022-05-13T16:26:18.1935965Z checking for net/if_arp.h... no
2022-05-13T16:26:18.5318429Z checking for netinet/if_ether.h... no
2022-05-13T16:26:18.7531688Z checking for netinet/ip.h... yes
2022-05-13T16:26:19.2676813Z checking for stdbool.h that conforms to C99... yes
2022-05-13T16:26:19.9615206Z checking for _Bool... yes
2022-05-13T16:26:20.1930856Z checking for inline... inline
2022-05-13T16:26:20.8790114Z checking for int32_t... yes
2022-05-13T16:26:21.5153606Z checking for int64_t... yes
2022-05-13T16:26:22.1282652Z checking for off_t... yes
2022-05-13T16:26:22.7069260Z checking for size_t... yes
2022-05-13T16:26:23.3340683Z checking for ssize_t... yes
2022-05-13T16:26:23.6465019Z checking for uint16_t... yes
2022-05-13T16:26:23.9052647Z checking for uint32_t... yes
2022-05-13T16:26:24.1849758Z checking for uint64_t... yes
2022-05-13T16:26:24.4545379Z checking for uint8_t... yes
2022-05-13T16:26:25.1489445Z checking for ptrdiff_t... yes
2022-05-13T16:26:25.5153136Z checking for int128... no
2022-05-13T16:26:26.1588803Z checking for __int128... yes
2022-05-13T16:26:26.8460444Z checking for __int128_t... yes
2022-05-13T16:26:27.3277077Z checking for error_at_line... yes
2022-05-13T16:26:27.9659001Z checking for pid_t... yes
2022-05-13T16:26:28.3024946Z checking vfork.h usability... no
2022-05-13T16:26:28.5514767Z checking vfork.h presence... no
2022-05-13T16:26:28.5516734Z checking for vfork.h... no
2022-05-13T16:26:29.1441397Z checking for fork... yes
2022-05-13T16:26:29.7436177Z checking for vfork... yes
2022-05-13T16:26:30.3911439Z checking for working fork... yes
2022-05-13T16:26:30.3912933Z checking for working vfork... (cached) yes
2022-05-13T16:26:30.9905158Z checking for fseek64... no
2022-05-13T16:26:31.5839630Z checking for fseeko... yes
2022-05-13T16:26:32.3033853Z checking for fseeko64... no
2022-05-13T16:26:32.8849954Z checking for _fseeki64... no
2022-05-13T16:26:33.5338799Z checking for lseek64... no
2022-05-13T16:26:34.0557221Z checking for lseek... yes
2022-05-13T16:26:34.7739742Z checking for ftell64... no
2022-05-13T16:26:35.3080928Z checking for ftello... yes
2022-05-13T16:26:36.0658725Z checking for ftello64... no
2022-05-13T16:26:36.7249211Z checking for _ftelli64... no
2022-05-13T16:26:37.3425646Z checking for fopen64... no
2022-05-13T16:26:37.9743758Z checking for _fopen64... no
2022-05-13T16:26:38.4462032Z checking for memmem... yes
2022-05-13T16:26:38.9943021Z checking for mmap... yes
2022-05-13T16:26:39.5715140Z checking for sleep... yes
2022-05-13T16:26:40.1432157Z checking for setenv... yes
2022-05-13T16:26:40.7347962Z checking for putenv... yes
2022-05-13T16:26:41.4061314Z checking for strcasecmp... yes
2022-05-13T16:26:42.0678069Z checking for strncasecmp... yes
2022-05-13T16:26:42.7233202Z checking for stricmp... no
2022-05-13T16:26:43.3240910Z checking for strcmpi... no
2022-05-13T16:26:43.9513046Z checking for _stricmp... no
2022-05-13T16:26:44.5543569Z checking for _strcmpi... no
2022-05-13T16:26:45.1702655Z checking for strnicmp... no
2022-05-13T16:26:45.7385815Z checking for strncmpi... no
2022-05-13T16:26:46.3115045Z checking for _strnicmp... no
2022-05-13T16:26:46.8763218Z checking for _strncmpi... no
2022-05-13T16:26:47.4556125Z checking for strnlen... yes
2022-05-13T16:26:48.0094311Z checking for strlwr... yes
2022-05-13T16:26:48.5589312Z checking for strupr... yes
2022-05-13T16:26:49.2226118Z checking for strrev... no
2022-05-13T16:26:49.7208070Z checking for atoll... yes
2022-05-13T16:26:51.3559933Z checking for _atoi64... no
2022-05-13T16:26:51.3561905Z checking for snprintf... yes
2022-05-13T16:26:51.7463589Z checking for sprintf_s... no
2022-05-13T16:26:52.3117180Z checking for strcasestr... yes
2022-05-13T16:26:52.8647035Z checking for clGetKernelArgInfo... yes
2022-05-13T16:26:53.4464814Z checking for posix_memalign... yes
2022-05-13T16:26:53.9199386Z checking for yasm that supports "-f win64"... 
2022-05-13T16:26:53.9215625Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T16:26:54.3890491Z checking for _get_osfhandle... yes
2022-05-13T16:26:57.5771279Z checking for GetFileSizeEx... yes
2022-05-13T16:26:57.6068411Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T16:26:58.1669140Z checking size of size_t... 8
2022-05-13T16:26:58.8105486Z checking size of off_t... 8
2022-05-13T16:26:58.8751133Z configure: Fuzz check disabled
2022-05-13T16:26:58.8753064Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T16:26:58.8884014Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T16:26:59.0256588Z configure: creating Makefile dependencies
2022-05-13T16:27:02.0872173Z configure: creating ./john_build_rule.h
2022-05-13T16:27:02.4320572Z configure: creating ./config.status
2022-05-13T16:27:04.6680539Z config.status: creating Makefile
2022-05-13T16:27:04.9478667Z config.status: creating aes/Makefile
2022-05-13T16:27:05.3198912Z config.status: creating aes/aesni/Makefile
2022-05-13T16:27:05.7071910Z config.status: creating aes/openssl/Makefile
2022-05-13T16:27:06.1191075Z config.status: creating secp256k1/Makefile
2022-05-13T16:27:06.5473504Z config.status: creating ed25519-donna/Makefile
2022-05-13T16:27:07.0105702Z config.status: creating poly1305-donna/Makefile
2022-05-13T16:27:07.4581300Z config.status: creating autoconfig.h
2022-05-13T16:27:07.7210888Z config.status: linking x86-64.h to arch.h
2022-05-13T16:27:07.8117991Z config.status: executing default commands
2022-05-13T16:27:07.8397509Z configure: creating ./fmt_externs.h
2022-05-13T16:27:17.7108291Z configure: creating ./fmt_registers.h
2022-05-13T16:27:30.5163814Z 
2022-05-13T16:27:30.5166720Z Configured for building John the Ripper jumbo:
2022-05-13T16:27:30.5167418Z 
2022-05-13T16:27:30.5168178Z Target CPU ......................................... x86_64 SSE2, 64-bit LE
2022-05-13T16:27:30.5169305Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T16:27:30.5170255Z Target OS .......................................... cygwin
2022-05-13T16:27:30.5171250Z Cross compiling .................................... no
2022-05-13T16:27:30.5172274Z Legacy arch header ................................. x86-64.h
2022-05-13T16:27:30.5172782Z 
2022-05-13T16:27:30.5173487Z Optional libraries/features found:
2022-05-13T16:27:30.5174453Z Memory map (share/page large files) ................ yes
2022-05-13T16:27:30.5176708Z Fork support ....................................... yes
2022-05-13T16:27:30.5179137Z OpenMP support ..................................... no
2022-05-13T16:27:30.5181792Z OpenCL support ..................................... yes
2022-05-13T16:27:30.5184637Z Generic crypt(3) format ............................ yes
2022-05-13T16:27:30.5186215Z OpenSSL (many additional formats) .................. yes
2022-05-13T16:27:30.5188575Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T16:27:30.5189690Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T16:27:30.5190602Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T16:27:30.5191655Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T16:27:30.5193340Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T16:27:30.5194357Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T16:27:30.5195246Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T16:27:30.5196234Z OpenMPI support (default disabled) ................. no
2022-05-13T16:27:30.5197186Z Experimental code (default disabled) ............... no
2022-05-13T16:27:30.5198387Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T16:27:30.5199150Z 
2022-05-13T16:27:30.5200091Z Install missing libraries to get any needed features that were omitted.
2022-05-13T16:27:30.5200698Z 
2022-05-13T16:27:30.5201654Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T16:27:56.1636623Z In file included from subsets.c:25:
2022-05-13T16:27:56.1646931Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T16:27:56.1648303Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T16:27:56.1649313Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T16:27:56.1650060Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T16:28:04.7529664Z ar: creating aes.a
2022-05-13T16:28:13.9448538Z ar: creating ed25519-donna.a
2022-05-13T16:28:14.6313353Z ar: creating poly1305-donna.a
2022-05-13T16:28:16.1984558Z ar: creating secp256k1.a
2022-05-13T16:29:43.3428043Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T16:29:43.3434525Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:43.3436853Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.3438231Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.3439293Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.3440089Z       |                         ^~~~
2022-05-13T16:29:43.3440996Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:43.3441987Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.3442880Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.3443974Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.3445394Z       |                         ^~~~
2022-05-13T16:29:43.3446233Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:29:43.3447240Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:43.3448075Z       | ^~~~~~~~~~~~
2022-05-13T16:29:43.3742864Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T16:29:43.3744956Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:43.3746136Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:43.3746958Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.3748025Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.3748823Z       |                         ^~~~
2022-05-13T16:29:43.3749896Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:43.3750928Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:43.3751898Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.3753772Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.3754629Z       |                         ^~~~
2022-05-13T16:29:43.3755502Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:29:43.3756477Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:43.3757309Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:43.4052737Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T16:29:43.4055524Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:29:43.4056834Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:43.4058192Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.4059167Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.4059963Z       |                         ^~~~
2022-05-13T16:29:43.4060917Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:43.4061890Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:43.4063237Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.4064338Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.4065164Z       |                         ^~~~
2022-05-13T16:29:43.4066023Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:29:43.4067065Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:29:43.4067953Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:43.5276749Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T16:29:43.5278752Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:43.5280082Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.5282874Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.5285011Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:29:43.5286392Z       |                 ^~~~
2022-05-13T16:29:43.5288161Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:43.5290083Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.5291666Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.5294906Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:29:43.5296225Z       |                 ^~~~
2022-05-13T16:29:43.5297127Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:29:43.5298090Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:43.5298934Z       | ^~~~~~~~~~~~
2022-05-13T16:29:43.5948254Z In function ‘ripemd_addbits_and_close’,
2022-05-13T16:29:43.5949828Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T16:29:43.5950866Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T16:29:43.5952161Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:43.5953485Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.5954520Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.5955406Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.5956232Z       |                 ^~~~
2022-05-13T16:29:43.5957112Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T16:29:43.5958274Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:43.5959238Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.5960108Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.5960936Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.5961761Z       |                 ^~~~
2022-05-13T16:29:43.5962566Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:29:43.5963679Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:43.5964538Z       | ^~~~~~~~~~~~
2022-05-13T16:29:43.5965440Z In function ‘ripemd_addbits_and_close’,
2022-05-13T16:29:43.5966350Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T16:29:43.5967448Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T16:29:43.5968676Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:43.5969737Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.5970529Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.5971408Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.5972979Z       |         ^~~~
2022-05-13T16:29:43.5975532Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T16:29:43.5978145Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:43.5979023Z   276 | #define RFUN   ripemd_round
2022-05-13T16:29:43.5979776Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:43.5980671Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:43.5981270Z       |         ^~~~
2022-05-13T16:29:43.5981964Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:29:43.5982820Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:43.5983462Z       | ^~~~~~~~~~~~
2022-05-13T16:29:44.0935583Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T16:29:44.0937746Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:44.0939093Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:44.0940072Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.0940969Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:29:44.0941608Z       |                 ^~~~
2022-05-13T16:29:44.0942585Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:44.0943779Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:44.0944804Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.0945765Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:29:44.0946402Z       |                 ^~~~
2022-05-13T16:29:44.0947107Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:29:44.0948123Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:44.0949659Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:44.1721748Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T16:29:44.1723584Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T16:29:44.1735945Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T16:29:44.1737670Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:44.1738852Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:44.1739808Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.1740684Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.1741413Z       |                 ^~~~
2022-05-13T16:29:44.1742239Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T16:29:44.1743400Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:44.1744478Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:44.1745360Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.1746264Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.1747004Z       |                 ^~~~
2022-05-13T16:29:44.1747903Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:29:44.1748971Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:44.1749853Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:44.1750614Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T16:29:44.1751649Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T16:29:44.1752732Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T16:29:44.1754157Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:29:44.1755198Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:44.1756121Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.1757030Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.1757755Z       |         ^~~~
2022-05-13T16:29:44.1758530Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T16:29:44.1759593Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:44.1760614Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:29:44.1761967Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.1762900Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.1763864Z       |         ^~~~
2022-05-13T16:29:44.1764758Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:29:44.1765730Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:29:44.1766607Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:44.6706388Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T16:29:44.6708256Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:29:44.6709569Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:44.6710544Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.6711518Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:29:44.6712915Z       |                 ^~~~
2022-05-13T16:29:44.6714055Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:44.6715162Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:44.6716090Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.6717038Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:29:44.6717756Z       |                 ^~~~
2022-05-13T16:29:44.6718614Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:29:44.6719630Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:29:44.6720481Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:44.7655086Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T16:29:44.7657213Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T16:29:44.7659152Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T16:29:44.7661128Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:29:44.7662211Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:44.7663312Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.7665501Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.7666340Z       |                 ^~~~
2022-05-13T16:29:44.7667113Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T16:29:44.7668160Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:44.7670003Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:44.7671513Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.7672390Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.7673302Z       |                 ^~~~
2022-05-13T16:29:44.7674167Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:29:44.7675168Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:29:44.7675989Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:29:44.7676873Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T16:29:44.7677960Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T16:29:44.7680389Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T16:29:44.7681884Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:29:44.7683056Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:44.7684225Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.7685136Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.7685918Z       |         ^~~~
2022-05-13T16:29:44.7686634Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T16:29:44.7687725Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:29:44.7689896Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:29:44.7690916Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:29:44.7691855Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:29:44.7692927Z       |         ^~~~
2022-05-13T16:29:44.7693912Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:29:44.7694943Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:29:44.7695801Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:30:46.2618533Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:30:46.2620773Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2622115Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:30:46.2624188Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2625218Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T16:30:46.2626167Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2627163Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T16:30:46.2628068Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2628909Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:30:46.2629785Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2631180Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:30:46.2633160Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2635438Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:30:46.2637066Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2638416Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:30:46.2639435Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:30:46.2640385Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:30:46.2641448Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:30:46.2642289Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2646738Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2648341Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:30:46.2649378Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2650205Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T16:30:46.2650917Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2651734Z   366 |                                         keys,
2022-05-13T16:30:46.2652860Z       |                                         ~~~~~
2022-05-13T16:30:46.2653720Z   367 |                                         lens, cur_salt->salt,
2022-05-13T16:30:46.2654494Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2655278Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T16:30:46.2656039Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2656890Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:30:46.2657917Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2658979Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:30:46.2660805Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2662022Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:30:46.2663322Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:30:46.2664515Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:30:46.2665931Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:30:46.2667943Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2669389Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2670400Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:30:46.2671279Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2672083Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T16:30:46.2672981Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2673764Z   374 |                                         keys,
2022-05-13T16:30:46.2674387Z       |                                         ~~~~~
2022-05-13T16:30:46.2675100Z   375 |                                         lens, cur_salt->salt,
2022-05-13T16:30:46.2675835Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2676554Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T16:30:46.2677521Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:30:46.2678443Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:30:46.2679490Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2680515Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:30:46.2681545Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:30:46.2682539Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:30:46.2683660Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:30:46.2684513Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:30:46.2685425Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:30:46.2686267Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1730524Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:31:58.1732954Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:31:58.1735616Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:31:58.1737301Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1739708Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:31:58.1741492Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1744322Z   225 |                                         lens, cur_salt->salt,
2022-05-13T16:31:58.1746653Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1748745Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:31:58.1749831Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1751329Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:31:58.1753656Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:31:58.1755282Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:31:58.1756917Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:31:58.1759392Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:31:58.1760831Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:31:58.1761972Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:31:58.1763939Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:31:58.1765168Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1766446Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:31:58.1767807Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:31:58.1769241Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1770307Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:31:58.1771377Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1775269Z   247 |                                         lens, cur_salt->salt,
2022-05-13T16:31:58.1776312Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1777275Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:31:58.1778756Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1780063Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:31:58.1781575Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:31:58.1783283Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:31:58.1784972Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:31:58.1786444Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:31:58.1787475Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:31:58.1788847Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:31:58.1790081Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:31:58.1791179Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1792382Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:31:58.1793693Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:31:58.1794860Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1795891Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:31:58.1796863Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1797670Z   270 |                                         lens, cur_salt->salt,
2022-05-13T16:31:58.1798885Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1800075Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:31:58.1801060Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:31:58.1802961Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:31:58.1805191Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:31:58.1808300Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:31:58.1810949Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:31:58.1813995Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:31:58.1816383Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:31:58.1819112Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:31:58.1821187Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:31:58.1823679Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1680018Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:32:23.1682102Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:23.1683603Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T16:32:23.1684925Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1686382Z   117 |                                 cur_salt->iterations,
2022-05-13T16:32:23.1687335Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1688779Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T16:32:23.1690336Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1691767Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T16:32:23.1693015Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1694212Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:32:23.1695633Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:23.1697174Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:32:23.1699045Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:23.1700467Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:32:23.1701700Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T16:32:23.1702762Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:32:23.1704058Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:32:23.1705316Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1706608Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:23.1707914Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T16:32:23.1709704Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1710760Z   122 |                                 cur_salt->iterations,
2022-05-13T16:32:23.1711633Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1712547Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T16:32:23.1713952Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1715038Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T16:32:23.1716074Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:23.1717219Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:32:23.1719605Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:23.1721098Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:32:23.1722372Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:23.1723443Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:32:23.1724286Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T16:32:23.1725365Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:32:23.1726620Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:32:23.1727728Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:32.8421075Z stribog_fmt_plug.c:472:2: warning: #warning Stribog-256 and Stribog-512 formats require SSE 4.1, formats disabled [-Wcpp]
2022-05-13T16:32:32.8423040Z   472 | #warning Stribog-256 and Stribog-512 formats require SSE 4.1, formats disabled
2022-05-13T16:32:32.8424191Z       |  ^~~~~~~
2022-05-13T16:32:45.4482935Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:32:45.4485367Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:45.4487304Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T16:32:45.4489125Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4490929Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:32:45.4492422Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4493828Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T16:32:45.4494787Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4496206Z   138 |                                                    salt_len, mackey,
2022-05-13T16:32:45.4497545Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4499495Z   139 |                                                    BINARY_SIZE);
2022-05-13T16:32:45.4500420Z       |                                                    ~~~~~~~~~~~~
2022-05-13T16:32:45.4501500Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:32:45.4502966Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:45.4504518Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:32:45.4505928Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:45.4507307Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:32:45.4508402Z In file included from zed_fmt_plug.c:30:
2022-05-13T16:32:45.4509588Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:32:45.4510811Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:32:45.4512267Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4513367Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:45.4514464Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T16:32:45.4515348Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4516162Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:32:45.4516999Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4517780Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T16:32:45.4518528Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4519266Z   153 |                                                    salt_len, mackey,
2022-05-13T16:32:45.4519875Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T16:32:45.4520525Z   154 |                                                    BINARY_SIZE);
2022-05-13T16:32:45.4521173Z       |                                                    ~~~~~~~~~~~~
2022-05-13T16:32:45.4522051Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:32:45.4523904Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:45.4525985Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:32:45.4527293Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:32:45.4529098Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:32:45.4530021Z In file included from zed_fmt_plug.c:30:
2022-05-13T16:32:45.4531837Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:32:45.4533028Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:32:45.4533912Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:35:55.5281224Z 
2022-05-13T16:35:56.3750065Z Make process completed.
2022-05-13T16:35:57.1201125Z 
2022-05-13T16:35:57.1449258Z Make process completed.
2022-05-13T16:35:57.1691480Z Stripping executables.
2022-05-13T16:35:57.8986131Z Executing './configure --disable-native-tests --enable-simd=sse2   CPPFLAGS='-DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-sse2-non-omp\\\"\" '                                                                  && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-sse2'
2022-05-13T16:36:00.9091567Z checking build system type... x86_64-unknown-cygwin
2022-05-13T16:36:00.9102292Z checking host system type... x86_64-unknown-cygwin
2022-05-13T16:36:00.9250135Z checking whether to compile using MPI... no
2022-05-13T16:36:00.9270674Z checking for gcc... gcc
2022-05-13T16:36:01.8114389Z checking whether the C compiler works... yes
2022-05-13T16:36:01.8116206Z checking for C compiler default output file name... a.exe
2022-05-13T16:36:02.2044479Z checking for suffix of executables... .exe
2022-05-13T16:36:02.6469321Z checking whether we are cross compiling... no
2022-05-13T16:36:02.8873436Z checking for suffix of object files... o
2022-05-13T16:36:03.0893279Z checking whether we are using the GNU C compiler... yes
2022-05-13T16:36:03.2922745Z checking whether gcc accepts -g... yes
2022-05-13T16:36:03.5852037Z checking for gcc option to accept ISO C89... none needed
2022-05-13T16:36:03.9014736Z checking whether gcc understands -c and -o together... yes
2022-05-13T16:36:04.3664021Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T16:36:04.3666795Z checking whether gcc accepts -g... (cached) yes
2022-05-13T16:36:04.3668071Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T16:36:04.3670999Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T16:36:04.3686240Z checking additional paths...  -L/usr/local/lib
2022-05-13T16:36:05.2513454Z checking arg check macro for -m with gcc... yes
2022-05-13T16:36:05.5471872Z checking arg check macro for -Q with gcc... yes
2022-05-13T16:36:05.7391627Z checking if gcc supports -funroll-loops... yes
2022-05-13T16:36:06.1642804Z checking if gcc supports -Os... yes
2022-05-13T16:36:06.5892969Z checking if gcc supports -finline-functions... yes
2022-05-13T16:36:06.7933102Z checking if gcc supports -Og... yes
2022-05-13T16:36:06.9773714Z checking if gcc supports -Wall... yes
2022-05-13T16:36:07.1816017Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T16:36:07.3758340Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T16:36:07.5927408Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T16:36:07.9339818Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T16:36:08.1349280Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T16:36:08.4470209Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T16:36:08.6261233Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T16:36:08.9041018Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T16:36:09.0994092Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T16:36:09.3566059Z checking if gcc supports -Qunused-arguments... no
2022-05-13T16:36:09.5434430Z checking if gcc supports -std=gnu89... yes
2022-05-13T16:36:09.7474922Z checking if gcc supports -Wdate-time... yes
2022-05-13T16:36:10.1569182Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T16:36:10.5720722Z checking for 32/64 bit... 64-bit
2022-05-13T16:36:10.6041921Z checking additional paths (64 bit)... none
2022-05-13T16:36:10.6043254Z checking whether ln -s works... yes
2022-05-13T16:36:10.6557072Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T16:36:10.7446585Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T16:36:10.8459015Z checking for GNU make... make
2022-05-13T16:36:11.0324458Z checking whether make sets $(MAKE)... yes
2022-05-13T16:36:11.4007862Z checking how to run the C preprocessor... gcc -E
2022-05-13T16:36:11.7799922Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T16:36:12.0479437Z checking for sort... /usr/bin/sort
2022-05-13T16:36:12.0491616Z checking for find... /usr/bin/find
2022-05-13T16:36:12.0504538Z checking for perl... /usr/bin/perl
2022-05-13T16:36:12.0519301Z checking for ar... ar
2022-05-13T16:36:12.0532393Z checking for strip... strip
2022-05-13T16:36:12.0546575Z checking for strings... strings
2022-05-13T16:36:12.0564034Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T16:36:12.0806061Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T16:36:12.0810725Z checking if pkg-config will be used... no
2022-05-13T16:36:12.1389815Z checking for egrep... /usr/bin/grep -E
2022-05-13T16:36:13.1154656Z checking for ANSI C header files... yes
2022-05-13T16:36:13.4100251Z checking for sys/types.h... yes
2022-05-13T16:36:13.8120110Z checking for sys/stat.h... yes
2022-05-13T16:36:14.2179248Z checking for stdlib.h... yes
2022-05-13T16:36:14.6370050Z checking for string.h... yes
2022-05-13T16:36:15.0581691Z checking for memory.h... yes
2022-05-13T16:36:15.4484302Z checking for strings.h... yes
2022-05-13T16:36:15.8633390Z checking for inttypes.h... yes
2022-05-13T16:36:16.2559496Z checking for stdint.h... yes
2022-05-13T16:36:16.6957573Z checking for unistd.h... yes
2022-05-13T16:36:17.3632121Z checking size of short... 2
2022-05-13T16:36:17.9528225Z checking size of int... 4
2022-05-13T16:36:18.5384946Z checking size of long... 8
2022-05-13T16:36:19.0815263Z checking size of long long... 8
2022-05-13T16:36:19.6539415Z checking size of wchar_t... 2
2022-05-13T16:36:20.2541231Z checking size of int *... 8
2022-05-13T16:36:20.8500092Z checking size of void *... 8
2022-05-13T16:36:20.9205229Z configure: Trying to force SSE2 using default method (--enable-simd=sse2).
2022-05-13T16:36:21.2985052Z checking if gcc supports -msse2 w/ linking... yes
2022-05-13T16:36:21.7904909Z checking for extra ASFLAGS... None needed
2022-05-13T16:36:22.0653748Z checking for X32 ABI... no
2022-05-13T16:36:22.0946825Z checking special compiler flags... Intel x86
2022-05-13T16:36:22.0950071Z configure: Testing tool-chain's CPU support with given options
2022-05-13T16:36:22.5107577Z checking for MMX... yes
2022-05-13T16:36:23.0608049Z checking for SSE2... yes
2022-05-13T16:36:23.5181676Z checking for SSSE3... no
2022-05-13T16:36:23.5418303Z checking for arch.h alternative... x86-64.h
2022-05-13T16:36:23.5428992Z checking for byte ordering according to target triple... little
2022-05-13T16:36:23.5454547Z checking supplied paths for OpenSSL...  
2022-05-13T16:36:23.5460518Z checking additional paths for OpenSSL... none
2022-05-13T16:36:23.7938256Z checking openssl/opensslv.h usability... yes
2022-05-13T16:36:23.9195013Z checking openssl/opensslv.h presence... yes
2022-05-13T16:36:23.9199939Z checking for openssl/opensslv.h... yes
2022-05-13T16:36:24.3367981Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T16:36:24.7824786Z checking for MD5_Update in -lcrypto... yes
2022-05-13T16:36:24.7845190Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T16:36:25.2827408Z checking for sqrt in -lm... yes
2022-05-13T16:36:25.7267074Z checking for clock_gettime in -lrt... yes
2022-05-13T16:36:26.1886768Z checking for deflate in -lz... yes
2022-05-13T16:36:27.1686139Z checking for library containing crypt... -lcrypt
2022-05-13T16:36:27.5230995Z checking gmp.h usability... yes
2022-05-13T16:36:27.6954683Z checking gmp.h presence... yes
2022-05-13T16:36:27.6959114Z checking for gmp.h... yes
2022-05-13T16:36:28.2455062Z checking for __gmpz_init in -lgmp... yes
2022-05-13T16:36:28.6086823Z checking skey.h usability... no
2022-05-13T16:36:28.8749920Z checking skey.h presence... no
2022-05-13T16:36:28.8751132Z checking for skey.h... no
2022-05-13T16:36:28.8757031Z checking for S/Key... using our own code
2022-05-13T16:36:29.1298155Z checking bzlib.h usability... yes
2022-05-13T16:36:29.2956425Z checking bzlib.h presence... yes
2022-05-13T16:36:29.2958197Z checking for bzlib.h... yes
2022-05-13T16:36:29.6724332Z checking for main in -lbz2... yes
2022-05-13T16:36:30.1172875Z checking for main in -lkernel32... yes
2022-05-13T16:36:30.6047427Z checking for dlopen in -ldl... yes
2022-05-13T16:36:32.1674271Z checking intrin.h usability... yes
2022-05-13T16:36:32.6305072Z checking intrin.h presence... yes
2022-05-13T16:36:32.6307449Z checking for intrin.h... yes
2022-05-13T16:36:33.0364117Z checking openssl/cmac.h usability... yes
2022-05-13T16:36:33.2549122Z checking openssl/cmac.h presence... yes
2022-05-13T16:36:33.2551225Z checking for openssl/cmac.h... yes
2022-05-13T16:36:33.2851757Z configure: rexgen check not enabled
2022-05-13T16:36:33.6961438Z checking pcap.h usability... no
2022-05-13T16:36:33.9096941Z checking pcap.h presence... no
2022-05-13T16:36:33.9100494Z checking for pcap.h... no
2022-05-13T16:36:34.3096011Z checking pcap/pcap.h usability... no
2022-05-13T16:36:34.5440679Z checking pcap/pcap.h presence... no
2022-05-13T16:36:34.5442697Z checking for pcap/pcap.h... no
2022-05-13T16:36:34.6033447Z checking for pcap.h... (cached) no
2022-05-13T16:36:34.6719639Z checking for pcap/pcap.h... (cached) no
2022-05-13T16:36:34.9153396Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T16:36:35.1438549Z checking whether string.h and strings.h may both be included... yes
2022-05-13T16:36:35.6832769Z checking for SHA256... yes
2022-05-13T16:36:36.2833319Z checking for WHIRLPOOL... yes
2022-05-13T16:36:36.8661496Z checking for RIPEMD160... yes
2022-05-13T16:36:37.4649397Z checking for AES_encrypt... yes
2022-05-13T16:36:38.0915697Z checking for DSA_get0_pqg... yes
2022-05-13T16:36:39.1230640Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T16:36:39.1236668Z checking additional paths for OpenCL... none
2022-05-13T16:36:39.3927340Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T16:36:40.0271569Z checking for the pthreads library -lpthreads... no
2022-05-13T16:36:40.4768318Z checking whether pthreads work without any flags... yes
2022-05-13T16:36:40.8872281Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T16:36:40.8873814Z checking if more special flags are required for pthreads... no
2022-05-13T16:36:41.1940809Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T16:36:41.4427787Z checking whether we are using the Microsoft C compiler... no
2022-05-13T16:36:41.7985626Z checking CL/cl.h usability... yes
2022-05-13T16:36:41.9851712Z checking CL/cl.h presence... yes
2022-05-13T16:36:41.9868727Z checking for CL/cl.h... yes
2022-05-13T16:36:42.5028174Z checking OpenCL/cl.h usability... no
2022-05-13T16:36:42.7202677Z checking OpenCL/cl.h presence... no
2022-05-13T16:36:42.7205770Z checking for OpenCL/cl.h... no
2022-05-13T16:36:45.3404276Z checking windows.h usability... yes
2022-05-13T16:36:46.7070184Z checking windows.h presence... yes
2022-05-13T16:36:46.7072845Z checking for windows.h... yes
2022-05-13T16:36:47.2028332Z checking for OpenCL library... -lOpenCL
2022-05-13T16:36:47.5445497Z checking arpa/inet.h usability... yes
2022-05-13T16:36:47.7007810Z checking arpa/inet.h presence... yes
2022-05-13T16:36:47.7012658Z checking for arpa/inet.h... yes
2022-05-13T16:36:48.0667130Z checking crypt.h usability... yes
2022-05-13T16:36:48.1893189Z checking crypt.h presence... yes
2022-05-13T16:36:48.1895896Z checking for crypt.h... yes
2022-05-13T16:36:48.5868969Z checking dirent.h usability... yes
2022-05-13T16:36:48.7186524Z checking dirent.h presence... yes
2022-05-13T16:36:48.7189322Z checking for dirent.h... yes
2022-05-13T16:36:49.0992409Z checking limits.h usability... yes
2022-05-13T16:36:49.2254987Z checking limits.h presence... yes
2022-05-13T16:36:49.2259485Z checking for limits.h... yes
2022-05-13T16:36:49.6501206Z checking locale.h usability... yes
2022-05-13T16:36:49.7869598Z checking locale.h presence... yes
2022-05-13T16:36:49.7870982Z checking for locale.h... yes
2022-05-13T16:36:50.2067318Z checking malloc.h usability... yes
2022-05-13T16:36:50.3525000Z checking malloc.h presence... yes
2022-05-13T16:36:50.3527523Z checking for malloc.h... yes
2022-05-13T16:36:50.7851316Z checking net/ethernet.h usability... no
2022-05-13T16:36:51.0247589Z checking net/ethernet.h presence... no
2022-05-13T16:36:51.0249929Z checking for net/ethernet.h... no
2022-05-13T16:36:51.3056721Z checking netdb.h usability... yes
2022-05-13T16:36:51.4634342Z checking netdb.h presence... yes
2022-05-13T16:36:51.4636370Z checking for netdb.h... yes
2022-05-13T16:36:51.8450421Z checking netinet/in.h usability... yes
2022-05-13T16:36:52.0063592Z checking netinet/in.h presence... yes
2022-05-13T16:36:52.0077999Z checking for netinet/in.h... yes
2022-05-13T16:36:52.4171531Z checking netinet/in_systm.h usability... yes
2022-05-13T16:36:52.5451645Z checking netinet/in_systm.h presence... yes
2022-05-13T16:36:52.5453320Z checking for netinet/in_systm.h... yes
2022-05-13T16:36:52.6950605Z checking for string.h... (cached) yes
2022-05-13T16:36:52.8623427Z checking for strings.h... (cached) yes
2022-05-13T16:36:53.3833098Z checking sys/ethernet.h usability... no
2022-05-13T16:36:53.6255977Z checking sys/ethernet.h presence... no
2022-05-13T16:36:53.6258308Z checking for sys/ethernet.h... no
2022-05-13T16:36:53.9303021Z checking sys/file.h usability... yes
2022-05-13T16:36:54.0786046Z checking sys/file.h presence... yes
2022-05-13T16:36:54.0789445Z checking for sys/file.h... yes
2022-05-13T16:36:54.4334209Z checking sys/param.h usability... yes
2022-05-13T16:36:54.5661414Z checking sys/param.h presence... yes
2022-05-13T16:36:54.5663159Z checking for sys/param.h... yes
2022-05-13T16:36:54.9364511Z checking sys/socket.h usability... yes
2022-05-13T16:36:55.0916757Z checking sys/socket.h presence... yes
2022-05-13T16:36:55.0918108Z checking for sys/socket.h... yes
2022-05-13T16:36:55.5079923Z checking sys/time.h usability... yes
2022-05-13T16:36:55.6604128Z checking sys/time.h presence... yes
2022-05-13T16:36:55.6605308Z checking for sys/time.h... yes
2022-05-13T16:36:56.0669428Z checking sys/times.h usability... yes
2022-05-13T16:36:56.1904023Z checking sys/times.h presence... yes
2022-05-13T16:36:56.1905833Z checking for sys/times.h... yes
2022-05-13T16:36:56.3347813Z checking for sys/types.h... (cached) yes
2022-05-13T16:36:56.6925205Z checking termios.h usability... yes
2022-05-13T16:36:56.8323769Z checking termios.h presence... yes
2022-05-13T16:36:56.8326482Z checking for termios.h... yes
2022-05-13T16:36:56.9836704Z checking for unistd.h... (cached) yes
2022-05-13T16:36:57.4316168Z checking unixlib/local.h usability... no
2022-05-13T16:36:57.6251706Z checking unixlib/local.h presence... no
2022-05-13T16:36:57.6253727Z checking for unixlib/local.h... no
2022-05-13T16:36:57.6843145Z checking for windows.h... (cached) yes
2022-05-13T16:36:57.9408658Z checking for net/if.h... yes
2022-05-13T16:36:58.2712137Z checking for net/if_arp.h... no
2022-05-13T16:36:58.5584853Z checking for netinet/if_ether.h... no
2022-05-13T16:36:58.7553396Z checking for netinet/ip.h... yes
2022-05-13T16:36:59.2165685Z checking for stdbool.h that conforms to C99... yes
2022-05-13T16:36:59.8366071Z checking for _Bool... yes
2022-05-13T16:37:00.0719500Z checking for inline... inline
2022-05-13T16:37:00.7653708Z checking for int32_t... yes
2022-05-13T16:37:01.4291407Z checking for int64_t... yes
2022-05-13T16:37:02.0225461Z checking for off_t... yes
2022-05-13T16:37:02.6141837Z checking for size_t... yes
2022-05-13T16:37:03.2465345Z checking for ssize_t... yes
2022-05-13T16:37:03.5307900Z checking for uint16_t... yes
2022-05-13T16:37:03.8057043Z checking for uint32_t... yes
2022-05-13T16:37:04.0812037Z checking for uint64_t... yes
2022-05-13T16:37:04.3626502Z checking for uint8_t... yes
2022-05-13T16:37:05.1673516Z checking for ptrdiff_t... yes
2022-05-13T16:37:05.6922344Z checking for int128... no
2022-05-13T16:37:06.5093573Z checking for __int128... yes
2022-05-13T16:37:07.2191514Z checking for __int128_t... yes
2022-05-13T16:37:07.7132157Z checking for error_at_line... yes
2022-05-13T16:37:08.4679599Z checking for pid_t... yes
2022-05-13T16:37:08.8823398Z checking vfork.h usability... no
2022-05-13T16:37:09.1872024Z checking vfork.h presence... no
2022-05-13T16:37:09.1874028Z checking for vfork.h... no
2022-05-13T16:37:09.7698674Z checking for fork... yes
2022-05-13T16:37:10.3978129Z checking for vfork... yes
2022-05-13T16:37:11.0270659Z checking for working fork... yes
2022-05-13T16:37:11.0272083Z checking for working vfork... (cached) yes
2022-05-13T16:37:11.6387723Z checking for fseek64... no
2022-05-13T16:37:12.1621166Z checking for fseeko... yes
2022-05-13T16:37:12.7974748Z checking for fseeko64... no
2022-05-13T16:37:13.4007815Z checking for _fseeki64... no
2022-05-13T16:37:13.9984370Z checking for lseek64... no
2022-05-13T16:37:14.4631905Z checking for lseek... yes
2022-05-13T16:37:15.1074701Z checking for ftell64... no
2022-05-13T16:37:15.5936441Z checking for ftello... yes
2022-05-13T16:37:16.3080625Z checking for ftello64... no
2022-05-13T16:37:16.9119153Z checking for _ftelli64... no
2022-05-13T16:37:17.4865345Z checking for fopen64... no
2022-05-13T16:37:18.3902684Z checking for _fopen64... no
2022-05-13T16:37:18.6448549Z checking for memmem... yes
2022-05-13T16:37:19.1998951Z checking for mmap... yes
2022-05-13T16:37:19.7696962Z checking for sleep... yes
2022-05-13T16:37:20.3303517Z checking for setenv... yes
2022-05-13T16:37:20.8693470Z checking for putenv... yes
2022-05-13T16:37:21.5212744Z checking for strcasecmp... yes
2022-05-13T16:37:22.1698491Z checking for strncasecmp... yes
2022-05-13T16:37:22.8249125Z checking for stricmp... no
2022-05-13T16:37:23.4012406Z checking for strcmpi... no
2022-05-13T16:37:23.9698082Z checking for _stricmp... no
2022-05-13T16:37:24.5210698Z checking for _strcmpi... no
2022-05-13T16:37:25.0809331Z checking for strnicmp... no
2022-05-13T16:37:25.6082744Z checking for strncmpi... no
2022-05-13T16:37:26.1758506Z checking for _strnicmp... no
2022-05-13T16:37:26.7976422Z checking for _strncmpi... no
2022-05-13T16:37:27.3582837Z checking for strnlen... yes
2022-05-13T16:37:27.9049415Z checking for strlwr... yes
2022-05-13T16:37:28.4826960Z checking for strupr... yes
2022-05-13T16:37:29.1230066Z checking for strrev... no
2022-05-13T16:37:29.5650169Z checking for atoll... yes
2022-05-13T16:37:30.2167132Z checking for _atoi64... no
2022-05-13T16:37:30.7692967Z checking for snprintf... yes
2022-05-13T16:37:31.4572956Z checking for sprintf_s... no
2022-05-13T16:37:31.9234654Z checking for strcasestr... yes
2022-05-13T16:37:32.4399768Z checking for clGetKernelArgInfo... yes
2022-05-13T16:37:33.0538666Z checking for posix_memalign... yes
2022-05-13T16:37:33.5574333Z checking for yasm that supports "-f win64"... 
2022-05-13T16:37:33.5591631Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T16:37:33.9871864Z checking for _get_osfhandle... yes
2022-05-13T16:37:37.1520426Z checking for GetFileSizeEx... yes
2022-05-13T16:37:37.1785352Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T16:37:37.7453756Z checking size of size_t... 8
2022-05-13T16:37:38.2999728Z checking size of off_t... 8
2022-05-13T16:37:38.3553154Z configure: Fuzz check disabled
2022-05-13T16:37:38.3555750Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T16:37:38.3652824Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T16:37:38.4614116Z configure: creating Makefile dependencies
2022-05-13T16:37:41.5350368Z configure: creating ./john_build_rule.h
2022-05-13T16:37:41.9681184Z configure: creating ./config.status
2022-05-13T16:37:44.4440146Z config.status: creating Makefile
2022-05-13T16:37:44.7957574Z config.status: creating aes/Makefile
2022-05-13T16:37:45.2346498Z config.status: creating aes/aesni/Makefile
2022-05-13T16:37:45.6156055Z config.status: creating aes/openssl/Makefile
2022-05-13T16:37:45.9860238Z config.status: creating secp256k1/Makefile
2022-05-13T16:37:46.4027307Z config.status: creating ed25519-donna/Makefile
2022-05-13T16:37:46.8435299Z config.status: creating poly1305-donna/Makefile
2022-05-13T16:37:47.2799414Z config.status: creating autoconfig.h
2022-05-13T16:37:47.3954940Z config.status: autoconfig.h is unchanged
2022-05-13T16:37:47.4714606Z config.status: linking x86-64.h to arch.h
2022-05-13T16:37:47.5528626Z config.status: executing default commands
2022-05-13T16:37:47.5816590Z configure: creating ./fmt_externs.h
2022-05-13T16:37:58.1603989Z configure: creating ./fmt_registers.h
2022-05-13T16:38:11.4242821Z 
2022-05-13T16:38:11.4246130Z Configured for building John the Ripper jumbo:
2022-05-13T16:38:11.4246987Z 
2022-05-13T16:38:11.4247973Z Target CPU ......................................... x86_64 SSE2, 64-bit LE
2022-05-13T16:38:11.4249325Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T16:38:11.4250732Z Target OS .......................................... cygwin
2022-05-13T16:38:11.4252320Z Cross compiling .................................... no
2022-05-13T16:38:11.4253360Z Legacy arch header ................................. x86-64.h
2022-05-13T16:38:11.4254175Z 
2022-05-13T16:38:11.4255668Z Optional libraries/features found:
2022-05-13T16:38:11.4258347Z Memory map (share/page large files) ................ yes
2022-05-13T16:38:11.4259436Z Fork support ....................................... yes
2022-05-13T16:38:11.4261293Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T16:38:11.4262646Z OpenCL support ..................................... yes
2022-05-13T16:38:11.4263622Z Generic crypt(3) format ............................ yes
2022-05-13T16:38:11.4264598Z OpenSSL (many additional formats) .................. yes
2022-05-13T16:38:11.4265528Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T16:38:11.4267120Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T16:38:11.4268328Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T16:38:11.4270269Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T16:38:11.4271411Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T16:38:11.4272358Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T16:38:11.4273228Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T16:38:11.4274180Z OpenMPI support (default disabled) ................. no
2022-05-13T16:38:11.4275082Z Experimental code (default disabled) ............... no
2022-05-13T16:38:11.4276006Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T16:38:11.4276531Z 
2022-05-13T16:38:11.4277406Z Install missing libraries to get any needed features that were omitted.
2022-05-13T16:38:11.4277973Z 
2022-05-13T16:38:11.4278613Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T16:39:54.8549122Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T16:39:54.8554530Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:54.8556378Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:54.8557889Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:54.8559766Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:54.8561555Z       |                         ^~~~
2022-05-13T16:39:54.8562631Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:54.8564520Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:54.8565517Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:54.8566432Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:54.8567174Z       |                         ^~~~
2022-05-13T16:39:54.8568050Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:39:54.8568996Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:54.8569789Z       | ^~~~~~~~~~~~
2022-05-13T16:39:54.9093652Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T16:39:54.9096241Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:54.9097538Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:54.9098620Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:54.9099508Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:54.9101023Z       |                         ^~~~
2022-05-13T16:39:54.9102056Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:54.9103025Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:54.9103854Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:54.9104761Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:54.9105522Z       |                         ^~~~
2022-05-13T16:39:54.9106333Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:39:54.9107173Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:54.9107835Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:54.9479278Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T16:39:54.9485198Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:39:54.9487401Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:54.9489444Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:54.9490790Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:54.9491423Z       |                         ^~~~
2022-05-13T16:39:54.9492410Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:54.9493451Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:54.9494543Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:54.9495491Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:54.9496357Z       |                         ^~~~
2022-05-13T16:39:54.9497314Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:39:54.9498398Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:39:54.9499197Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:55.0613768Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T16:39:55.0616083Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:55.0617204Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:55.0618016Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.0618725Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:39:55.0619468Z       |                 ^~~~
2022-05-13T16:39:55.0620271Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:55.0621016Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:55.0623196Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.0624268Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:39:55.0625365Z       |                 ^~~~
2022-05-13T16:39:55.0626650Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:39:55.0627492Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:55.0628206Z       | ^~~~~~~~~~~~
2022-05-13T16:39:55.1826241Z In function ‘ripemd_addbits_and_close’,
2022-05-13T16:39:55.1828486Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T16:39:55.1830680Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T16:39:55.1832047Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:55.1834041Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:55.1834950Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.1837269Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.1839777Z       |                 ^~~~
2022-05-13T16:39:55.1840672Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T16:39:55.1841720Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:55.1845085Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:55.1846826Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.1849121Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.1849797Z       |                 ^~~~
2022-05-13T16:39:55.1851547Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:39:55.1854411Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:55.1855379Z       | ^~~~~~~~~~~~
2022-05-13T16:39:55.1856151Z In function ‘ripemd_addbits_and_close’,
2022-05-13T16:39:55.1858661Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T16:39:55.1860730Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T16:39:55.1862134Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:55.1863158Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:55.1865373Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.1870405Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.1871305Z       |         ^~~~
2022-05-13T16:39:55.1872063Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T16:39:55.1874614Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:55.1875635Z   276 | #define RFUN   ripemd_round
2022-05-13T16:39:55.1878014Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.1879522Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.1881215Z       |         ^~~~
2022-05-13T16:39:55.1882996Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:39:55.1884088Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:55.1885924Z       | ^~~~~~~~~~~~
2022-05-13T16:39:55.5943125Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T16:39:55.5945784Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:55.5946961Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:55.5947727Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.5948520Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:39:55.5949243Z       |                 ^~~~
2022-05-13T16:39:55.5950002Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:55.5950807Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:55.5953002Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.5953811Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:39:55.5954555Z       |                 ^~~~
2022-05-13T16:39:55.5956110Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:39:55.5956979Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:55.5958011Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:55.6997881Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T16:39:55.6999904Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T16:39:55.7000932Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T16:39:55.7002138Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:55.7003174Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:55.7004985Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.7006253Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.7007013Z       |                 ^~~~
2022-05-13T16:39:55.7007727Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T16:39:55.7008771Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:55.7011025Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:55.7011979Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.7012855Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.7013514Z       |                 ^~~~
2022-05-13T16:39:55.7014511Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:39:55.7016205Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:55.7017108Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:55.7017924Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T16:39:55.7018744Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T16:39:55.7020835Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T16:39:55.7021781Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:39:55.7022681Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:55.7023475Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.7024589Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.7025360Z       |         ^~~~
2022-05-13T16:39:55.7026157Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T16:39:55.7027045Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:55.7027850Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:39:55.7031038Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:55.7031928Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:55.7033074Z       |         ^~~~
2022-05-13T16:39:55.7033795Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:39:55.7035013Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:39:55.7036293Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:56.3345699Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T16:39:56.3347498Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:39:56.3349016Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:56.3349901Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:56.3350798Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:39:56.3351536Z       |                 ^~~~
2022-05-13T16:39:56.3352351Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:56.3353168Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:56.3353967Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:56.3355004Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:39:56.3355594Z       |                 ^~~~
2022-05-13T16:39:56.3356394Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:39:56.3357228Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:39:56.3357873Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:56.4362329Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T16:39:56.4363850Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T16:39:56.4365176Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T16:39:56.4366437Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:39:56.4367725Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:56.4368753Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:56.4369700Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:56.4370424Z       |                 ^~~~
2022-05-13T16:39:56.4371266Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T16:39:56.4372428Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:56.4373466Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:56.4374460Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:56.4375438Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:56.4376238Z       |                 ^~~~
2022-05-13T16:39:56.4377107Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:39:56.4378075Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:39:56.4381795Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:39:56.4382977Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T16:39:56.4384566Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T16:39:56.4385597Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T16:39:56.4386934Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:39:56.4388068Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:56.4389003Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:56.4389839Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:56.4390526Z       |         ^~~~
2022-05-13T16:39:56.4391336Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T16:39:56.4392416Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:39:56.4393357Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:39:56.4394214Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:39:56.4395323Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:39:56.4396127Z       |         ^~~~
2022-05-13T16:39:56.4396953Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:39:56.4398016Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:39:56.4398913Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:40:52.8879016Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T16:40:52.8881164Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8882515Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:40:52.8884098Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8885131Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T16:40:52.8886834Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8887967Z   366 |                                         keys,
2022-05-13T16:40:52.8888782Z       |                                         ~~~~~
2022-05-13T16:40:52.8889614Z   367 |                                         lens, cur_salt->salt,
2022-05-13T16:40:52.8890441Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8891345Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T16:40:52.8892256Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8893336Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:40:52.8895681Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8897349Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:40:52.8899511Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8900968Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:40:52.8902030Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:40:52.8903455Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:40:52.8904730Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:40:52.8906499Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8907780Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8910402Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:40:52.8912229Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8913300Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T16:40:52.8914378Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8915115Z   374 |                                         keys,
2022-05-13T16:40:52.8915921Z       |                                         ~~~~~
2022-05-13T16:40:52.8916633Z   375 |                                         lens, cur_salt->salt,
2022-05-13T16:40:52.8917367Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8918120Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T16:40:52.8918818Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8919695Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:40:52.8920723Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8921767Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:40:52.8922784Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8923789Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:40:52.8926619Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:40:52.8928063Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:40:52.8929325Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:40:52.8930537Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8931713Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8933193Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:40:52.8934206Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8935701Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T16:40:52.8936580Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8937466Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T16:40:52.8938216Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8938975Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:40:52.8940246Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:40:52.8941202Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:40:52.8942255Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8943288Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:40:52.8944330Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:40:52.8945769Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:40:52.8947187Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:40:52.8948043Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:40:52.8949000Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:40:52.8949787Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6568642Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T16:42:21.6571288Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:42:21.6573301Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:42:21.6575449Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6576384Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:42:21.6577717Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6579406Z   270 |                                         lens, cur_salt->salt,
2022-05-13T16:42:21.6580357Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6581476Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:42:21.6582680Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6583806Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:42:21.6585671Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:42:21.6587535Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:42:21.6589547Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:42:21.6590961Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:42:21.6592266Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:42:21.6593228Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:42:21.6594249Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:42:21.6595106Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6604301Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:21.6605713Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:42:21.6606866Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6608036Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:42:21.6608875Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6609634Z   247 |                                         lens, cur_salt->salt,
2022-05-13T16:42:21.6610344Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6611026Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:42:21.6611805Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6612646Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:42:21.6613660Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:21.6614676Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:42:21.6615683Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:21.6616666Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:42:21.6617625Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:42:21.6618728Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:42:21.6619619Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:42:21.6620645Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6623823Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:21.6625285Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:42:21.6626512Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6627910Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:42:21.6628835Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6629633Z   225 |                                         lens, cur_salt->salt,
2022-05-13T16:42:21.6630343Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6631096Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:42:21.6631817Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:21.6632665Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:42:21.6633679Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:21.6634704Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:42:21.6635711Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:21.6637744Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:42:21.6638685Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:42:21.6639510Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:42:21.6640473Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:42:21.6641314Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9583696Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T16:42:48.9587003Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:48.9588927Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T16:42:48.9590950Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9604381Z   117 |                                 cur_salt->iterations,
2022-05-13T16:42:48.9605988Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9612141Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T16:42:48.9613284Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9614159Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T16:42:48.9614935Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9615858Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:42:48.9617663Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:48.9618777Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:42:48.9650003Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:48.9652351Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:42:48.9654337Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T16:42:48.9655974Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:42:48.9656937Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:42:48.9657821Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9661117Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:48.9663523Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T16:42:48.9664982Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9666161Z   122 |                                 cur_salt->iterations,
2022-05-13T16:42:48.9666924Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9667718Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T16:42:48.9668625Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9669638Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T16:42:48.9670456Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:42:48.9671318Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:42:48.9672373Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:48.9674852Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:42:48.9676842Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:42:48.9677955Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:42:48.9678843Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T16:42:48.9679945Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:42:48.9680844Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:42:48.9681698Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:02.2272172Z stribog_fmt_plug.c:472:2: warning: #warning Stribog-256 and Stribog-512 formats require SSE 4.1, formats disabled [-Wcpp]
2022-05-13T16:43:02.2274299Z   472 | #warning Stribog-256 and Stribog-512 formats require SSE 4.1, formats disabled
2022-05-13T16:43:02.2276614Z       |  ^~~~~~~
2022-05-13T16:43:20.1989792Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T16:43:20.1992068Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:43:20.1993625Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T16:43:20.1995275Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.1997585Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:43:20.1998745Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.1999717Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T16:43:20.2000571Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2001488Z   153 |                                                    salt_len, mackey,
2022-05-13T16:43:20.2002372Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2003238Z   154 |                                                    BINARY_SIZE);
2022-05-13T16:43:20.2004905Z       |                                                    ~~~~~~~~~~~~
2022-05-13T16:43:20.2006346Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:43:20.2025091Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:43:20.2045959Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:43:20.2048565Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:43:20.2068686Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:43:20.2069644Z In file included from zed_fmt_plug.c:30:
2022-05-13T16:43:20.2070476Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:43:20.2071455Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:43:20.2072345Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2073311Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:43:20.2074376Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T16:43:20.2075325Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2076169Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:43:20.2077240Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2077945Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T16:43:20.2078710Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2079466Z   138 |                                                    salt_len, mackey,
2022-05-13T16:43:20.2080198Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T16:43:20.2080917Z   139 |                                                    BINARY_SIZE);
2022-05-13T16:43:20.2081554Z       |                                                    ~~~~~~~~~~~~
2022-05-13T16:43:20.2082413Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:43:20.2083477Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:43:20.2085191Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:43:20.2087250Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:43:20.2088317Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:43:20.2089187Z In file included from zed_fmt_plug.c:30:
2022-05-13T16:43:20.2090027Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:43:20.2090927Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:43:20.2091776Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:43:59.2071300Z In file included from subsets.c:25:
2022-05-13T16:43:59.2073511Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T16:43:59.2076746Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T16:43:59.2079245Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T16:43:59.2080405Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T16:45:48.9144742Z ar: creating aes.a
2022-05-13T16:46:01.4183892Z ar: creating secp256k1.a
2022-05-13T16:46:11.0038368Z ar: creating ed25519-donna.a
2022-05-13T16:46:11.8300308Z ar: creating poly1305-donna.a
2022-05-13T16:46:51.8370478Z 
2022-05-13T16:46:51.8634230Z Make process completed.
2022-05-13T16:46:53.4112621Z 
2022-05-13T16:46:53.4385004Z Make process completed.
2022-05-13T16:46:53.4601290Z Stripping executables.
2022-05-13T16:46:54.2203972Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=sse4.1 CPPFLAGS='-DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-sse2\\\"\" '                                                                          && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-sse41-non-omp'
2022-05-13T16:46:57.0813916Z checking build system type... x86_64-unknown-cygwin
2022-05-13T16:46:57.0817246Z checking host system type... x86_64-unknown-cygwin
2022-05-13T16:46:57.0988779Z checking whether to compile using MPI... no
2022-05-13T16:46:57.1006811Z checking for gcc... gcc
2022-05-13T16:46:57.9085750Z checking whether the C compiler works... yes
2022-05-13T16:46:57.9091676Z checking for C compiler default output file name... a.exe
2022-05-13T16:46:58.2441817Z checking for suffix of executables... .exe
2022-05-13T16:46:58.6196301Z checking whether we are cross compiling... no
2022-05-13T16:46:58.8485491Z checking for suffix of object files... o
2022-05-13T16:46:59.0282058Z checking whether we are using the GNU C compiler... yes
2022-05-13T16:46:59.1938982Z checking whether gcc accepts -g... yes
2022-05-13T16:46:59.4633809Z checking for gcc option to accept ISO C89... none needed
2022-05-13T16:46:59.7191411Z checking whether gcc understands -c and -o together... yes
2022-05-13T16:47:00.1722972Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T16:47:00.1727474Z checking whether gcc accepts -g... (cached) yes
2022-05-13T16:47:00.1733286Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T16:47:00.1736929Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T16:47:00.1784166Z checking additional paths...  -L/usr/local/lib
2022-05-13T16:47:00.9755460Z checking arg check macro for -m with gcc... yes
2022-05-13T16:47:01.2949740Z checking arg check macro for -Q with gcc... yes
2022-05-13T16:47:01.4539041Z checking if gcc supports -funroll-loops... yes
2022-05-13T16:47:01.6350892Z checking if gcc supports -Os... yes
2022-05-13T16:47:02.0131990Z checking if gcc supports -finline-functions... yes
2022-05-13T16:47:02.1818722Z checking if gcc supports -Og... yes
2022-05-13T16:47:02.3685768Z checking if gcc supports -Wall... yes
2022-05-13T16:47:02.5568205Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T16:47:02.7489844Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T16:47:02.9400704Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T16:47:03.2808214Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T16:47:03.4594962Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T16:47:03.7346301Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T16:47:03.9041377Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T16:47:04.1553826Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T16:47:04.3515815Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T16:47:04.6357169Z checking if gcc supports -Qunused-arguments... no
2022-05-13T16:47:04.8174483Z checking if gcc supports -std=gnu89... yes
2022-05-13T16:47:05.0016650Z checking if gcc supports -Wdate-time... yes
2022-05-13T16:47:05.3827911Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T16:47:05.7789652Z checking for 32/64 bit... 64-bit
2022-05-13T16:47:05.8024342Z checking additional paths (64 bit)... none
2022-05-13T16:47:05.8027014Z checking whether ln -s works... yes
2022-05-13T16:47:05.8505331Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T16:47:05.9248196Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T16:47:06.0287978Z checking for GNU make... make
2022-05-13T16:47:06.1787296Z checking whether make sets $(MAKE)... yes
2022-05-13T16:47:06.5359776Z checking how to run the C preprocessor... gcc -E
2022-05-13T16:47:06.9267469Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T16:47:07.1452471Z checking for sort... /usr/bin/sort
2022-05-13T16:47:07.1461495Z checking for find... /usr/bin/find
2022-05-13T16:47:07.1470767Z checking for perl... /usr/bin/perl
2022-05-13T16:47:07.1481704Z checking for ar... ar
2022-05-13T16:47:07.1495633Z checking for strip... strip
2022-05-13T16:47:07.1507054Z checking for strings... strings
2022-05-13T16:47:07.1521478Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T16:47:07.1801605Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T16:47:07.1804757Z checking if pkg-config will be used... no
2022-05-13T16:47:07.2314323Z checking for egrep... /usr/bin/grep -E
2022-05-13T16:47:08.2182725Z checking for ANSI C header files... yes
2022-05-13T16:47:08.4895350Z checking for sys/types.h... yes
2022-05-13T16:47:08.8741097Z checking for sys/stat.h... yes
2022-05-13T16:47:09.2601863Z checking for stdlib.h... yes
2022-05-13T16:47:09.5930841Z checking for string.h... yes
2022-05-13T16:47:09.9638817Z checking for memory.h... yes
2022-05-13T16:47:10.3807098Z checking for strings.h... yes
2022-05-13T16:47:10.7473042Z checking for inttypes.h... yes
2022-05-13T16:47:11.0857749Z checking for stdint.h... yes
2022-05-13T16:47:11.4545900Z checking for unistd.h... yes
2022-05-13T16:47:12.1013718Z checking size of short... 2
2022-05-13T16:47:12.6289411Z checking size of int... 4
2022-05-13T16:47:13.1549878Z checking size of long... 8
2022-05-13T16:47:13.6853217Z checking size of long long... 8
2022-05-13T16:47:14.2322000Z checking size of wchar_t... 2
2022-05-13T16:47:14.7499991Z checking size of int *... 8
2022-05-13T16:47:15.3362939Z checking size of void *... 8
2022-05-13T16:47:15.4176190Z configure: Trying to force SSE4.1 using default method (--enable-simd=sse4.1).
2022-05-13T16:47:15.7885528Z checking if gcc supports -msse4.1 w/ linking... yes
2022-05-13T16:47:16.2519121Z checking for extra ASFLAGS... None needed
2022-05-13T16:47:16.5276409Z checking for X32 ABI... no
2022-05-13T16:47:16.5550236Z checking special compiler flags... Intel x86
2022-05-13T16:47:16.5551444Z configure: Testing tool-chain's CPU support with given options
2022-05-13T16:47:16.9736245Z checking for MMX... yes
2022-05-13T16:47:17.4579023Z checking for SSE2... yes
2022-05-13T16:47:17.9163625Z checking for SSSE3... yes
2022-05-13T16:47:18.4047945Z checking for SSE4.1... yes
2022-05-13T16:47:18.7666730Z checking for SSE4.2... no
2022-05-13T16:47:18.7946548Z checking for arch.h alternative... x86-64.h
2022-05-13T16:47:18.7957573Z checking for byte ordering according to target triple... little
2022-05-13T16:47:18.7972279Z checking supplied paths for OpenSSL...  
2022-05-13T16:47:18.7977252Z checking additional paths for OpenSSL... none
2022-05-13T16:47:19.0312192Z checking openssl/opensslv.h usability... yes
2022-05-13T16:47:19.1330513Z checking openssl/opensslv.h presence... yes
2022-05-13T16:47:19.1332301Z checking for openssl/opensslv.h... yes
2022-05-13T16:47:19.5209255Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T16:47:19.9152128Z checking for MD5_Update in -lcrypto... yes
2022-05-13T16:47:19.9174645Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T16:47:20.3698982Z checking for sqrt in -lm... yes
2022-05-13T16:47:20.7538208Z checking for clock_gettime in -lrt... yes
2022-05-13T16:47:21.1331480Z checking for deflate in -lz... yes
2022-05-13T16:47:22.0010478Z checking for library containing crypt... -lcrypt
2022-05-13T16:47:22.2938025Z checking gmp.h usability... yes
2022-05-13T16:47:22.4333195Z checking gmp.h presence... yes
2022-05-13T16:47:22.4334794Z checking for gmp.h... yes
2022-05-13T16:47:22.9157699Z checking for __gmpz_init in -lgmp... yes
2022-05-13T16:47:23.2326594Z checking skey.h usability... no
2022-05-13T16:47:23.4631654Z checking skey.h presence... no
2022-05-13T16:47:23.4633545Z checking for skey.h... no
2022-05-13T16:47:23.4641042Z checking for S/Key... using our own code
2022-05-13T16:47:23.7098863Z checking bzlib.h usability... yes
2022-05-13T16:47:23.8546059Z checking bzlib.h presence... yes
2022-05-13T16:47:23.8549881Z checking for bzlib.h... yes
2022-05-13T16:47:24.2504646Z checking for main in -lbz2... yes
2022-05-13T16:47:24.6751356Z checking for main in -lkernel32... yes
2022-05-13T16:47:25.0858231Z checking for dlopen in -ldl... yes
2022-05-13T16:47:26.4215236Z checking intrin.h usability... yes
2022-05-13T16:47:26.8296161Z checking intrin.h presence... yes
2022-05-13T16:47:26.8297731Z checking for intrin.h... yes
2022-05-13T16:47:27.1803898Z checking openssl/cmac.h usability... yes
2022-05-13T16:47:27.4241210Z checking openssl/cmac.h presence... yes
2022-05-13T16:47:27.4244343Z checking for openssl/cmac.h... yes
2022-05-13T16:47:27.4473525Z configure: rexgen check not enabled
2022-05-13T16:47:27.8219769Z checking pcap.h usability... no
2022-05-13T16:47:28.0459377Z checking pcap.h presence... no
2022-05-13T16:47:28.0460625Z checking for pcap.h... no
2022-05-13T16:47:28.4350684Z checking pcap/pcap.h usability... no
2022-05-13T16:47:28.6681485Z checking pcap/pcap.h presence... no
2022-05-13T16:47:28.6684268Z checking for pcap/pcap.h... no
2022-05-13T16:47:28.7359062Z checking for pcap.h... (cached) no
2022-05-13T16:47:28.7935982Z checking for pcap/pcap.h... (cached) no
2022-05-13T16:47:29.0285440Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T16:47:29.2244762Z checking whether string.h and strings.h may both be included... yes
2022-05-13T16:47:29.7101004Z checking for SHA256... yes
2022-05-13T16:47:30.2498308Z checking for WHIRLPOOL... yes
2022-05-13T16:47:30.7849533Z checking for RIPEMD160... yes
2022-05-13T16:47:31.3656353Z checking for AES_encrypt... yes
2022-05-13T16:47:31.9172678Z checking for DSA_get0_pqg... yes
2022-05-13T16:47:32.2419124Z checking additional paths for OpenCL... none
2022-05-13T16:47:32.5292080Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T16:47:33.1233468Z checking for the pthreads library -lpthreads... no
2022-05-13T16:47:33.5890616Z checking whether pthreads work without any flags... yes
2022-05-13T16:47:34.0374959Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T16:47:34.0377449Z checking if more special flags are required for pthreads... no
2022-05-13T16:47:34.3755171Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T16:47:34.6406533Z checking whether we are using the Microsoft C compiler... no
2022-05-13T16:47:35.0320346Z checking CL/cl.h usability... yes
2022-05-13T16:47:35.2140456Z checking CL/cl.h presence... yes
2022-05-13T16:47:35.2142836Z checking for CL/cl.h... yes
2022-05-13T16:47:35.6768596Z checking OpenCL/cl.h usability... no
2022-05-13T16:47:35.8870581Z checking OpenCL/cl.h presence... no
2022-05-13T16:47:35.8872897Z checking for OpenCL/cl.h... no
2022-05-13T16:47:38.5101949Z checking windows.h usability... yes
2022-05-13T16:47:39.8859198Z checking windows.h presence... yes
2022-05-13T16:47:39.8860807Z checking for windows.h... yes
2022-05-13T16:47:40.4683285Z checking for OpenCL library... -lOpenCL
2022-05-13T16:47:40.7860490Z checking arpa/inet.h usability... yes
2022-05-13T16:47:40.9456095Z checking arpa/inet.h presence... yes
2022-05-13T16:47:40.9457434Z checking for arpa/inet.h... yes
2022-05-13T16:47:41.4309994Z checking crypt.h usability... yes
2022-05-13T16:47:41.5614085Z checking crypt.h presence... yes
2022-05-13T16:47:41.5615821Z checking for crypt.h... yes
2022-05-13T16:47:42.0130905Z checking dirent.h usability... yes
2022-05-13T16:47:42.1586512Z checking dirent.h presence... yes
2022-05-13T16:47:42.1588431Z checking for dirent.h... yes
2022-05-13T16:47:42.6040037Z checking limits.h usability... yes
2022-05-13T16:47:42.7567942Z checking limits.h presence... yes
2022-05-13T16:47:42.7571701Z checking for limits.h... yes
2022-05-13T16:47:43.2489998Z checking locale.h usability... yes
2022-05-13T16:47:43.4344843Z checking locale.h presence... yes
2022-05-13T16:47:43.4348144Z checking for locale.h... yes
2022-05-13T16:47:43.8699647Z checking malloc.h usability... yes
2022-05-13T16:47:44.0097876Z checking malloc.h presence... yes
2022-05-13T16:47:44.0099262Z checking for malloc.h... yes
2022-05-13T16:47:44.5530862Z checking net/ethernet.h usability... no
2022-05-13T16:47:44.8448837Z checking net/ethernet.h presence... no
2022-05-13T16:47:44.8451553Z checking for net/ethernet.h... no
2022-05-13T16:47:45.2229393Z checking netdb.h usability... yes
2022-05-13T16:47:45.4039897Z checking netdb.h presence... yes
2022-05-13T16:47:45.4041223Z checking for netdb.h... yes
2022-05-13T16:47:45.8574750Z checking netinet/in.h usability... yes
2022-05-13T16:47:46.0305978Z checking netinet/in.h presence... yes
2022-05-13T16:47:46.0307520Z checking for netinet/in.h... yes
2022-05-13T16:47:46.4660505Z checking netinet/in_systm.h usability... yes
2022-05-13T16:47:46.6387148Z checking netinet/in_systm.h presence... yes
2022-05-13T16:47:46.6393779Z checking for netinet/in_systm.h... yes
2022-05-13T16:47:46.8167035Z checking for string.h... (cached) yes
2022-05-13T16:47:46.9866230Z checking for strings.h... (cached) yes
2022-05-13T16:47:47.5277622Z checking sys/ethernet.h usability... no
2022-05-13T16:47:47.7915447Z checking sys/ethernet.h presence... no
2022-05-13T16:47:47.7916670Z checking for sys/ethernet.h... no
2022-05-13T16:47:48.1352949Z checking sys/file.h usability... yes
2022-05-13T16:47:48.3318251Z checking sys/file.h presence... yes
2022-05-13T16:47:48.3320879Z checking for sys/file.h... yes
2022-05-13T16:47:48.8013909Z checking sys/param.h usability... yes
2022-05-13T16:47:48.9961762Z checking sys/param.h presence... yes
2022-05-13T16:47:48.9964387Z checking for sys/param.h... yes
2022-05-13T16:47:49.4401546Z checking sys/socket.h usability... yes
2022-05-13T16:47:49.5961862Z checking sys/socket.h presence... yes
2022-05-13T16:47:49.5966765Z checking for sys/socket.h... yes
2022-05-13T16:47:49.9874902Z checking sys/time.h usability... yes
2022-05-13T16:47:50.1574512Z checking sys/time.h presence... yes
2022-05-13T16:47:50.1575870Z checking for sys/time.h... yes
2022-05-13T16:47:50.6249523Z checking sys/times.h usability... yes
2022-05-13T16:47:50.8375929Z checking sys/times.h presence... yes
2022-05-13T16:47:50.8377798Z checking for sys/times.h... yes
2022-05-13T16:47:51.0200989Z checking for sys/types.h... (cached) yes
2022-05-13T16:47:51.4958232Z checking termios.h usability... yes
2022-05-13T16:47:51.6692451Z checking termios.h presence... yes
2022-05-13T16:47:51.6694268Z checking for termios.h... yes
2022-05-13T16:47:51.8593626Z checking for unistd.h... (cached) yes
2022-05-13T16:47:52.4100568Z checking unixlib/local.h usability... no
2022-05-13T16:47:52.6540472Z checking unixlib/local.h presence... no
2022-05-13T16:47:52.6542358Z checking for unixlib/local.h... no
2022-05-13T16:47:52.7349134Z checking for windows.h... (cached) yes
2022-05-13T16:47:53.0512911Z checking for net/if.h... yes
2022-05-13T16:47:53.4103305Z checking for net/if_arp.h... no
2022-05-13T16:47:53.7353665Z checking for netinet/if_ether.h... no
2022-05-13T16:47:53.9907816Z checking for netinet/ip.h... yes
2022-05-13T16:47:54.5313278Z checking for stdbool.h that conforms to C99... yes
2022-05-13T16:47:55.2387496Z checking for _Bool... yes
2022-05-13T16:47:55.4805166Z checking for inline... inline
2022-05-13T16:47:56.1497209Z checking for int32_t... yes
2022-05-13T16:47:56.8449775Z checking for int64_t... yes
2022-05-13T16:47:57.5694676Z checking for off_t... yes
2022-05-13T16:47:58.2368199Z checking for size_t... yes
2022-05-13T16:47:58.9192292Z checking for ssize_t... yes
2022-05-13T16:47:59.2407954Z checking for uint16_t... yes
2022-05-13T16:47:59.5548640Z checking for uint32_t... yes
2022-05-13T16:47:59.8553216Z checking for uint64_t... yes
2022-05-13T16:48:00.2028176Z checking for uint8_t... yes
2022-05-13T16:48:00.9077364Z checking for ptrdiff_t... yes
2022-05-13T16:48:01.3646425Z checking for int128... no
2022-05-13T16:48:02.1034692Z checking for __int128... yes
2022-05-13T16:48:02.9055265Z checking for __int128_t... yes
2022-05-13T16:48:03.4366212Z checking for error_at_line... yes
2022-05-13T16:48:04.0998314Z checking for pid_t... yes
2022-05-13T16:48:04.5232788Z checking vfork.h usability... no
2022-05-13T16:48:04.7837593Z checking vfork.h presence... no
2022-05-13T16:48:04.7874102Z checking for vfork.h... no
2022-05-13T16:48:05.3798458Z checking for fork... yes
2022-05-13T16:48:06.0783446Z checking for vfork... yes
2022-05-13T16:48:06.7672354Z checking for working fork... yes
2022-05-13T16:48:06.7677800Z checking for working vfork... (cached) yes
2022-05-13T16:48:07.4363346Z checking for fseek64... no
2022-05-13T16:48:08.0521595Z checking for fseeko... yes
2022-05-13T16:48:08.8745219Z checking for fseeko64... no
2022-05-13T16:48:09.5949431Z checking for _fseeki64... no
2022-05-13T16:48:10.3240664Z checking for lseek64... no
2022-05-13T16:48:10.8364501Z checking for lseek... yes
2022-05-13T16:48:11.5835433Z checking for ftell64... no
2022-05-13T16:48:12.0973378Z checking for ftello... yes
2022-05-13T16:48:12.8641190Z checking for ftello64... no
2022-05-13T16:48:13.4898255Z checking for _ftelli64... no
2022-05-13T16:48:14.1399685Z checking for fopen64... no
2022-05-13T16:48:14.8479840Z checking for _fopen64... no
2022-05-13T16:48:15.4215195Z checking for memmem... yes
2022-05-13T16:48:16.0712078Z checking for mmap... yes
2022-05-13T16:48:16.6704262Z checking for sleep... yes
2022-05-13T16:48:17.3633813Z checking for setenv... yes
2022-05-13T16:48:18.0213451Z checking for putenv... yes
2022-05-13T16:48:18.8349972Z checking for strcasecmp... yes
2022-05-13T16:48:19.6513902Z checking for strncasecmp... yes
2022-05-13T16:48:20.3829217Z checking for stricmp... no
2022-05-13T16:48:21.0742321Z checking for strcmpi... no
2022-05-13T16:48:21.7227376Z checking for _stricmp... no
2022-05-13T16:48:22.3987474Z checking for _strcmpi... no
2022-05-13T16:48:23.1188353Z checking for strnicmp... no
2022-05-13T16:48:23.8278803Z checking for strncmpi... no
2022-05-13T16:48:24.5320119Z checking for _strnicmp... no
2022-05-13T16:48:25.2742049Z checking for _strncmpi... no
2022-05-13T16:48:25.9721843Z checking for strnlen... yes
2022-05-13T16:48:26.6391071Z checking for strlwr... yes
2022-05-13T16:48:27.4734951Z checking for strupr... yes
2022-05-13T16:48:28.0269598Z checking for strrev... no
2022-05-13T16:48:28.5716939Z checking for atoll... yes
2022-05-13T16:48:29.3406161Z checking for _atoi64... no
2022-05-13T16:48:29.9845090Z checking for snprintf... yes
2022-05-13T16:48:30.7678123Z checking for sprintf_s... no
2022-05-13T16:48:31.3192454Z checking for strcasestr... yes
2022-05-13T16:48:31.9277042Z checking for clGetKernelArgInfo... yes
2022-05-13T16:48:32.5856327Z checking for posix_memalign... yes
2022-05-13T16:48:33.1366165Z checking for yasm that supports "-f win64"... 
2022-05-13T16:48:33.1385094Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T16:48:33.6428191Z checking for _get_osfhandle... yes
2022-05-13T16:48:37.2907602Z checking for GetFileSizeEx... yes
2022-05-13T16:48:37.3218327Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T16:48:37.9907216Z checking size of size_t... 8
2022-05-13T16:48:38.6510041Z checking size of off_t... 8
2022-05-13T16:48:38.7121244Z configure: Fuzz check disabled
2022-05-13T16:48:38.7122729Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T16:48:38.7303902Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T16:48:38.8655651Z configure: creating Makefile dependencies
2022-05-13T16:48:41.9420197Z configure: creating ./john_build_rule.h
2022-05-13T16:48:42.2922034Z configure: creating ./config.status
2022-05-13T16:48:44.4644698Z config.status: creating Makefile
2022-05-13T16:48:44.7951294Z config.status: creating aes/Makefile
2022-05-13T16:48:45.1866530Z config.status: creating aes/aesni/Makefile
2022-05-13T16:48:45.5634895Z config.status: creating aes/openssl/Makefile
2022-05-13T16:48:45.9311283Z config.status: creating secp256k1/Makefile
2022-05-13T16:48:46.3199237Z config.status: creating ed25519-donna/Makefile
2022-05-13T16:48:46.6934740Z config.status: creating poly1305-donna/Makefile
2022-05-13T16:48:47.1134466Z config.status: creating autoconfig.h
2022-05-13T16:48:47.2283248Z config.status: autoconfig.h is unchanged
2022-05-13T16:48:47.3085597Z config.status: linking x86-64.h to arch.h
2022-05-13T16:48:47.4203612Z config.status: executing default commands
2022-05-13T16:48:47.4489069Z configure: creating ./fmt_externs.h
2022-05-13T16:48:58.7189022Z configure: creating ./fmt_registers.h
2022-05-13T16:49:13.3873388Z 
2022-05-13T16:49:13.3876432Z Configured for building John the Ripper jumbo:
2022-05-13T16:49:13.3877118Z 
2022-05-13T16:49:13.3877804Z Target CPU ......................................... x86_64 SSE4.1, 64-bit LE
2022-05-13T16:49:13.3879453Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T16:49:13.3880889Z Target OS .......................................... cygwin
2022-05-13T16:49:13.3882328Z Cross compiling .................................... no
2022-05-13T16:49:13.3883559Z Legacy arch header ................................. x86-64.h
2022-05-13T16:49:13.3884310Z 
2022-05-13T16:49:13.3885678Z Optional libraries/features found:
2022-05-13T16:49:13.3886648Z Memory map (share/page large files) ................ yes
2022-05-13T16:49:13.3887786Z Fork support ....................................... yes
2022-05-13T16:49:13.3888665Z OpenMP support ..................................... no
2022-05-13T16:49:13.3889416Z OpenCL support ..................................... yes
2022-05-13T16:49:13.3890179Z Generic crypt(3) format ............................ yes
2022-05-13T16:49:13.3890953Z OpenSSL (many additional formats) .................. yes
2022-05-13T16:49:13.3891704Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T16:49:13.3892418Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T16:49:13.3894264Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T16:49:13.3895997Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T16:49:13.3896748Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T16:49:13.3897422Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T16:49:13.3898143Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T16:49:13.3898873Z OpenMPI support (default disabled) ................. no
2022-05-13T16:49:13.3899586Z Experimental code (default disabled) ............... no
2022-05-13T16:49:13.3900253Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T16:49:13.3900623Z 
2022-05-13T16:49:13.3901232Z Install missing libraries to get any needed features that were omitted.
2022-05-13T16:49:13.3901669Z 
2022-05-13T16:49:13.3902174Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T16:50:58.5677749Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T16:50:58.5684350Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:58.5685703Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.5686674Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.5687610Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.5689215Z       |                         ^~~~
2022-05-13T16:50:58.5690208Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:58.5691223Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.5692305Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.5693284Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.5694399Z       |                         ^~~~
2022-05-13T16:50:58.5695157Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:50:58.5696982Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:58.5697907Z       | ^~~~~~~~~~~~
2022-05-13T16:50:58.6123621Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T16:50:58.6125620Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:58.6126789Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:58.6127799Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.6128580Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.6129226Z       |                         ^~~~
2022-05-13T16:50:58.6129978Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:58.6130839Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:58.6131569Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.6132380Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.6133002Z       |                         ^~~~
2022-05-13T16:50:58.6134542Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:50:58.6135552Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:58.6136295Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:50:58.6514869Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T16:50:58.6516785Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:50:58.6518458Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:50:58.6519494Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.6522074Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.6523033Z       |                         ^~~~
2022-05-13T16:50:58.6523887Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:58.6524994Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:50:58.6525931Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.6526844Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.6527581Z       |                         ^~~~
2022-05-13T16:50:58.6528440Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:50:58.6529445Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:50:58.6530260Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:50:58.7658835Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T16:50:58.7660829Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:58.7662309Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.7730247Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.7731893Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:50:58.7733552Z       |                 ^~~~
2022-05-13T16:50:58.7735167Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:58.7736110Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.7737022Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.7738154Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:50:58.7738935Z       |                 ^~~~
2022-05-13T16:50:58.7739673Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:50:58.7740671Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:58.7742588Z       | ^~~~~~~~~~~~
2022-05-13T16:50:58.8579935Z In function ‘ripemd_addbits_and_close’,
2022-05-13T16:50:58.8581890Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T16:50:58.8584125Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T16:50:58.8585597Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:58.8591712Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.8593814Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.8594828Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.8595603Z       |                 ^~~~
2022-05-13T16:50:58.8596442Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T16:50:58.8597468Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:58.8598462Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.8599383Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.8600354Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.8601068Z       |                 ^~~~
2022-05-13T16:50:58.8601916Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:50:58.8608879Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:58.8609855Z       | ^~~~~~~~~~~~
2022-05-13T16:50:58.8611389Z In function ‘ripemd_addbits_and_close’,
2022-05-13T16:50:58.8612516Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T16:50:58.8614855Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T16:50:58.8616029Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:58.8617106Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.8618022Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.8618868Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.8619877Z       |         ^~~~
2022-05-13T16:50:58.8624643Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T16:50:58.8625886Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:58.8626914Z   276 | #define RFUN   ripemd_round
2022-05-13T16:50:58.8627776Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:58.8628724Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:58.8629464Z       |         ^~~~
2022-05-13T16:50:58.8631450Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T16:50:58.8632730Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:58.8635029Z       | ^~~~~~~~~~~~
2022-05-13T16:50:59.4270755Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T16:50:59.4273406Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:59.4275359Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:59.4276664Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:59.4277806Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:50:59.4278847Z       |                 ^~~~
2022-05-13T16:50:59.4280037Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:59.4281390Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:59.4283002Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:59.4284137Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:50:59.4285075Z       |                 ^~~~
2022-05-13T16:50:59.4286128Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:50:59.4287302Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:59.4288435Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:50:59.5337475Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T16:50:59.5339237Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T16:50:59.5340477Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T16:50:59.5341645Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:59.5342974Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:59.5343927Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:59.5345377Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:59.5346119Z       |                 ^~~~
2022-05-13T16:50:59.5346897Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T16:50:59.5348014Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:59.5349055Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:59.5350005Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:59.5350857Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:59.5351564Z       |                 ^~~~
2022-05-13T16:50:59.5352517Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:50:59.5353552Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:59.5354424Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:50:59.5355270Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T16:50:59.5356242Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T16:50:59.5357298Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T16:50:59.5358576Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:50:59.5359682Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:59.5360778Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:59.5361639Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:59.5362538Z       |         ^~~~
2022-05-13T16:50:59.5363367Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T16:50:59.5364448Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:50:59.5365666Z   600 | #define RFUN   ripemd128_round
2022-05-13T16:50:59.5366603Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:50:59.5367511Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:50:59.5368217Z       |         ^~~~
2022-05-13T16:50:59.5369020Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T16:50:59.5370018Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T16:50:59.5370916Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:51:00.2120616Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T16:51:00.2123733Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:51:00.2125048Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:51:00.2125956Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:51:00.2126786Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:51:00.2127614Z       |                 ^~~~
2022-05-13T16:51:00.2128536Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:51:00.2129543Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:51:00.2130436Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:51:00.2132635Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T16:51:00.2134546Z       |                 ^~~~
2022-05-13T16:51:00.2135437Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:51:00.2136336Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:51:00.2137139Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:51:00.3717678Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T16:51:00.3719285Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T16:51:00.3720429Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T16:51:00.3721673Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:51:00.3723019Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:51:00.3723900Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:51:00.3724808Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:51:00.3725558Z       |                 ^~~~
2022-05-13T16:51:00.3727880Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T16:51:00.3729220Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:51:00.3730287Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:51:00.3731146Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T16:51:00.3732265Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T16:51:00.3733111Z       |                 ^~~~
2022-05-13T16:51:00.3733913Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:51:00.3734947Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:51:00.3735814Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:51:00.3736660Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T16:51:00.3737579Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T16:51:00.3739792Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T16:51:00.3740948Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:51:00.3742700Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:51:00.3743496Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:51:00.3753539Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:51:00.3754411Z       |         ^~~~
2022-05-13T16:51:00.3755330Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T16:51:00.3756388Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T16:51:00.3758103Z   626 | #define RFUN   ripemd256_round
2022-05-13T16:51:00.3759015Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T16:51:00.3763532Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T16:51:00.3764102Z       |         ^~~~
2022-05-13T16:51:00.3764806Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T16:51:00.3765691Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T16:51:00.3766403Z       | ^~~~~~~~~~~~~~~
2022-05-13T16:52:09.8010769Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:52:09.8013149Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8015620Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:52:09.8017419Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8018338Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T16:52:09.8019107Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8019935Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T16:52:09.8020799Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8022642Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:52:09.8023708Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8026100Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:52:09.8028400Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8029787Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:52:09.8031098Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8032323Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:52:09.8033212Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:52:09.8034146Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:52:09.8035684Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:52:09.8037904Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8039120Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8040327Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:52:09.8041337Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8042185Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T16:52:09.8043026Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8043717Z   366 |                                         keys,
2022-05-13T16:52:09.8044378Z       |                                         ~~~~~
2022-05-13T16:52:09.8045125Z   367 |                                         lens, cur_salt->salt,
2022-05-13T16:52:09.8046122Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8047464Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T16:52:09.8048243Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8049329Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:52:09.8050760Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8052076Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:52:09.8053620Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8054817Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:52:09.8056048Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:52:09.8057686Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:52:09.8058808Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:52:09.8059848Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8061036Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8062194Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T16:52:09.8063188Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8064126Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T16:52:09.8065061Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8066047Z   374 |                                         keys,
2022-05-13T16:52:09.8067361Z       |                                         ~~~~~
2022-05-13T16:52:09.8068161Z   375 |                                         lens, cur_salt->salt,
2022-05-13T16:52:09.8069954Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8072160Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T16:52:09.8073547Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:52:09.8074895Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:52:09.8076527Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8078117Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:52:09.8079466Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:52:09.8080794Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:52:09.8081821Z In file included from bks_fmt_plug.c:31:
2022-05-13T16:52:09.8082713Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:52:09.8083892Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:52:09.8084879Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9647824Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:53:47.9650082Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:53:47.9651569Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:53:47.9654168Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9656141Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:53:47.9657023Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9657955Z   225 |                                         lens, cur_salt->salt,
2022-05-13T16:53:47.9658756Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9660461Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:53:47.9663028Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9665034Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:53:47.9668267Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:53:47.9671894Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:53:47.9673372Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:53:47.9681289Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:53:47.9682317Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:53:47.9683850Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:53:47.9684768Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:53:47.9686227Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9687220Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:53:47.9688252Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:53:47.9689591Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9690400Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:53:47.9691189Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9692399Z   247 |                                         lens, cur_salt->salt,
2022-05-13T16:53:47.9693753Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9694490Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:53:47.9695295Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9696815Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:53:47.9697966Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:53:47.9699606Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:53:47.9701113Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:53:47.9702250Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:53:47.9703311Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:53:47.9704293Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:53:47.9705534Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:53:47.9707226Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9708241Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:53:47.9709443Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T16:53:47.9710408Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9711197Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:53:47.9711985Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9712703Z   270 |                                         lens, cur_salt->salt,
2022-05-13T16:53:47.9713401Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9714102Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T16:53:47.9714868Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:53:47.9715718Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:53:47.9717292Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:53:47.9718326Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:53:47.9719526Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T16:53:47.9720523Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:53:47.9722601Z In file included from pfx_fmt_plug.c:33:
2022-05-13T16:53:47.9723506Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:53:47.9724400Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:53:47.9725266Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8960574Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:54:17.8962862Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:17.8964391Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T16:54:17.8965353Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8966604Z   117 |                                 cur_salt->iterations,
2022-05-13T16:54:17.8967560Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8968488Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T16:54:17.8969643Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8971119Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T16:54:17.8972785Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8974033Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:54:17.8975577Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:17.8977070Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:54:17.8978558Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:17.8980299Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:54:17.8982702Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T16:54:17.8983819Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:54:17.8985077Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:54:17.8986455Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8987666Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:17.8988877Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T16:54:17.8989757Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8990764Z   122 |                                 cur_salt->iterations,
2022-05-13T16:54:17.8991610Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8992483Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T16:54:17.8993595Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8994627Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T16:54:17.8995625Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:17.8996704Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:54:17.8998070Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:17.8999457Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:54:17.9001095Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:17.9002415Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:54:17.9003394Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T16:54:17.9004433Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:54:17.9005628Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:54:17.9006961Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3450692Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T16:54:46.3454562Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:46.3456201Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T16:54:46.3457745Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3459043Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:54:46.3460176Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3464523Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T16:54:46.3465794Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3466806Z   138 |                                                    salt_len, mackey,
2022-05-13T16:54:46.3468149Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3470526Z   139 |                                                    BINARY_SIZE);
2022-05-13T16:54:46.3471616Z       |                                                    ~~~~~~~~~~~~
2022-05-13T16:54:46.3473274Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:54:46.3475846Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:46.3479179Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:54:46.3481208Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:46.3483035Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:54:46.3484759Z In file included from zed_fmt_plug.c:30:
2022-05-13T16:54:46.3486808Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:54:46.3488533Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:54:46.3489404Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3493642Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:46.3496068Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T16:54:46.3497025Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3498591Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T16:54:46.3499430Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3500273Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T16:54:46.3501139Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3501985Z   153 |                                                    salt_len, mackey,
2022-05-13T16:54:46.3502648Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T16:54:46.3503391Z   154 |                                                    BINARY_SIZE);
2022-05-13T16:54:46.3504902Z       |                                                    ~~~~~~~~~~~~
2022-05-13T16:54:46.3506515Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T16:54:46.3508285Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:46.3509585Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T16:54:46.3511720Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T16:54:46.3512846Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T16:54:46.3514288Z In file included from zed_fmt_plug.c:30:
2022-05-13T16:54:46.3515130Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T16:54:46.3516131Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T16:54:46.3516977Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T16:55:24.1512962Z In file included from subsets.c:25:
2022-05-13T16:55:24.1514832Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T16:55:24.1518409Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T16:55:24.1519497Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T16:55:24.1524106Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T16:57:23.0985727Z ar: creating aes.a
2022-05-13T16:57:36.5250740Z ar: creating secp256k1.a
2022-05-13T16:57:45.7671284Z ar: creating ed25519-donna.a
2022-05-13T16:57:46.4509036Z ar: creating poly1305-donna.a
2022-05-13T16:58:28.7021996Z 
2022-05-13T16:58:28.7366183Z Make process completed.
2022-05-13T16:58:30.4378605Z 
2022-05-13T16:58:30.4687065Z Make process completed.
2022-05-13T16:58:30.4984794Z Stripping executables.
2022-05-13T16:58:31.3333680Z Executing './configure --disable-native-tests --enable-simd=sse4.1 CPPFLAGS='-DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-sse41-non-omp\\\"\" -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-sse2\\\"\" '  && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-sse41'
2022-05-13T16:58:34.6287541Z checking build system type... x86_64-unknown-cygwin
2022-05-13T16:58:34.6309351Z checking host system type... x86_64-unknown-cygwin
2022-05-13T16:58:34.6532216Z checking whether to compile using MPI... no
2022-05-13T16:58:34.6580576Z checking for gcc... gcc
2022-05-13T16:58:35.5572307Z checking whether the C compiler works... yes
2022-05-13T16:58:35.5574551Z checking for C compiler default output file name... a.exe
2022-05-13T16:58:35.9950118Z checking for suffix of executables... .exe
2022-05-13T16:58:36.4766267Z checking whether we are cross compiling... no
2022-05-13T16:58:36.7488664Z checking for suffix of object files... o
2022-05-13T16:58:36.9544942Z checking whether we are using the GNU C compiler... yes
2022-05-13T16:58:37.1867382Z checking whether gcc accepts -g... yes
2022-05-13T16:58:37.4783033Z checking for gcc option to accept ISO C89... none needed
2022-05-13T16:58:37.7686835Z checking whether gcc understands -c and -o together... yes
2022-05-13T16:58:38.2336883Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T16:58:38.2338365Z checking whether gcc accepts -g... (cached) yes
2022-05-13T16:58:38.2340860Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T16:58:38.2344436Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T16:58:38.2374690Z checking additional paths...  -L/usr/local/lib
2022-05-13T16:58:39.2086851Z checking arg check macro for -m with gcc... yes
2022-05-13T16:58:39.5318995Z checking arg check macro for -Q with gcc... yes
2022-05-13T16:58:39.7331772Z checking if gcc supports -funroll-loops... yes
2022-05-13T16:58:39.9626743Z checking if gcc supports -Os... yes
2022-05-13T16:58:40.3717505Z checking if gcc supports -finline-functions... yes
2022-05-13T16:58:40.6264564Z checking if gcc supports -Og... yes
2022-05-13T16:58:40.8451630Z checking if gcc supports -Wall... yes
2022-05-13T16:58:41.0615530Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T16:58:41.2700860Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T16:58:41.4972530Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T16:58:41.9177939Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T16:58:42.1653187Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T16:58:42.5329276Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T16:58:42.7318670Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T16:58:43.0861596Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T16:58:43.3031754Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T16:58:43.6043760Z checking if gcc supports -Qunused-arguments... no
2022-05-13T16:58:43.8190561Z checking if gcc supports -std=gnu89... yes
2022-05-13T16:58:44.0376508Z checking if gcc supports -Wdate-time... yes
2022-05-13T16:58:44.5187689Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T16:58:44.9509559Z checking for 32/64 bit... 64-bit
2022-05-13T16:58:44.9759722Z checking additional paths (64 bit)... none
2022-05-13T16:58:44.9762840Z checking whether ln -s works... yes
2022-05-13T16:58:45.0267048Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T16:58:45.1086911Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T16:58:45.2129392Z checking for GNU make... make
2022-05-13T16:58:45.3920072Z checking whether make sets $(MAKE)... yes
2022-05-13T16:58:45.7824995Z checking how to run the C preprocessor... gcc -E
2022-05-13T16:58:46.2057332Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T16:58:46.4697696Z checking for sort... /usr/bin/sort
2022-05-13T16:58:46.4707083Z checking for find... /usr/bin/find
2022-05-13T16:58:46.4715661Z checking for perl... /usr/bin/perl
2022-05-13T16:58:46.4728275Z checking for ar... ar
2022-05-13T16:58:46.4764281Z checking for strip... strip
2022-05-13T16:58:46.4765434Z checking for strings... strings
2022-05-13T16:58:46.4766521Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T16:58:46.4968090Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T16:58:46.4970291Z checking if pkg-config will be used... no
2022-05-13T16:58:46.5490123Z checking for egrep... /usr/bin/grep -E
2022-05-13T16:58:47.6636668Z checking for ANSI C header files... yes
2022-05-13T16:58:47.9705940Z checking for sys/types.h... yes
2022-05-13T16:58:48.4092173Z checking for sys/stat.h... yes
2022-05-13T16:58:48.8138802Z checking for stdlib.h... yes
2022-05-13T16:58:49.2532302Z checking for string.h... yes
2022-05-13T16:58:49.6705058Z checking for memory.h... yes
2022-05-13T16:58:50.0603208Z checking for strings.h... yes
2022-05-13T16:58:50.4703405Z checking for inttypes.h... yes
2022-05-13T16:58:50.9014365Z checking for stdint.h... yes
2022-05-13T16:58:51.3091064Z checking for unistd.h... yes
2022-05-13T16:58:52.0110202Z checking size of short... 2
2022-05-13T16:58:52.6130192Z checking size of int... 4
2022-05-13T16:58:53.2704973Z checking size of long... 8
2022-05-13T16:58:53.8834172Z checking size of long long... 8
2022-05-13T16:58:54.5309789Z checking size of wchar_t... 2
2022-05-13T16:58:55.1633760Z checking size of int *... 8
2022-05-13T16:58:55.8018638Z checking size of void *... 8
2022-05-13T16:58:55.8798767Z configure: Trying to force SSE4.1 using default method (--enable-simd=sse4.1).
2022-05-13T16:58:56.3127225Z checking if gcc supports -msse4.1 w/ linking... yes
2022-05-13T16:58:56.8351809Z checking for extra ASFLAGS... None needed
2022-05-13T16:58:57.1033571Z checking for X32 ABI... no
2022-05-13T16:58:57.1295851Z checking special compiler flags... Intel x86
2022-05-13T16:58:57.1297344Z configure: Testing tool-chain's CPU support with given options
2022-05-13T16:58:57.5580363Z checking for MMX... yes
2022-05-13T16:58:58.1088718Z checking for SSE2... yes
2022-05-13T16:58:58.6419979Z checking for SSSE3... yes
2022-05-13T16:58:59.2170245Z checking for SSE4.1... yes
2022-05-13T16:58:59.6818876Z checking for SSE4.2... no
2022-05-13T16:58:59.7033653Z checking for arch.h alternative... x86-64.h
2022-05-13T16:58:59.7069614Z checking for byte ordering according to target triple... little
2022-05-13T16:58:59.7070982Z checking supplied paths for OpenSSL...  
2022-05-13T16:58:59.7071770Z checking additional paths for OpenSSL... none
2022-05-13T16:58:59.9798301Z checking openssl/opensslv.h usability... yes
2022-05-13T16:59:00.1231558Z checking openssl/opensslv.h presence... yes
2022-05-13T16:59:00.1233447Z checking for openssl/opensslv.h... yes
2022-05-13T16:59:00.5512731Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T16:59:00.9845895Z checking for MD5_Update in -lcrypto... yes
2022-05-13T16:59:00.9880215Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T16:59:01.6101866Z checking for sqrt in -lm... yes
2022-05-13T16:59:02.0673400Z checking for clock_gettime in -lrt... yes
2022-05-13T16:59:02.5554700Z checking for deflate in -lz... yes
2022-05-13T16:59:03.5323130Z checking for library containing crypt... -lcrypt
2022-05-13T16:59:03.8697760Z checking gmp.h usability... yes
2022-05-13T16:59:04.0275361Z checking gmp.h presence... yes
2022-05-13T16:59:04.0284078Z checking for gmp.h... yes
2022-05-13T16:59:04.5350775Z checking for __gmpz_init in -lgmp... yes
2022-05-13T16:59:04.8714400Z checking skey.h usability... no
2022-05-13T16:59:05.1144831Z checking skey.h presence... no
2022-05-13T16:59:05.1146214Z checking for skey.h... no
2022-05-13T16:59:05.1151994Z checking for S/Key... using our own code
2022-05-13T16:59:05.3553633Z checking bzlib.h usability... yes
2022-05-13T16:59:05.5212243Z checking bzlib.h presence... yes
2022-05-13T16:59:05.5215168Z checking for bzlib.h... yes
2022-05-13T16:59:05.9664674Z checking for main in -lbz2... yes
2022-05-13T16:59:06.4874837Z checking for main in -lkernel32... yes
2022-05-13T16:59:07.0100875Z checking for dlopen in -ldl... yes
2022-05-13T16:59:08.6461546Z checking intrin.h usability... yes
2022-05-13T16:59:09.1348367Z checking intrin.h presence... yes
2022-05-13T16:59:09.1349850Z checking for intrin.h... yes
2022-05-13T16:59:09.4988577Z checking openssl/cmac.h usability... yes
2022-05-13T16:59:09.7677933Z checking openssl/cmac.h presence... yes
2022-05-13T16:59:09.7679666Z checking for openssl/cmac.h... yes
2022-05-13T16:59:09.7993498Z configure: rexgen check not enabled
2022-05-13T16:59:10.2275774Z checking pcap.h usability... no
2022-05-13T16:59:10.4808377Z checking pcap.h presence... no
2022-05-13T16:59:10.4810406Z checking for pcap.h... no
2022-05-13T16:59:10.9413091Z checking pcap/pcap.h usability... no
2022-05-13T16:59:11.1892663Z checking pcap/pcap.h presence... no
2022-05-13T16:59:11.1894348Z checking for pcap/pcap.h... no
2022-05-13T16:59:11.2526469Z checking for pcap.h... (cached) no
2022-05-13T16:59:11.3138063Z checking for pcap/pcap.h... (cached) no
2022-05-13T16:59:11.5810143Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T16:59:11.8157506Z checking whether string.h and strings.h may both be included... yes
2022-05-13T16:59:12.3667548Z checking for SHA256... yes
2022-05-13T16:59:12.9774310Z checking for WHIRLPOOL... yes
2022-05-13T16:59:13.5865020Z checking for RIPEMD160... yes
2022-05-13T16:59:14.2068692Z checking for AES_encrypt... yes
2022-05-13T16:59:14.8170959Z checking for DSA_get0_pqg... yes
2022-05-13T16:59:15.8789179Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T16:59:15.8796041Z checking additional paths for OpenCL... none
2022-05-13T16:59:16.1572586Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T16:59:16.9042523Z checking for the pthreads library -lpthreads... no
2022-05-13T16:59:17.4448798Z checking whether pthreads work without any flags... yes
2022-05-13T16:59:17.9184364Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T16:59:17.9187153Z checking if more special flags are required for pthreads... no
2022-05-13T16:59:18.2784201Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T16:59:18.5614295Z checking whether we are using the Microsoft C compiler... no
2022-05-13T16:59:18.9913838Z checking CL/cl.h usability... yes
2022-05-13T16:59:19.1914782Z checking CL/cl.h presence... yes
2022-05-13T16:59:19.1916052Z checking for CL/cl.h... yes
2022-05-13T16:59:19.7283052Z checking OpenCL/cl.h usability... no
2022-05-13T16:59:20.0274382Z checking OpenCL/cl.h presence... no
2022-05-13T16:59:20.0278545Z checking for OpenCL/cl.h... no
2022-05-13T16:59:22.8682831Z checking windows.h usability... yes
2022-05-13T16:59:24.2519583Z checking windows.h presence... yes
2022-05-13T16:59:24.2522069Z checking for windows.h... yes
2022-05-13T16:59:24.7989515Z checking for OpenCL library... -lOpenCL
2022-05-13T16:59:25.1583184Z checking arpa/inet.h usability... yes
2022-05-13T16:59:25.3300001Z checking arpa/inet.h presence... yes
2022-05-13T16:59:25.3313300Z checking for arpa/inet.h... yes
2022-05-13T16:59:25.7547426Z checking crypt.h usability... yes
2022-05-13T16:59:25.8908109Z checking crypt.h presence... yes
2022-05-13T16:59:25.8909287Z checking for crypt.h... yes
2022-05-13T16:59:26.3247389Z checking dirent.h usability... yes
2022-05-13T16:59:26.4977294Z checking dirent.h presence... yes
2022-05-13T16:59:26.4979037Z checking for dirent.h... yes
2022-05-13T16:59:26.9458364Z checking limits.h usability... yes
2022-05-13T16:59:27.0821468Z checking limits.h presence... yes
2022-05-13T16:59:27.0822881Z checking for limits.h... yes
2022-05-13T16:59:27.4971315Z checking locale.h usability... yes
2022-05-13T16:59:27.6504592Z checking locale.h presence... yes
2022-05-13T16:59:27.6506830Z checking for locale.h... yes
2022-05-13T16:59:28.1176712Z checking malloc.h usability... yes
2022-05-13T16:59:28.2729181Z checking malloc.h presence... yes
2022-05-13T16:59:28.2730462Z checking for malloc.h... yes
2022-05-13T16:59:28.7650482Z checking net/ethernet.h usability... no
2022-05-13T16:59:29.0110787Z checking net/ethernet.h presence... no
2022-05-13T16:59:29.0112256Z checking for net/ethernet.h... no
2022-05-13T16:59:29.3650825Z checking netdb.h usability... yes
2022-05-13T16:59:29.5317794Z checking netdb.h presence... yes
2022-05-13T16:59:29.5319986Z checking for netdb.h... yes
2022-05-13T16:59:30.0037206Z checking netinet/in.h usability... yes
2022-05-13T16:59:30.1604821Z checking netinet/in.h presence... yes
2022-05-13T16:59:30.1606391Z checking for netinet/in.h... yes
2022-05-13T16:59:30.6120436Z checking netinet/in_systm.h usability... yes
2022-05-13T16:59:30.7647841Z checking netinet/in_systm.h presence... yes
2022-05-13T16:59:30.7649282Z checking for netinet/in_systm.h... yes
2022-05-13T16:59:30.9232024Z checking for string.h... (cached) yes
2022-05-13T16:59:31.0620605Z checking for strings.h... (cached) yes
2022-05-13T16:59:31.5599206Z checking sys/ethernet.h usability... no
2022-05-13T16:59:31.8310164Z checking sys/ethernet.h presence... no
2022-05-13T16:59:31.8312633Z checking for sys/ethernet.h... no
2022-05-13T16:59:32.1863711Z checking sys/file.h usability... yes
2022-05-13T16:59:32.3452803Z checking sys/file.h presence... yes
2022-05-13T16:59:32.3454953Z checking for sys/file.h... yes
2022-05-13T16:59:32.7730725Z checking sys/param.h usability... yes
2022-05-13T16:59:32.9159240Z checking sys/param.h presence... yes
2022-05-13T16:59:32.9171489Z checking for sys/param.h... yes
2022-05-13T16:59:33.3625140Z checking sys/socket.h usability... yes
2022-05-13T16:59:33.5134281Z checking sys/socket.h presence... yes
2022-05-13T16:59:33.5136813Z checking for sys/socket.h... yes
2022-05-13T16:59:33.9075730Z checking sys/time.h usability... yes
2022-05-13T16:59:34.0706479Z checking sys/time.h presence... yes
2022-05-13T16:59:34.0708233Z checking for sys/time.h... yes
2022-05-13T16:59:34.4844651Z checking sys/times.h usability... yes
2022-05-13T16:59:34.6223385Z checking sys/times.h presence... yes
2022-05-13T16:59:34.6226118Z checking for sys/times.h... yes
2022-05-13T16:59:34.7831422Z checking for sys/types.h... (cached) yes
2022-05-13T16:59:35.1945714Z checking termios.h usability... yes
2022-05-13T16:59:35.3438019Z checking termios.h presence... yes
2022-05-13T16:59:35.3439377Z checking for termios.h... yes
2022-05-13T16:59:35.5100872Z checking for unistd.h... (cached) yes
2022-05-13T16:59:36.0656720Z checking unixlib/local.h usability... no
2022-05-13T16:59:36.3123597Z checking unixlib/local.h presence... no
2022-05-13T16:59:36.3125647Z checking for unixlib/local.h... no
2022-05-13T16:59:36.3771501Z checking for windows.h... (cached) yes
2022-05-13T16:59:36.6656397Z checking for net/if.h... yes
2022-05-13T16:59:37.0120678Z checking for net/if_arp.h... no
2022-05-13T16:59:37.3578763Z checking for netinet/if_ether.h... no
2022-05-13T16:59:37.5793881Z checking for netinet/ip.h... yes
2022-05-13T16:59:38.1474888Z checking for stdbool.h that conforms to C99... yes
2022-05-13T16:59:38.8880487Z checking for _Bool... yes
2022-05-13T16:59:39.1182751Z checking for inline... inline
2022-05-13T16:59:39.7393224Z checking for int32_t... yes
2022-05-13T16:59:40.3973884Z checking for int64_t... yes
2022-05-13T16:59:41.0717203Z checking for off_t... yes
2022-05-13T16:59:41.7391650Z checking for size_t... yes
2022-05-13T16:59:42.3988192Z checking for ssize_t... yes
2022-05-13T16:59:42.7135517Z checking for uint16_t... yes
2022-05-13T16:59:43.0596899Z checking for uint32_t... yes
2022-05-13T16:59:43.4156134Z checking for uint64_t... yes
2022-05-13T16:59:43.7144659Z checking for uint8_t... yes
2022-05-13T16:59:44.3467848Z checking for ptrdiff_t... yes
2022-05-13T16:59:44.7241094Z checking for int128... no
2022-05-13T16:59:45.3465652Z checking for __int128... yes
2022-05-13T16:59:46.0126663Z checking for __int128_t... yes
2022-05-13T16:59:46.4477297Z checking for error_at_line... yes
2022-05-13T16:59:47.0716695Z checking for pid_t... yes
2022-05-13T16:59:47.4069977Z checking vfork.h usability... no
2022-05-13T16:59:47.6397525Z checking vfork.h presence... no
2022-05-13T16:59:47.6400124Z checking for vfork.h... no
2022-05-13T16:59:48.2164010Z checking for fork... yes
2022-05-13T16:59:48.7931824Z checking for vfork... yes
2022-05-13T16:59:49.3779875Z checking for working fork... yes
2022-05-13T16:59:49.3781231Z checking for working vfork... (cached) yes
2022-05-13T16:59:50.0213097Z checking for fseek64... no
2022-05-13T16:59:50.5000943Z checking for fseeko... yes
2022-05-13T16:59:51.1965736Z checking for fseeko64... no
2022-05-13T16:59:51.7929624Z checking for _fseeki64... no
2022-05-13T16:59:52.4074013Z checking for lseek64... no
2022-05-13T16:59:52.9557160Z checking for lseek... yes
2022-05-13T16:59:53.6404425Z checking for ftell64... no
2022-05-13T16:59:54.1991421Z checking for ftello... yes
2022-05-13T16:59:54.8782954Z checking for ftello64... no
2022-05-13T16:59:55.4679918Z checking for _ftelli64... no
2022-05-13T16:59:56.1047879Z checking for fopen64... no
2022-05-13T16:59:56.7168420Z checking for _fopen64... no
2022-05-13T16:59:57.2052701Z checking for memmem... yes
2022-05-13T16:59:57.8122348Z checking for mmap... yes
2022-05-13T16:59:58.3993002Z checking for sleep... yes
2022-05-13T16:59:59.0133039Z checking for setenv... yes
2022-05-13T16:59:59.6556792Z checking for putenv... yes
2022-05-13T17:00:00.3621345Z checking for strcasecmp... yes
2022-05-13T17:00:01.0356827Z checking for strncasecmp... yes
2022-05-13T17:00:01.7430372Z checking for stricmp... no
2022-05-13T17:00:02.3548813Z checking for strcmpi... no
2022-05-13T17:00:02.9612889Z checking for _stricmp... no
2022-05-13T17:00:03.5853395Z checking for _strcmpi... no
2022-05-13T17:00:04.2182030Z checking for strnicmp... no
2022-05-13T17:00:04.8087159Z checking for strncmpi... no
2022-05-13T17:00:05.4054691Z checking for _strnicmp... no
2022-05-13T17:00:06.0075930Z checking for _strncmpi... no
2022-05-13T17:00:06.6033297Z checking for strnlen... yes
2022-05-13T17:00:07.1947180Z checking for strlwr... yes
2022-05-13T17:00:07.7815381Z checking for strupr... yes
2022-05-13T17:00:08.4809498Z checking for strrev... no
2022-05-13T17:00:08.9709638Z checking for atoll... yes
2022-05-13T17:00:10.0270146Z checking for _atoi64... no
2022-05-13T17:00:10.2998148Z checking for snprintf... yes
2022-05-13T17:00:10.9651914Z checking for sprintf_s... no
2022-05-13T17:00:11.4392734Z checking for strcasestr... yes
2022-05-13T17:00:11.9945831Z checking for clGetKernelArgInfo... yes
2022-05-13T17:00:12.5649962Z checking for posix_memalign... yes
2022-05-13T17:00:13.1038402Z checking for yasm that supports "-f win64"... 
2022-05-13T17:00:13.1054529Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T17:00:13.5226385Z checking for _get_osfhandle... yes
2022-05-13T17:00:16.5322968Z checking for GetFileSizeEx... yes
2022-05-13T17:00:16.5580170Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T17:00:17.1228774Z checking size of size_t... 8
2022-05-13T17:00:17.6992321Z checking size of off_t... 8
2022-05-13T17:00:17.7487079Z configure: Fuzz check disabled
2022-05-13T17:00:17.7488824Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T17:00:17.7601012Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T17:00:17.8759453Z configure: creating Makefile dependencies
2022-05-13T17:00:20.6000384Z configure: creating ./john_build_rule.h
2022-05-13T17:00:20.9113044Z configure: creating ./config.status
2022-05-13T17:00:22.9245526Z config.status: creating Makefile
2022-05-13T17:00:23.1806570Z config.status: creating aes/Makefile
2022-05-13T17:00:23.5139857Z config.status: creating aes/aesni/Makefile
2022-05-13T17:00:23.8926101Z config.status: creating aes/openssl/Makefile
2022-05-13T17:00:24.2750975Z config.status: creating secp256k1/Makefile
2022-05-13T17:00:24.6418970Z config.status: creating ed25519-donna/Makefile
2022-05-13T17:00:24.9829968Z config.status: creating poly1305-donna/Makefile
2022-05-13T17:00:25.3283838Z config.status: creating autoconfig.h
2022-05-13T17:00:25.4412925Z config.status: autoconfig.h is unchanged
2022-05-13T17:00:25.5137211Z config.status: linking x86-64.h to arch.h
2022-05-13T17:00:25.6014360Z config.status: executing default commands
2022-05-13T17:00:25.6317401Z configure: creating ./fmt_externs.h
2022-05-13T17:00:35.1993171Z configure: creating ./fmt_registers.h
2022-05-13T17:00:47.3309096Z 
2022-05-13T17:00:47.3312029Z Configured for building John the Ripper jumbo:
2022-05-13T17:00:47.3312982Z 
2022-05-13T17:00:47.3314654Z Target CPU ......................................... x86_64 SSE4.1, 64-bit LE
2022-05-13T17:00:47.3317134Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T17:00:47.3318416Z Target OS .......................................... cygwin
2022-05-13T17:00:47.3320656Z Cross compiling .................................... no
2022-05-13T17:00:47.3321574Z Legacy arch header ................................. x86-64.h
2022-05-13T17:00:47.3321967Z 
2022-05-13T17:00:47.3322510Z Optional libraries/features found:
2022-05-13T17:00:47.3323179Z Memory map (share/page large files) ................ yes
2022-05-13T17:00:47.3324174Z Fork support ....................................... yes
2022-05-13T17:00:47.3325150Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T17:00:47.3326156Z OpenCL support ..................................... yes
2022-05-13T17:00:47.3326909Z Generic crypt(3) format ............................ yes
2022-05-13T17:00:47.3327723Z OpenSSL (many additional formats) .................. yes
2022-05-13T17:00:47.3328504Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T17:00:47.3330508Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T17:00:47.3331317Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T17:00:47.3332097Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T17:00:47.3332859Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T17:00:47.3333819Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T17:00:47.3334711Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T17:00:47.3335491Z OpenMPI support (default disabled) ................. no
2022-05-13T17:00:47.3336263Z Experimental code (default disabled) ............... no
2022-05-13T17:00:47.3336974Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T17:00:47.3337562Z 
2022-05-13T17:00:47.3338229Z Install missing libraries to get any needed features that were omitted.
2022-05-13T17:00:47.3338740Z 
2022-05-13T17:00:47.3340569Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T17:02:25.0661178Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T17:02:25.0666467Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.0668510Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.0669659Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.0670720Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.0672171Z       |                         ^~~~
2022-05-13T17:02:25.0674429Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.0676243Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.0677991Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.0679154Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.0679956Z       |                         ^~~~
2022-05-13T17:02:25.0680781Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:02:25.0682015Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.0682687Z       | ^~~~~~~~~~~~
2022-05-13T17:02:25.0984737Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T17:02:25.0988249Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.0989802Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.0990891Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.0991907Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.0992722Z       |                         ^~~~
2022-05-13T17:02:25.0993684Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.0994748Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.0995645Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.0996779Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.0997518Z       |                         ^~~~
2022-05-13T17:02:25.0998393Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:02:25.0999418Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.1000212Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:25.1309096Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T17:02:25.1311319Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:02:25.1312619Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:25.1315094Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.1316383Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.1317235Z       |                         ^~~~
2022-05-13T17:02:25.1318186Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.1319203Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:25.1320095Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.1321022Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.1321754Z       |                         ^~~~
2022-05-13T17:02:25.1322529Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:02:25.1325000Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:02:25.1326902Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:25.2278529Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T17:02:25.2281000Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.2282424Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.2283715Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.2284750Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:02:25.2285491Z       |                 ^~~~
2022-05-13T17:02:25.2286722Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.2287772Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.2289696Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.2290792Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:02:25.2291589Z       |                 ^~~~
2022-05-13T17:02:25.2292457Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:02:25.2293460Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.2294245Z       | ^~~~~~~~~~~~
2022-05-13T17:02:25.3065068Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:02:25.3066755Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:02:25.3068183Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:02:25.3069258Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.3070122Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.3071196Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.3072574Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.3073261Z       |                 ^~~~
2022-05-13T17:02:25.3074023Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:02:25.3074844Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.3075658Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.3076715Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.3077468Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.3078107Z       |                 ^~~~
2022-05-13T17:02:25.3079243Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:02:25.3080278Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.3081200Z       | ^~~~~~~~~~~~
2022-05-13T17:02:25.3081972Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:02:25.3082920Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:02:25.3083823Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:02:25.3084846Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.3085695Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.3086829Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.3087683Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.3088393Z       |         ^~~~
2022-05-13T17:02:25.3089143Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:02:25.3090029Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.3090771Z   276 | #define RFUN   ripemd_round
2022-05-13T17:02:25.3091566Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.3092309Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.3092914Z       |         ^~~~
2022-05-13T17:02:25.3093681Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:02:25.3094493Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.3095177Z       | ^~~~~~~~~~~~
2022-05-13T17:02:25.7697109Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T17:02:25.7724024Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.7725785Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.7726854Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.7727632Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:02:25.7728295Z       |                 ^~~~
2022-05-13T17:02:25.7729668Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.7730579Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.7731374Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.7732119Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:02:25.7732721Z       |                 ^~~~
2022-05-13T17:02:25.7733494Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:02:25.7734282Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.7734913Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:25.8625476Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:02:25.8627624Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:02:25.8628908Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:02:25.8701596Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.8703034Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.8703893Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.8704621Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.8705274Z       |                 ^~~~
2022-05-13T17:02:25.8706538Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:02:25.8707448Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.8708233Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.8710163Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.8711019Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.8711843Z       |                 ^~~~
2022-05-13T17:02:25.8712695Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:02:25.8713596Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.8715178Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:25.8716167Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:02:25.8719514Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:02:25.8723048Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:02:25.8726452Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:02:25.8727848Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.8730119Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.8731018Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.8731698Z       |         ^~~~
2022-05-13T17:02:25.8732409Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:02:25.8733229Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:25.8734030Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:02:25.8734789Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:25.8735512Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:25.8736416Z       |         ^~~~
2022-05-13T17:02:25.8737149Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:02:25.8739102Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:02:25.8739790Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:26.5215423Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T17:02:26.5218333Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:02:26.5219622Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:26.5220615Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:26.5221972Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:02:26.5222777Z       |                 ^~~~
2022-05-13T17:02:26.5223742Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:26.5224806Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:26.5225704Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:26.5226846Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:02:26.5227621Z       |                 ^~~~
2022-05-13T17:02:26.5228458Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:02:26.5229452Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:02:26.5230332Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:26.6013782Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:02:26.6015281Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:02:26.6016599Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:02:26.6017927Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:02:26.6019043Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:26.6019976Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:26.6020846Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:26.6021611Z       |                 ^~~~
2022-05-13T17:02:26.6022438Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:02:26.6023532Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:26.6024905Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:26.6025811Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:26.6026919Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:26.6027639Z       |                 ^~~~
2022-05-13T17:02:26.6028504Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:02:26.6029560Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:02:26.6030455Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:02:26.6031226Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:02:26.6032190Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:02:26.6033290Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:02:26.6034578Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:02:26.6035645Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:26.6036672Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:26.6037639Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:26.6038253Z       |         ^~~~
2022-05-13T17:02:26.6038888Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:02:26.6039810Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:02:26.6040909Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:02:26.6041706Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:02:26.6042612Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:02:26.6043386Z       |         ^~~~
2022-05-13T17:02:26.6044259Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:02:26.6045297Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:02:26.6046268Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:03:23.7665854Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:03:23.7668029Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7669394Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:03:23.7670385Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7672806Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T17:03:23.7673718Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7674550Z   366 |                                         keys,
2022-05-13T17:03:23.7675264Z       |                                         ~~~~~
2022-05-13T17:03:23.7676032Z   367 |                                         lens, cur_salt->salt,
2022-05-13T17:03:23.7676788Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7677737Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T17:03:23.7679552Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7682299Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:03:23.7684008Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7685526Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:03:23.7686932Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7688087Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:03:23.7689081Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:03:23.7689971Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:03:23.7691117Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:03:23.7692125Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7693141Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7694124Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:03:23.7694978Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7695702Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T17:03:23.7696439Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7697117Z   374 |                                         keys,
2022-05-13T17:03:23.7697852Z       |                                         ~~~~~
2022-05-13T17:03:23.7698492Z   375 |                                         lens, cur_salt->salt,
2022-05-13T17:03:23.7699210Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7699976Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T17:03:23.7700891Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7701792Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:03:23.7702797Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7703824Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:03:23.7704870Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7705846Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:03:23.7706626Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:03:23.7707467Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:03:23.7708407Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:03:23.7709230Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7710374Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7711527Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:03:23.7713059Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7713894Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T17:03:23.7714656Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7715337Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T17:03:23.7716072Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7716860Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:03:23.7717643Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:03:23.7718534Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:03:23.7719525Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7720550Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:03:23.7721892Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:03:23.7722881Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:03:23.7723823Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:03:23.7724675Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:03:23.7725608Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:03:23.7726461Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6458153Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:04:42.6460472Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:04:42.6462018Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:04:42.6463318Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6464362Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:04:42.6465297Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6466380Z   270 |                                         lens, cur_salt->salt,
2022-05-13T17:04:42.6467269Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6468216Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:04:42.6469148Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6470264Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:04:42.6471745Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:04:42.6473129Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:04:42.6474671Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:04:42.6476206Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:04:42.6477386Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:04:42.6478468Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:04:42.6480084Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:04:42.6481216Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6482562Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:04:42.6483891Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:04:42.6485028Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6486360Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:04:42.6487351Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6488250Z   247 |                                         lens, cur_salt->salt,
2022-05-13T17:04:42.6489113Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6490017Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:04:42.6490887Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6491799Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:04:42.6492981Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:04:42.6494436Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:04:42.6496626Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:04:42.6497984Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:04:42.6499073Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:04:42.6500122Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:04:42.6501310Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:04:42.6502415Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6503642Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:04:42.6505048Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:04:42.6506444Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6507578Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:04:42.6508584Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6510241Z   225 |                                         lens, cur_salt->salt,
2022-05-13T17:04:42.6511218Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6512145Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:04:42.6513126Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:04:42.6514153Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:04:42.6515536Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:04:42.6517165Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:04:42.6518635Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:04:42.6520907Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:04:42.6522164Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:04:42.6523187Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:04:42.6524420Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:04:42.6525529Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7963902Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:05:06.7966708Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:06.7969284Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:05:06.7970211Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7971020Z   117 |                                 cur_salt->iterations,
2022-05-13T17:05:06.7971901Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7972908Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T17:05:06.7973986Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7976209Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T17:05:06.7977485Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7978694Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:05:06.7980931Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:06.7982950Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:05:06.7984659Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:06.7986243Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:05:06.7988039Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:05:06.7989361Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:05:06.7990938Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:05:06.7992578Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7994370Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:06.7996518Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:05:06.7997543Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.7998441Z   122 |                                 cur_salt->iterations,
2022-05-13T17:05:06.7999241Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.8000190Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T17:05:06.8001217Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.8002312Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T17:05:06.8003331Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:06.8005087Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:05:06.8006635Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:06.8008195Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:05:06.8009910Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:06.8013252Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:05:06.8014383Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:05:06.8015420Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:05:06.8016612Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:05:06.8017859Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.6985252Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:05:32.6988279Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:32.6989969Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:05:32.6991106Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.6992126Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:05:32.6993108Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.6994028Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T17:05:32.6994884Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.6995811Z   153 |                                                    salt_len, mackey,
2022-05-13T17:05:32.6997907Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.6998767Z   154 |                                                    BINARY_SIZE);
2022-05-13T17:05:32.6999789Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:05:32.7000846Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:05:32.7002831Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:32.7004566Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:05:32.7006243Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:32.7007599Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:05:32.7009618Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:05:32.7011468Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:05:32.7013505Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:05:32.7014630Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.7015734Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:32.7016914Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:05:32.7017975Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.7019283Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:05:32.7020200Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.7021111Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T17:05:32.7022612Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.7023519Z   138 |                                                    salt_len, mackey,
2022-05-13T17:05:32.7024531Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:05:32.7025353Z   139 |                                                    BINARY_SIZE);
2022-05-13T17:05:32.7026149Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:05:32.7027139Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:05:32.7028641Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:32.7030049Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:05:32.7031471Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:05:32.7033495Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:05:32.7034548Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:05:32.7035482Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:05:32.7036670Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:05:32.7037716Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:06:06.3402831Z In file included from subsets.c:25:
2022-05-13T17:06:07.0307694Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T17:06:07.0317092Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T17:06:07.0318672Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T17:06:07.0320674Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T17:07:53.9001886Z ar: creating aes.a
2022-05-13T17:08:07.0384990Z ar: creating secp256k1.a
2022-05-13T17:08:15.8004069Z ar: creating ed25519-donna.a
2022-05-13T17:08:16.5155606Z ar: creating poly1305-donna.a
2022-05-13T17:08:53.1902704Z 
2022-05-13T17:08:53.2121265Z Make process completed.
2022-05-13T17:08:54.6397366Z 
2022-05-13T17:08:54.6649812Z Make process completed.
2022-05-13T17:08:54.6876901Z Stripping executables.
2022-05-13T17:08:55.4037472Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=avx    CPPFLAGS='-DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-sse41\\\"\" '                                                                         && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx-non-omp'
2022-05-13T17:08:58.2315272Z checking build system type... x86_64-unknown-cygwin
2022-05-13T17:08:58.2319629Z checking host system type... x86_64-unknown-cygwin
2022-05-13T17:08:58.2453608Z checking whether to compile using MPI... no
2022-05-13T17:08:58.2473259Z checking for gcc... gcc
2022-05-13T17:08:59.0090640Z checking whether the C compiler works... yes
2022-05-13T17:08:59.0093287Z checking for C compiler default output file name... a.exe
2022-05-13T17:08:59.3409835Z checking for suffix of executables... .exe
2022-05-13T17:08:59.7303466Z checking whether we are cross compiling... no
2022-05-13T17:08:59.9574567Z checking for suffix of object files... o
2022-05-13T17:09:00.1507984Z checking whether we are using the GNU C compiler... yes
2022-05-13T17:09:00.3108047Z checking whether gcc accepts -g... yes
2022-05-13T17:09:00.5591971Z checking for gcc option to accept ISO C89... none needed
2022-05-13T17:09:00.8177759Z checking whether gcc understands -c and -o together... yes
2022-05-13T17:09:01.2282703Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T17:09:01.2286089Z checking whether gcc accepts -g... (cached) yes
2022-05-13T17:09:01.2287266Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T17:09:01.2290972Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T17:09:01.2306581Z checking additional paths...  -L/usr/local/lib
2022-05-13T17:09:02.0191699Z checking arg check macro for -m with gcc... yes
2022-05-13T17:09:02.3007106Z checking arg check macro for -Q with gcc... yes
2022-05-13T17:09:02.4601668Z checking if gcc supports -funroll-loops... yes
2022-05-13T17:09:02.6392494Z checking if gcc supports -Os... yes
2022-05-13T17:09:02.9882128Z checking if gcc supports -finline-functions... yes
2022-05-13T17:09:03.1459761Z checking if gcc supports -Og... yes
2022-05-13T17:09:03.2980741Z checking if gcc supports -Wall... yes
2022-05-13T17:09:03.4602372Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T17:09:03.6399938Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T17:09:03.8102058Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T17:09:04.1005502Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T17:09:04.2640938Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T17:09:04.5134151Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T17:09:04.6772208Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T17:09:04.9265074Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T17:09:05.1095961Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T17:09:05.3666059Z checking if gcc supports -Qunused-arguments... no
2022-05-13T17:09:05.5257170Z checking if gcc supports -std=gnu89... yes
2022-05-13T17:09:05.6752292Z checking if gcc supports -Wdate-time... yes
2022-05-13T17:09:06.0032760Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T17:09:06.3588203Z checking for 32/64 bit... 64-bit
2022-05-13T17:09:06.3860139Z checking additional paths (64 bit)... none
2022-05-13T17:09:06.3861170Z checking whether ln -s works... yes
2022-05-13T17:09:06.4290364Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T17:09:06.4896313Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T17:09:06.5760807Z checking for GNU make... make
2022-05-13T17:09:06.7222164Z checking whether make sets $(MAKE)... yes
2022-05-13T17:09:07.0258136Z checking how to run the C preprocessor... gcc -E
2022-05-13T17:09:07.3701242Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T17:09:07.5999049Z checking for sort... /usr/bin/sort
2022-05-13T17:09:07.6000648Z checking for find... /usr/bin/find
2022-05-13T17:09:07.6001514Z checking for perl... /usr/bin/perl
2022-05-13T17:09:07.6002400Z checking for ar... ar
2022-05-13T17:09:07.6013120Z checking for strip... strip
2022-05-13T17:09:07.6025235Z checking for strings... strings
2022-05-13T17:09:07.6037284Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T17:09:07.6226954Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T17:09:07.6232005Z checking if pkg-config will be used... no
2022-05-13T17:09:07.6768057Z checking for egrep... /usr/bin/grep -E
2022-05-13T17:09:08.7102325Z checking for ANSI C header files... yes
2022-05-13T17:09:08.9982091Z checking for sys/types.h... yes
2022-05-13T17:09:09.3678711Z checking for sys/stat.h... yes
2022-05-13T17:09:09.7246892Z checking for stdlib.h... yes
2022-05-13T17:09:10.0806317Z checking for string.h... yes
2022-05-13T17:09:10.4069800Z checking for memory.h... yes
2022-05-13T17:09:10.7807691Z checking for strings.h... yes
2022-05-13T17:09:11.1815067Z checking for inttypes.h... yes
2022-05-13T17:09:11.5725586Z checking for stdint.h... yes
2022-05-13T17:09:12.0454812Z checking for unistd.h... yes
2022-05-13T17:09:12.8694013Z checking size of short... 2
2022-05-13T17:09:13.5952873Z checking size of int... 4
2022-05-13T17:09:14.2579133Z checking size of long... 8
2022-05-13T17:09:14.8292388Z checking size of long long... 8
2022-05-13T17:09:15.4626669Z checking size of wchar_t... 2
2022-05-13T17:09:16.0149266Z checking size of int *... 8
2022-05-13T17:09:16.5399961Z checking size of void *... 8
2022-05-13T17:09:16.6012438Z configure: Trying to force AVX using default method (--enable-simd=avx).
2022-05-13T17:09:16.9501672Z checking if gcc supports -mavx w/ linking... yes
2022-05-13T17:09:17.3548057Z checking for extra ASFLAGS... None needed
2022-05-13T17:09:17.5876776Z checking for X32 ABI... no
2022-05-13T17:09:17.6158347Z checking special compiler flags... Intel x86
2022-05-13T17:09:17.6159946Z configure: Testing tool-chain's CPU support with given options
2022-05-13T17:09:17.9981079Z checking for MMX... yes
2022-05-13T17:09:18.4841038Z checking for SSE2... yes
2022-05-13T17:09:18.9301609Z checking for SSSE3... yes
2022-05-13T17:09:19.3664356Z checking for SSE4.1... yes
2022-05-13T17:09:19.8141777Z checking for SSE4.2... yes
2022-05-13T17:09:21.0321796Z checking for AVX... yes
2022-05-13T17:09:22.2987126Z checking for XOP... no
2022-05-13T17:09:23.3570075Z checking for AVX2... no
2022-05-13T17:09:23.3776257Z checking for arch.h alternative... x86-64.h
2022-05-13T17:09:23.3785970Z checking for byte ordering according to target triple... little
2022-05-13T17:09:23.3798374Z checking supplied paths for OpenSSL...  
2022-05-13T17:09:23.3803330Z checking additional paths for OpenSSL... none
2022-05-13T17:09:23.6019575Z checking openssl/opensslv.h usability... yes
2022-05-13T17:09:23.7049904Z checking openssl/opensslv.h presence... yes
2022-05-13T17:09:23.7052060Z checking for openssl/opensslv.h... yes
2022-05-13T17:09:24.0848759Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T17:09:24.4778069Z checking for MD5_Update in -lcrypto... yes
2022-05-13T17:09:24.4797256Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T17:09:24.9820104Z checking for sqrt in -lm... yes
2022-05-13T17:09:25.5272417Z checking for clock_gettime in -lrt... yes
2022-05-13T17:09:26.0552356Z checking for deflate in -lz... yes
2022-05-13T17:09:27.0645712Z checking for library containing crypt... -lcrypt
2022-05-13T17:09:27.4333392Z checking gmp.h usability... yes
2022-05-13T17:09:27.5820052Z checking gmp.h presence... yes
2022-05-13T17:09:27.5822430Z checking for gmp.h... yes
2022-05-13T17:09:28.1014820Z checking for __gmpz_init in -lgmp... yes
2022-05-13T17:09:28.4821348Z checking skey.h usability... no
2022-05-13T17:09:28.7313182Z checking skey.h presence... no
2022-05-13T17:09:28.7314400Z checking for skey.h... no
2022-05-13T17:09:28.7320868Z checking for S/Key... using our own code
2022-05-13T17:09:29.0027072Z checking bzlib.h usability... yes
2022-05-13T17:09:29.1519467Z checking bzlib.h presence... yes
2022-05-13T17:09:29.1523200Z checking for bzlib.h... yes
2022-05-13T17:09:29.5617162Z checking for main in -lbz2... yes
2022-05-13T17:09:29.9488939Z checking for main in -lkernel32... yes
2022-05-13T17:09:30.3794102Z checking for dlopen in -ldl... yes
2022-05-13T17:09:31.6417897Z checking intrin.h usability... yes
2022-05-13T17:09:32.0493600Z checking intrin.h presence... yes
2022-05-13T17:09:32.0496768Z checking for intrin.h... yes
2022-05-13T17:09:32.3849682Z checking openssl/cmac.h usability... yes
2022-05-13T17:09:32.6065003Z checking openssl/cmac.h presence... yes
2022-05-13T17:09:32.6066901Z checking for openssl/cmac.h... yes
2022-05-13T17:09:32.6339965Z configure: rexgen check not enabled
2022-05-13T17:09:32.9810043Z checking pcap.h usability... no
2022-05-13T17:09:33.1714749Z checking pcap.h presence... no
2022-05-13T17:09:33.1716134Z checking for pcap.h... no
2022-05-13T17:09:33.5052331Z checking pcap/pcap.h usability... no
2022-05-13T17:09:33.7054625Z checking pcap/pcap.h presence... no
2022-05-13T17:09:33.7056967Z checking for pcap/pcap.h... no
2022-05-13T17:09:33.7607972Z checking for pcap.h... (cached) no
2022-05-13T17:09:33.8220081Z checking for pcap/pcap.h... (cached) no
2022-05-13T17:09:34.0423895Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T17:09:34.2402980Z checking whether string.h and strings.h may both be included... yes
2022-05-13T17:09:34.7226886Z checking for SHA256... yes
2022-05-13T17:09:35.3658452Z checking for WHIRLPOOL... yes
2022-05-13T17:09:35.9838049Z checking for RIPEMD160... yes
2022-05-13T17:09:36.5674433Z checking for AES_encrypt... yes
2022-05-13T17:09:37.1315472Z checking for DSA_get0_pqg... yes
2022-05-13T17:09:37.4575840Z checking additional paths for OpenCL... none
2022-05-13T17:09:37.7477260Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T17:09:38.4682046Z checking for the pthreads library -lpthreads... no
2022-05-13T17:09:38.8973122Z checking whether pthreads work without any flags... yes
2022-05-13T17:09:39.2971874Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T17:09:39.2976006Z checking if more special flags are required for pthreads... no
2022-05-13T17:09:39.5958429Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T17:09:39.8510201Z checking whether we are using the Microsoft C compiler... no
2022-05-13T17:09:40.2112488Z checking CL/cl.h usability... yes
2022-05-13T17:09:40.4119919Z checking CL/cl.h presence... yes
2022-05-13T17:09:40.4122665Z checking for CL/cl.h... yes
2022-05-13T17:09:40.8402037Z checking OpenCL/cl.h usability... no
2022-05-13T17:09:41.0622520Z checking OpenCL/cl.h presence... no
2022-05-13T17:09:41.0624463Z checking for OpenCL/cl.h... no
2022-05-13T17:09:43.6458192Z checking windows.h usability... yes
2022-05-13T17:09:44.9290819Z checking windows.h presence... yes
2022-05-13T17:09:44.9292767Z checking for windows.h... yes
2022-05-13T17:09:45.4008407Z checking for OpenCL library... -lOpenCL
2022-05-13T17:09:45.7023341Z checking arpa/inet.h usability... yes
2022-05-13T17:09:45.8508334Z checking arpa/inet.h presence... yes
2022-05-13T17:09:45.8510456Z checking for arpa/inet.h... yes
2022-05-13T17:09:46.2104932Z checking crypt.h usability... yes
2022-05-13T17:09:46.3300320Z checking crypt.h presence... yes
2022-05-13T17:09:46.3301703Z checking for crypt.h... yes
2022-05-13T17:09:46.7069961Z checking dirent.h usability... yes
2022-05-13T17:09:46.8417911Z checking dirent.h presence... yes
2022-05-13T17:09:46.8420042Z checking for dirent.h... yes
2022-05-13T17:09:47.2347952Z checking limits.h usability... yes
2022-05-13T17:09:47.3555299Z checking limits.h presence... yes
2022-05-13T17:09:47.3556988Z checking for limits.h... yes
2022-05-13T17:09:47.7005606Z checking locale.h usability... yes
2022-05-13T17:09:47.8353686Z checking locale.h presence... yes
2022-05-13T17:09:47.8355357Z checking for locale.h... yes
2022-05-13T17:09:48.1977343Z checking malloc.h usability... yes
2022-05-13T17:09:48.3328626Z checking malloc.h presence... yes
2022-05-13T17:09:48.3331658Z checking for malloc.h... yes
2022-05-13T17:09:48.7712735Z checking net/ethernet.h usability... no
2022-05-13T17:09:48.9673133Z checking net/ethernet.h presence... no
2022-05-13T17:09:48.9674884Z checking for net/ethernet.h... no
2022-05-13T17:09:49.2696250Z checking netdb.h usability... yes
2022-05-13T17:09:49.4068983Z checking netdb.h presence... yes
2022-05-13T17:09:49.4070296Z checking for netdb.h... yes
2022-05-13T17:09:49.7669958Z checking netinet/in.h usability... yes
2022-05-13T17:09:49.9086804Z checking netinet/in.h presence... yes
2022-05-13T17:09:49.9088258Z checking for netinet/in.h... yes
2022-05-13T17:09:50.3446752Z checking netinet/in_systm.h usability... yes
2022-05-13T17:09:50.4953217Z checking netinet/in_systm.h presence... yes
2022-05-13T17:09:50.4955040Z checking for netinet/in_systm.h... yes
2022-05-13T17:09:50.6690079Z checking for string.h... (cached) yes
2022-05-13T17:09:50.8430612Z checking for strings.h... (cached) yes
2022-05-13T17:09:51.3869664Z checking sys/ethernet.h usability... no
2022-05-13T17:09:51.6501377Z checking sys/ethernet.h presence... no
2022-05-13T17:09:51.6506346Z checking for sys/ethernet.h... no
2022-05-13T17:09:51.9767656Z checking sys/file.h usability... yes
2022-05-13T17:09:52.1480207Z checking sys/file.h presence... yes
2022-05-13T17:09:52.1482825Z checking for sys/file.h... yes
2022-05-13T17:09:52.6175653Z checking sys/param.h usability... yes
2022-05-13T17:09:52.7873788Z checking sys/param.h presence... yes
2022-05-13T17:09:52.7875870Z checking for sys/param.h... yes
2022-05-13T17:09:53.2723596Z checking sys/socket.h usability... yes
2022-05-13T17:09:53.4226275Z checking sys/socket.h presence... yes
2022-05-13T17:09:53.4227907Z checking for sys/socket.h... yes
2022-05-13T17:09:53.8169589Z checking sys/time.h usability... yes
2022-05-13T17:09:53.9894317Z checking sys/time.h presence... yes
2022-05-13T17:09:53.9896250Z checking for sys/time.h... yes
2022-05-13T17:09:54.4070455Z checking sys/times.h usability... yes
2022-05-13T17:09:54.5262127Z checking sys/times.h presence... yes
2022-05-13T17:09:54.5263731Z checking for sys/times.h... yes
2022-05-13T17:09:54.6949940Z checking for sys/types.h... (cached) yes
2022-05-13T17:09:55.1064206Z checking termios.h usability... yes
2022-05-13T17:09:55.2706915Z checking termios.h presence... yes
2022-05-13T17:09:55.2709255Z checking for termios.h... yes
2022-05-13T17:09:55.4448040Z checking for unistd.h... (cached) yes
2022-05-13T17:09:55.9208339Z checking unixlib/local.h usability... no
2022-05-13T17:09:56.1294854Z checking unixlib/local.h presence... no
2022-05-13T17:09:56.1296622Z checking for unixlib/local.h... no
2022-05-13T17:09:56.1962273Z checking for windows.h... (cached) yes
2022-05-13T17:09:56.4984630Z checking for net/if.h... yes
2022-05-13T17:09:56.7869195Z checking for net/if_arp.h... no
2022-05-13T17:09:57.0828212Z checking for netinet/if_ether.h... no
2022-05-13T17:09:57.3036428Z checking for netinet/ip.h... yes
2022-05-13T17:09:57.7600902Z checking for stdbool.h that conforms to C99... yes
2022-05-13T17:09:58.3344134Z checking for _Bool... yes
2022-05-13T17:09:58.5145116Z checking for inline... inline
2022-05-13T17:09:59.0682126Z checking for int32_t... yes
2022-05-13T17:09:59.6257759Z checking for int64_t... yes
2022-05-13T17:10:00.2341805Z checking for off_t... yes
2022-05-13T17:10:00.8220289Z checking for size_t... yes
2022-05-13T17:10:01.4940180Z checking for ssize_t... yes
2022-05-13T17:10:01.7744148Z checking for uint16_t... yes
2022-05-13T17:10:02.0385647Z checking for uint32_t... yes
2022-05-13T17:10:02.3025254Z checking for uint64_t... yes
2022-05-13T17:10:02.5512302Z checking for uint8_t... yes
2022-05-13T17:10:03.1236744Z checking for ptrdiff_t... yes
2022-05-13T17:10:03.4625318Z checking for int128... no
2022-05-13T17:10:04.0805801Z checking for __int128... yes
2022-05-13T17:10:04.7181800Z checking for __int128_t... yes
2022-05-13T17:10:05.2095006Z checking for error_at_line... yes
2022-05-13T17:10:05.8207356Z checking for pid_t... yes
2022-05-13T17:10:06.2133277Z checking vfork.h usability... no
2022-05-13T17:10:06.4862284Z checking vfork.h presence... no
2022-05-13T17:10:06.4864370Z checking for vfork.h... no
2022-05-13T17:10:07.0803705Z checking for fork... yes
2022-05-13T17:10:07.6905490Z checking for vfork... yes
2022-05-13T17:10:08.2805895Z checking for working fork... yes
2022-05-13T17:10:08.2807968Z checking for working vfork... (cached) yes
2022-05-13T17:10:08.9052865Z checking for fseek64... no
2022-05-13T17:10:09.3778431Z checking for fseeko... yes
2022-05-13T17:10:10.0750378Z checking for fseeko64... no
2022-05-13T17:10:10.6676037Z checking for _fseeki64... no
2022-05-13T17:10:11.2610757Z checking for lseek64... no
2022-05-13T17:10:11.7499244Z checking for lseek... yes
2022-05-13T17:10:12.4086225Z checking for ftell64... no
2022-05-13T17:10:12.8662974Z checking for ftello... yes
2022-05-13T17:10:13.5120524Z checking for ftello64... no
2022-05-13T17:10:14.0615025Z checking for _ftelli64... no
2022-05-13T17:10:14.6123219Z checking for fopen64... no
2022-05-13T17:10:15.1478831Z checking for _fopen64... no
2022-05-13T17:10:15.6429447Z checking for memmem... yes
2022-05-13T17:10:16.2231471Z checking for mmap... yes
2022-05-13T17:10:16.7781726Z checking for sleep... yes
2022-05-13T17:10:17.3386309Z checking for setenv... yes
2022-05-13T17:10:17.9474963Z checking for putenv... yes
2022-05-13T17:10:18.7193109Z checking for strcasecmp... yes
2022-05-13T17:10:19.4398993Z checking for strncasecmp... yes
2022-05-13T17:10:20.1745581Z checking for stricmp... no
2022-05-13T17:10:20.7533955Z checking for strcmpi... no
2022-05-13T17:10:21.3654021Z checking for _stricmp... no
2022-05-13T17:10:21.9598631Z checking for _strcmpi... no
2022-05-13T17:10:22.5354039Z checking for strnicmp... no
2022-05-13T17:10:23.1522512Z checking for strncmpi... no
2022-05-13T17:10:23.7483858Z checking for _strnicmp... no
2022-05-13T17:10:24.3559115Z checking for _strncmpi... no
2022-05-13T17:10:24.9094853Z checking for strnlen... yes
2022-05-13T17:10:25.4780765Z checking for strlwr... yes
2022-05-13T17:10:26.0165138Z checking for strupr... yes
2022-05-13T17:10:26.7011149Z checking for strrev... no
2022-05-13T17:10:27.1815360Z checking for atoll... yes
2022-05-13T17:10:27.8634663Z checking for _atoi64... no
2022-05-13T17:10:28.4185456Z checking for snprintf... yes
2022-05-13T17:10:29.0775764Z checking for sprintf_s... no
2022-05-13T17:10:29.5730097Z checking for strcasestr... yes
2022-05-13T17:10:30.1184358Z checking for clGetKernelArgInfo... yes
2022-05-13T17:10:30.7040665Z checking for posix_memalign... yes
2022-05-13T17:10:31.1210451Z checking for yasm that supports "-f win64"... 
2022-05-13T17:10:31.1227143Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T17:10:31.5289235Z checking for _get_osfhandle... yes
2022-05-13T17:10:34.6155477Z checking for GetFileSizeEx... yes
2022-05-13T17:10:34.6372255Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T17:10:35.1664640Z checking size of size_t... 8
2022-05-13T17:10:35.6976713Z checking size of off_t... 8
2022-05-13T17:10:35.7438826Z configure: Fuzz check disabled
2022-05-13T17:10:35.7441069Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T17:10:35.7542307Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T17:10:35.8481333Z configure: creating Makefile dependencies
2022-05-13T17:10:38.4376426Z configure: creating ./john_build_rule.h
2022-05-13T17:10:38.7253421Z configure: creating ./config.status
2022-05-13T17:10:40.4482517Z config.status: creating Makefile
2022-05-13T17:10:40.6870833Z config.status: creating aes/Makefile
2022-05-13T17:10:40.9953693Z config.status: creating aes/aesni/Makefile
2022-05-13T17:10:41.2963606Z config.status: creating aes/openssl/Makefile
2022-05-13T17:10:41.6222545Z config.status: creating secp256k1/Makefile
2022-05-13T17:10:41.9271416Z config.status: creating ed25519-donna/Makefile
2022-05-13T17:10:42.2315200Z config.status: creating poly1305-donna/Makefile
2022-05-13T17:10:42.5292821Z config.status: creating autoconfig.h
2022-05-13T17:10:42.6378488Z config.status: autoconfig.h is unchanged
2022-05-13T17:10:42.7116247Z config.status: linking x86-64.h to arch.h
2022-05-13T17:10:42.7938606Z config.status: executing default commands
2022-05-13T17:10:42.8162272Z configure: creating ./fmt_externs.h
2022-05-13T17:10:52.6196462Z configure: creating ./fmt_registers.h
2022-05-13T17:11:06.7760331Z 
2022-05-13T17:11:06.7762364Z Configured for building John the Ripper jumbo:
2022-05-13T17:11:06.7763860Z 
2022-05-13T17:11:06.7765945Z Target CPU ......................................... x86_64 AVX, 64-bit LE
2022-05-13T17:11:06.7768618Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T17:11:06.7769715Z Target OS .......................................... cygwin
2022-05-13T17:11:06.7772068Z Cross compiling .................................... no
2022-05-13T17:11:06.7774045Z Legacy arch header ................................. x86-64.h
2022-05-13T17:11:06.7774668Z 
2022-05-13T17:11:06.7775710Z Optional libraries/features found:
2022-05-13T17:11:06.7776566Z Memory map (share/page large files) ................ yes
2022-05-13T17:11:06.7777499Z Fork support ....................................... yes
2022-05-13T17:11:06.7778598Z OpenMP support ..................................... no
2022-05-13T17:11:06.7779529Z OpenCL support ..................................... yes
2022-05-13T17:11:06.7780798Z Generic crypt(3) format ............................ yes
2022-05-13T17:11:06.7782128Z OpenSSL (many additional formats) .................. yes
2022-05-13T17:11:06.7783642Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T17:11:06.7784665Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T17:11:06.7785584Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T17:11:06.7786425Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T17:11:06.7787169Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T17:11:06.7788019Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T17:11:06.7788781Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T17:11:06.7789765Z OpenMPI support (default disabled) ................. no
2022-05-13T17:11:06.7790776Z Experimental code (default disabled) ............... no
2022-05-13T17:11:06.7791843Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T17:11:06.7792367Z 
2022-05-13T17:11:06.7793158Z Install missing libraries to get any needed features that were omitted.
2022-05-13T17:11:06.7793678Z 
2022-05-13T17:11:06.7794379Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T17:12:52.5198405Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T17:12:52.5204804Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:52.5206232Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.5207278Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.5208482Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.5209862Z       |                         ^~~~
2022-05-13T17:12:52.5210978Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:52.5212113Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.5213161Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.5214224Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.5215105Z       |                         ^~~~
2022-05-13T17:12:52.5216052Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:12:52.5217104Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:52.5218234Z       | ^~~~~~~~~~~~
2022-05-13T17:12:52.5723527Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T17:12:52.5728359Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:52.5729750Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:52.5732707Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.5735160Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.5736606Z       |                         ^~~~
2022-05-13T17:12:52.5738067Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:52.5739745Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:52.5740772Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.5741733Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.5742467Z       |                         ^~~~
2022-05-13T17:12:52.5743159Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:12:52.5743994Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:52.5744695Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:52.6008866Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T17:12:52.6010763Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:12:52.6012029Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:52.6012771Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.6013727Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.6015126Z       |                         ^~~~
2022-05-13T17:12:52.6016125Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:52.6017086Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:52.6018083Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.6019028Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.6019775Z       |                         ^~~~
2022-05-13T17:12:52.6020451Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:12:52.6021442Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:12:52.6023554Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:52.7131747Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T17:12:52.7135990Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:52.7137390Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.7138824Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.7139825Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:12:52.7141271Z       |                 ^~~~
2022-05-13T17:12:52.7142240Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:52.7143234Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.7144158Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.7145077Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:12:52.7145769Z       |                 ^~~~
2022-05-13T17:12:52.7146560Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:12:52.7147603Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:52.7148630Z       | ^~~~~~~~~~~~
2022-05-13T17:12:52.8157575Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:12:52.8159269Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:12:52.8160338Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:12:52.8161650Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:52.8162712Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.8164522Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.8165603Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.8166385Z       |                 ^~~~
2022-05-13T17:12:52.8167157Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:12:52.8168441Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:52.8169489Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.8170442Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.8171291Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.8172082Z       |                 ^~~~
2022-05-13T17:12:52.8172938Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:12:52.8174313Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:52.8175140Z       | ^~~~~~~~~~~~
2022-05-13T17:12:52.8176004Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:12:52.8177017Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:12:52.8178165Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:12:52.8179395Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:52.8180421Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.8181269Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.8182069Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.8182654Z       |         ^~~~
2022-05-13T17:12:52.8183296Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:12:52.8184340Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:52.8186629Z   276 | #define RFUN   ripemd_round
2022-05-13T17:12:52.8187643Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:52.8188676Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:52.8189383Z       |         ^~~~
2022-05-13T17:12:52.8190145Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:12:52.8191095Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:52.8191797Z       | ^~~~~~~~~~~~
2022-05-13T17:12:53.2514230Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T17:12:53.2516189Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:53.2519383Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:53.2520452Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.2521227Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:12:53.2521889Z       |                 ^~~~
2022-05-13T17:12:53.2522684Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:53.2523449Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:53.2524193Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.2524912Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:12:53.2525520Z       |                 ^~~~
2022-05-13T17:12:53.2526195Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:12:53.2527728Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:53.2528490Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:53.3481339Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:12:53.3483540Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:12:53.3484776Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:12:53.3486062Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:53.3487197Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:53.3489136Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.3490122Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.3490755Z       |                 ^~~~
2022-05-13T17:12:53.3491627Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:12:53.3493192Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:53.3494251Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:53.3495198Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.3496136Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.3496866Z       |                 ^~~~
2022-05-13T17:12:53.3497895Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:12:53.3499698Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:53.3500581Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:53.3501397Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:12:53.3502812Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:12:53.3503873Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:12:53.3505104Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:12:53.3506164Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:53.3507083Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.3508625Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.3509455Z       |         ^~~~
2022-05-13T17:12:53.3510121Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:12:53.3511241Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:53.3512385Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:12:53.3513310Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.3514163Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.3514907Z       |         ^~~~
2022-05-13T17:12:53.3516140Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:12:53.3517165Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:12:53.3520202Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:53.8648572Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T17:12:53.8650853Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:12:53.8653079Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:53.8654835Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.8656019Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:12:53.8656683Z       |                 ^~~~
2022-05-13T17:12:53.8657471Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:53.8659173Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:53.8660130Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.8661075Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:12:53.8661768Z       |                 ^~~~
2022-05-13T17:12:53.8662624Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:12:53.8663649Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:12:53.8667947Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:53.9595782Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:12:53.9597466Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:12:53.9599015Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:12:53.9600357Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:12:53.9601476Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:53.9602422Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.9618526Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.9619510Z       |                 ^~~~
2022-05-13T17:12:53.9620255Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:12:53.9621430Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:53.9622466Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:53.9623402Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.9624260Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.9625027Z       |                 ^~~~
2022-05-13T17:12:53.9625894Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:12:53.9628000Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:12:53.9629007Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:12:53.9629907Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:12:53.9630943Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:12:53.9632014Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:12:53.9633802Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:12:53.9634940Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:53.9635901Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.9637940Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.9638829Z       |         ^~~~
2022-05-13T17:12:53.9639663Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:12:53.9640726Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:12:53.9641697Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:12:53.9642538Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:12:53.9643415Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:12:53.9644168Z       |         ^~~~
2022-05-13T17:12:53.9644970Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:12:53.9646007Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:12:53.9647956Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:14:12.7791082Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:14:12.7795210Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7796896Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:14:12.7797863Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7798755Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T17:14:12.7801766Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7802731Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T17:14:12.7805587Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7807188Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:14:12.7810735Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7812184Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:14:12.7813595Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7815505Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:14:12.7817142Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7818634Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:14:12.7819655Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:14:12.7821915Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:14:12.7823771Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:14:12.7825057Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7826211Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7827384Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:14:12.7828332Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7829208Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T17:14:12.7829953Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7830826Z   366 |                                         keys,
2022-05-13T17:14:12.7831465Z       |                                         ~~~~~
2022-05-13T17:14:12.7833107Z   367 |                                         lens, cur_salt->salt,
2022-05-13T17:14:12.7833980Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7834781Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T17:14:12.7835891Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7837254Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:14:12.7838538Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7839916Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:14:12.7841480Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7842496Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:14:12.7843325Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:14:12.7844179Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:14:12.7845127Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:14:12.7845956Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7846938Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7847907Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:14:12.7848973Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7850817Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T17:14:12.7852864Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7853641Z   374 |                                         keys,
2022-05-13T17:14:12.7854316Z       |                                         ~~~~~
2022-05-13T17:14:12.7854989Z   375 |                                         lens, cur_salt->salt,
2022-05-13T17:14:12.7855833Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7857482Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T17:14:12.7858261Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:14:12.7859117Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:14:12.7860526Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7861618Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:14:12.7863341Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:14:12.7865378Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:14:12.7866201Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:14:12.7867074Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:14:12.7869275Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:14:12.7870879Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6855019Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:16:17.6857028Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:17.6859086Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:16:17.6860350Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6861220Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:16:17.6861956Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6862695Z   225 |                                         lens, cur_salt->salt,
2022-05-13T17:16:17.6863393Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6864677Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:16:17.6865637Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6866516Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:16:17.6867544Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:17.6868550Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:16:17.6869566Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:17.6870473Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:16:17.6871265Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:16:17.6872572Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:16:17.6873704Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:16:17.6875441Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6878293Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:17.6880670Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:16:17.6881974Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6887993Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:16:17.6890197Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6892365Z   247 |                                         lens, cur_salt->salt,
2022-05-13T17:16:17.6898070Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6899694Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:16:17.6901094Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6902401Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:16:17.6903863Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:17.6905314Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:16:17.6906642Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:17.6907824Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:16:17.6908832Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:16:17.6909858Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:16:17.6911043Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:16:17.6912050Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6914443Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:16:17.6959146Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:16:17.6961567Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6963125Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:16:17.6989051Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6990322Z   270 |                                         lens, cur_salt->salt,
2022-05-13T17:16:17.6991165Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6991909Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:16:17.6992593Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:17.6994569Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:16:17.6996019Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:16:17.6997390Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:16:17.6999453Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:16:17.7000749Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:16:17.7001977Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:16:17.7002974Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:16:17.7004149Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:16:17.7005370Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4678378Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:16:59.4681413Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:59.4682835Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:16:59.4684469Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4687037Z   117 |                                 cur_salt->iterations,
2022-05-13T17:16:59.4688500Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4690441Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T17:16:59.4691888Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4692842Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T17:16:59.4693792Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4694875Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:16:59.4696178Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:59.4697539Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:16:59.4699566Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:59.4700713Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:16:59.4701630Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:16:59.4702486Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:16:59.4703884Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:16:59.4704794Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4705846Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:59.4706770Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:16:59.4707488Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4708181Z   122 |                                 cur_salt->iterations,
2022-05-13T17:16:59.4708908Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4710158Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T17:16:59.4711064Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4711854Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T17:16:59.4712693Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:16:59.4713563Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:16:59.4715464Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:59.4716739Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:16:59.4718504Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:16:59.4721316Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:16:59.4723455Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:16:59.4725369Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:16:59.4727484Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:16:59.4729598Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8285273Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:17:36.8287376Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:17:36.8291411Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:17:36.8293741Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8295009Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:17:36.8297031Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8298098Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T17:17:36.8299192Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8300953Z   138 |                                                    salt_len, mackey,
2022-05-13T17:17:36.8302284Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8303221Z   139 |                                                    BINARY_SIZE);
2022-05-13T17:17:36.8306934Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:17:36.8308667Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:17:36.8313053Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:17:36.8314612Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:17:36.8317613Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:17:36.8319543Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:17:36.8320649Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:17:36.8321643Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:17:36.8322800Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:17:36.8323796Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8324773Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:17:36.8325784Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:17:36.8326678Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8327561Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:17:36.8328295Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8329386Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T17:17:36.8330143Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8330903Z   153 |                                                    salt_len, mackey,
2022-05-13T17:17:36.8331586Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:17:36.8333224Z   154 |                                                    BINARY_SIZE);
2022-05-13T17:17:36.8333999Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:17:36.8334838Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:17:36.8335911Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:17:36.8336892Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:17:36.8337944Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:17:36.8339105Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:17:36.8340013Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:17:36.8340833Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:17:36.8341793Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:17:36.8342618Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:18:20.5226419Z In file included from subsets.c:25:
2022-05-13T17:18:20.5228194Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T17:18:20.5231636Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T17:18:20.5232771Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T17:18:20.5234496Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T17:21:26.2401339Z ar: creating aes.a
2022-05-13T17:21:39.4155027Z ar: creating secp256k1.a
2022-05-13T17:21:48.4425764Z ar: creating ed25519-donna.a
2022-05-13T17:21:49.1917461Z ar: creating poly1305-donna.a
2022-05-13T17:22:28.8347102Z 
2022-05-13T17:22:28.8544050Z Make process completed.
2022-05-13T17:22:30.3876202Z 
2022-05-13T17:22:30.4140544Z Make process completed.
2022-05-13T17:22:30.4385691Z Stripping executables.
2022-05-13T17:22:31.1887877Z Executing './configure --disable-native-tests --enable-simd=avx    CPPFLAGS='-DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-avx-non-omp\\\"\"   -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-sse41\\\"\" ' && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx'
2022-05-13T17:22:34.0312713Z checking build system type... x86_64-unknown-cygwin
2022-05-13T17:22:34.0321027Z checking host system type... x86_64-unknown-cygwin
2022-05-13T17:22:34.0508108Z checking whether to compile using MPI... no
2022-05-13T17:22:34.0544412Z checking for gcc... gcc
2022-05-13T17:22:34.8323745Z checking whether the C compiler works... yes
2022-05-13T17:22:34.8325231Z checking for C compiler default output file name... a.exe
2022-05-13T17:22:35.1688611Z checking for suffix of executables... .exe
2022-05-13T17:22:35.5901711Z checking whether we are cross compiling... no
2022-05-13T17:22:35.8519301Z checking for suffix of object files... o
2022-05-13T17:22:36.0553029Z checking whether we are using the GNU C compiler... yes
2022-05-13T17:22:36.2389639Z checking whether gcc accepts -g... yes
2022-05-13T17:22:36.5165037Z checking for gcc option to accept ISO C89... none needed
2022-05-13T17:22:36.7956814Z checking whether gcc understands -c and -o together... yes
2022-05-13T17:22:37.2058470Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T17:22:37.2060387Z checking whether gcc accepts -g... (cached) yes
2022-05-13T17:22:37.2062354Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T17:22:37.2065740Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T17:22:37.2083565Z checking additional paths...  -L/usr/local/lib
2022-05-13T17:22:38.0896206Z checking arg check macro for -m with gcc... yes
2022-05-13T17:22:38.4035726Z checking arg check macro for -Q with gcc... yes
2022-05-13T17:22:38.5787698Z checking if gcc supports -funroll-loops... yes
2022-05-13T17:22:38.7809921Z checking if gcc supports -Os... yes
2022-05-13T17:22:39.1469697Z checking if gcc supports -finline-functions... yes
2022-05-13T17:22:39.3186808Z checking if gcc supports -Og... yes
2022-05-13T17:22:39.5159975Z checking if gcc supports -Wall... yes
2022-05-13T17:22:39.7224084Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T17:22:39.9356946Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T17:22:40.1468505Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T17:22:40.5122615Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T17:22:40.7306952Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T17:22:41.0863747Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T17:22:41.3036133Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T17:22:41.6158165Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T17:22:41.8599226Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T17:22:42.1309593Z checking if gcc supports -Qunused-arguments... no
2022-05-13T17:22:42.3127890Z checking if gcc supports -std=gnu89... yes
2022-05-13T17:22:42.4923266Z checking if gcc supports -Wdate-time... yes
2022-05-13T17:22:42.8963316Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T17:22:43.3236099Z checking for 32/64 bit... 64-bit
2022-05-13T17:22:43.3467486Z checking additional paths (64 bit)... none
2022-05-13T17:22:43.3470402Z checking whether ln -s works... yes
2022-05-13T17:22:43.4111570Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T17:22:43.4825236Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T17:22:43.5892951Z checking for GNU make... make
2022-05-13T17:22:43.7824743Z checking whether make sets $(MAKE)... yes
2022-05-13T17:22:44.2568738Z checking how to run the C preprocessor... gcc -E
2022-05-13T17:22:44.7933278Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T17:22:45.1143854Z checking for sort... /usr/bin/sort
2022-05-13T17:22:45.1152120Z checking for find... /usr/bin/find
2022-05-13T17:22:45.1183904Z checking for perl... /usr/bin/perl
2022-05-13T17:22:45.1185107Z checking for ar... ar
2022-05-13T17:22:45.1185735Z checking for strip... strip
2022-05-13T17:22:45.1200962Z checking for strings... strings
2022-05-13T17:22:45.1215979Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T17:22:45.1583421Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T17:22:45.1590257Z checking if pkg-config will be used... no
2022-05-13T17:22:45.2460836Z checking for egrep... /usr/bin/grep -E
2022-05-13T17:22:46.4791419Z checking for ANSI C header files... yes
2022-05-13T17:22:46.8651814Z checking for sys/types.h... yes
2022-05-13T17:22:47.4453101Z checking for sys/stat.h... yes
2022-05-13T17:22:48.0725642Z checking for stdlib.h... yes
2022-05-13T17:22:48.5949928Z checking for string.h... yes
2022-05-13T17:22:49.1794521Z checking for memory.h... yes
2022-05-13T17:22:49.6443774Z checking for strings.h... yes
2022-05-13T17:22:50.1447469Z checking for inttypes.h... yes
2022-05-13T17:22:50.6920408Z checking for stdint.h... yes
2022-05-13T17:22:51.1896635Z checking for unistd.h... yes
2022-05-13T17:22:51.9462267Z checking size of short... 2
2022-05-13T17:22:52.6553597Z checking size of int... 4
2022-05-13T17:22:53.3676331Z checking size of long... 8
2022-05-13T17:22:53.9724354Z checking size of long long... 8
2022-05-13T17:22:54.5618674Z checking size of wchar_t... 2
2022-05-13T17:22:55.1715842Z checking size of int *... 8
2022-05-13T17:22:56.6508202Z checking size of void *... 8
2022-05-13T17:22:56.6509625Z configure: Trying to force AVX using default method (--enable-simd=avx).
2022-05-13T17:22:56.6510563Z checking if gcc supports -mavx w/ linking... yes
2022-05-13T17:22:56.7302904Z checking for extra ASFLAGS... None needed
2022-05-13T17:22:57.0384257Z checking for X32 ABI... no
2022-05-13T17:22:57.0712527Z checking special compiler flags... Intel x86
2022-05-13T17:22:57.0714142Z configure: Testing tool-chain's CPU support with given options
2022-05-13T17:22:57.5086151Z checking for MMX... yes
2022-05-13T17:22:58.0597424Z checking for SSE2... yes
2022-05-13T17:22:58.5387267Z checking for SSSE3... yes
2022-05-13T17:22:59.0731447Z checking for SSE4.1... yes
2022-05-13T17:22:59.6096190Z checking for SSE4.2... yes
2022-05-13T17:23:00.9490393Z checking for AVX... yes
2022-05-13T17:23:02.2305960Z checking for XOP... no
2022-05-13T17:23:03.4656093Z checking for AVX2... no
2022-05-13T17:23:03.4862347Z checking for arch.h alternative... x86-64.h
2022-05-13T17:23:03.4872088Z checking for byte ordering according to target triple... little
2022-05-13T17:23:03.4912172Z checking supplied paths for OpenSSL...  
2022-05-13T17:23:03.4913176Z checking additional paths for OpenSSL... none
2022-05-13T17:23:03.7459741Z checking openssl/opensslv.h usability... yes
2022-05-13T17:23:03.8933094Z checking openssl/opensslv.h presence... yes
2022-05-13T17:23:03.8935248Z checking for openssl/opensslv.h... yes
2022-05-13T17:23:04.3356600Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T17:23:04.7879305Z checking for MD5_Update in -lcrypto... yes
2022-05-13T17:23:04.7901719Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T17:23:05.3422532Z checking for sqrt in -lm... yes
2022-05-13T17:23:05.7502254Z checking for clock_gettime in -lrt... yes
2022-05-13T17:23:06.1820495Z checking for deflate in -lz... yes
2022-05-13T17:23:07.1694506Z checking for library containing crypt... -lcrypt
2022-05-13T17:23:07.4943501Z checking gmp.h usability... yes
2022-05-13T17:23:07.6463230Z checking gmp.h presence... yes
2022-05-13T17:23:07.6464901Z checking for gmp.h... yes
2022-05-13T17:23:08.1517496Z checking for __gmpz_init in -lgmp... yes
2022-05-13T17:23:08.5090172Z checking skey.h usability... no
2022-05-13T17:23:08.7500187Z checking skey.h presence... no
2022-05-13T17:23:08.7502069Z checking for skey.h... no
2022-05-13T17:23:08.7509076Z checking for S/Key... using our own code
2022-05-13T17:23:08.9932757Z checking bzlib.h usability... yes
2022-05-13T17:23:09.1437357Z checking bzlib.h presence... yes
2022-05-13T17:23:09.1439567Z checking for bzlib.h... yes
2022-05-13T17:23:09.5197216Z checking for main in -lbz2... yes
2022-05-13T17:23:10.0095735Z checking for main in -lkernel32... yes
2022-05-13T17:23:10.5407219Z checking for dlopen in -ldl... yes
2022-05-13T17:23:12.0427168Z checking intrin.h usability... yes
2022-05-13T17:23:12.5213987Z checking intrin.h presence... yes
2022-05-13T17:23:12.5216401Z checking for intrin.h... yes
2022-05-13T17:23:12.9572496Z checking openssl/cmac.h usability... yes
2022-05-13T17:23:13.2174329Z checking openssl/cmac.h presence... yes
2022-05-13T17:23:13.2175769Z checking for openssl/cmac.h... yes
2022-05-13T17:23:13.2457305Z configure: rexgen check not enabled
2022-05-13T17:23:13.6796662Z checking pcap.h usability... no
2022-05-13T17:23:13.9248276Z checking pcap.h presence... no
2022-05-13T17:23:13.9251229Z checking for pcap.h... no
2022-05-13T17:23:14.3940274Z checking pcap/pcap.h usability... no
2022-05-13T17:23:14.6333420Z checking pcap/pcap.h presence... no
2022-05-13T17:23:14.6336481Z checking for pcap/pcap.h... no
2022-05-13T17:23:14.6980926Z checking for pcap.h... (cached) no
2022-05-13T17:23:14.7641836Z checking for pcap/pcap.h... (cached) no
2022-05-13T17:23:15.0116198Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T17:23:15.2439213Z checking whether string.h and strings.h may both be included... yes
2022-05-13T17:23:15.8197580Z checking for SHA256... yes
2022-05-13T17:23:16.4732265Z checking for WHIRLPOOL... yes
2022-05-13T17:23:17.1271530Z checking for RIPEMD160... yes
2022-05-13T17:23:17.7566927Z checking for AES_encrypt... yes
2022-05-13T17:23:18.3518795Z checking for DSA_get0_pqg... yes
2022-05-13T17:23:19.4342372Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T17:23:19.4347858Z checking additional paths for OpenCL... none
2022-05-13T17:23:19.7162298Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T17:23:20.3542585Z checking for the pthreads library -lpthreads... no
2022-05-13T17:23:20.8452963Z checking whether pthreads work without any flags... yes
2022-05-13T17:23:21.2957868Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T17:23:21.2961090Z checking if more special flags are required for pthreads... no
2022-05-13T17:23:21.6238804Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T17:23:21.8874718Z checking whether we are using the Microsoft C compiler... no
2022-05-13T17:23:22.2876076Z checking CL/cl.h usability... yes
2022-05-13T17:23:22.4690708Z checking CL/cl.h presence... yes
2022-05-13T17:23:22.4691994Z checking for CL/cl.h... yes
2022-05-13T17:23:22.9794852Z checking OpenCL/cl.h usability... no
2022-05-13T17:23:23.2808231Z checking OpenCL/cl.h presence... no
2022-05-13T17:23:23.2811027Z checking for OpenCL/cl.h... no
2022-05-13T17:23:26.1451432Z checking windows.h usability... yes
2022-05-13T17:23:27.4394194Z checking windows.h presence... yes
2022-05-13T17:23:27.4395462Z checking for windows.h... yes
2022-05-13T17:23:27.9311332Z checking for OpenCL library... -lOpenCL
2022-05-13T17:23:28.2389269Z checking arpa/inet.h usability... yes
2022-05-13T17:23:28.3910362Z checking arpa/inet.h presence... yes
2022-05-13T17:23:28.3911916Z checking for arpa/inet.h... yes
2022-05-13T17:23:28.7721532Z checking crypt.h usability... yes
2022-05-13T17:23:28.8897246Z checking crypt.h presence... yes
2022-05-13T17:23:28.8898837Z checking for crypt.h... yes
2022-05-13T17:23:29.2428912Z checking dirent.h usability... yes
2022-05-13T17:23:29.3864652Z checking dirent.h presence... yes
2022-05-13T17:23:29.3868767Z checking for dirent.h... yes
2022-05-13T17:23:29.7636930Z checking limits.h usability... yes
2022-05-13T17:23:29.9001011Z checking limits.h presence... yes
2022-05-13T17:23:29.9003066Z checking for limits.h... yes
2022-05-13T17:23:30.3255300Z checking locale.h usability... yes
2022-05-13T17:23:30.4537772Z checking locale.h presence... yes
2022-05-13T17:23:30.4539473Z checking for locale.h... yes
2022-05-13T17:23:30.8288120Z checking malloc.h usability... yes
2022-05-13T17:23:30.9641861Z checking malloc.h presence... yes
2022-05-13T17:23:30.9643586Z checking for malloc.h... yes
2022-05-13T17:23:31.4941121Z checking net/ethernet.h usability... no
2022-05-13T17:23:31.7517367Z checking net/ethernet.h presence... no
2022-05-13T17:23:31.7520392Z checking for net/ethernet.h... no
2022-05-13T17:23:32.0981789Z checking netdb.h usability... yes
2022-05-13T17:23:32.2419915Z checking netdb.h presence... yes
2022-05-13T17:23:32.2421784Z checking for netdb.h... yes
2022-05-13T17:23:32.6119021Z checking netinet/in.h usability... yes
2022-05-13T17:23:32.7706095Z checking netinet/in.h presence... yes
2022-05-13T17:23:32.7708129Z checking for netinet/in.h... yes
2022-05-13T17:23:33.1955425Z checking netinet/in_systm.h usability... yes
2022-05-13T17:23:33.3413753Z checking netinet/in_systm.h presence... yes
2022-05-13T17:23:33.3415545Z checking for netinet/in_systm.h... yes
2022-05-13T17:23:33.5026168Z checking for string.h... (cached) yes
2022-05-13T17:23:33.6475407Z checking for strings.h... (cached) yes
2022-05-13T17:23:34.1531788Z checking sys/ethernet.h usability... no
2022-05-13T17:23:34.3862152Z checking sys/ethernet.h presence... no
2022-05-13T17:23:34.3864627Z checking for sys/ethernet.h... no
2022-05-13T17:23:34.6892578Z checking sys/file.h usability... yes
2022-05-13T17:23:34.8480277Z checking sys/file.h presence... yes
2022-05-13T17:23:34.8482187Z checking for sys/file.h... yes
2022-05-13T17:23:35.2756147Z checking sys/param.h usability... yes
2022-05-13T17:23:35.4374013Z checking sys/param.h presence... yes
2022-05-13T17:23:35.4377126Z checking for sys/param.h... yes
2022-05-13T17:23:35.8547489Z checking sys/socket.h usability... yes
2022-05-13T17:23:36.0157786Z checking sys/socket.h presence... yes
2022-05-13T17:23:36.0160532Z checking for sys/socket.h... yes
2022-05-13T17:23:36.4043509Z checking sys/time.h usability... yes
2022-05-13T17:23:36.5609558Z checking sys/time.h presence... yes
2022-05-13T17:23:36.5610737Z checking for sys/time.h... yes
2022-05-13T17:23:36.9748300Z checking sys/times.h usability... yes
2022-05-13T17:23:37.1222604Z checking sys/times.h presence... yes
2022-05-13T17:23:37.1226107Z checking for sys/times.h... yes
2022-05-13T17:23:37.2784472Z checking for sys/types.h... (cached) yes
2022-05-13T17:23:37.6979085Z checking termios.h usability... yes
2022-05-13T17:23:37.8538861Z checking termios.h presence... yes
2022-05-13T17:23:37.8541030Z checking for termios.h... yes
2022-05-13T17:23:37.9902422Z checking for unistd.h... (cached) yes
2022-05-13T17:23:38.5146822Z checking unixlib/local.h usability... no
2022-05-13T17:23:38.7674126Z checking unixlib/local.h presence... no
2022-05-13T17:23:38.7675640Z checking for unixlib/local.h... no
2022-05-13T17:23:38.8270062Z checking for windows.h... (cached) yes
2022-05-13T17:23:39.1302395Z checking for net/if.h... yes
2022-05-13T17:23:39.4722277Z checking for net/if_arp.h... no
2022-05-13T17:23:39.7804295Z checking for netinet/if_ether.h... no
2022-05-13T17:23:40.0089163Z checking for netinet/ip.h... yes
2022-05-13T17:23:40.5180391Z checking for stdbool.h that conforms to C99... yes
2022-05-13T17:23:41.1491502Z checking for _Bool... yes
2022-05-13T17:23:41.3669626Z checking for inline... inline
2022-05-13T17:23:41.9898147Z checking for int32_t... yes
2022-05-13T17:23:42.5766282Z checking for int64_t... yes
2022-05-13T17:23:43.1807476Z checking for off_t... yes
2022-05-13T17:23:43.7825136Z checking for size_t... yes
2022-05-13T17:23:44.3803282Z checking for ssize_t... yes
2022-05-13T17:23:44.6633329Z checking for uint16_t... yes
2022-05-13T17:23:44.9261825Z checking for uint32_t... yes
2022-05-13T17:23:45.1911983Z checking for uint64_t... yes
2022-05-13T17:23:45.4377071Z checking for uint8_t... yes
2022-05-13T17:23:46.0596266Z checking for ptrdiff_t... yes
2022-05-13T17:23:46.4307994Z checking for int128... no
2022-05-13T17:23:47.0423900Z checking for __int128... yes
2022-05-13T17:23:47.6617983Z checking for __int128_t... yes
2022-05-13T17:23:48.1103230Z checking for error_at_line... yes
2022-05-13T17:23:48.6885107Z checking for pid_t... yes
2022-05-13T17:23:49.0191355Z checking vfork.h usability... no
2022-05-13T17:23:49.2461934Z checking vfork.h presence... no
2022-05-13T17:23:49.2466423Z checking for vfork.h... no
2022-05-13T17:23:49.8702371Z checking for fork... yes
2022-05-13T17:23:50.4942913Z checking for vfork... yes
2022-05-13T17:23:51.1587640Z checking for working fork... yes
2022-05-13T17:23:51.1589479Z checking for working vfork... (cached) yes
2022-05-13T17:23:51.7716246Z checking for fseek64... no
2022-05-13T17:23:52.2652900Z checking for fseeko... yes
2022-05-13T17:23:52.9415886Z checking for fseeko64... no
2022-05-13T17:23:53.4841541Z checking for _fseeki64... no
2022-05-13T17:23:54.0520893Z checking for lseek64... no
2022-05-13T17:23:54.5190595Z checking for lseek... yes
2022-05-13T17:23:55.1798671Z checking for ftell64... no
2022-05-13T17:23:55.6531280Z checking for ftello... yes
2022-05-13T17:23:56.3290840Z checking for ftello64... no
2022-05-13T17:23:56.8425634Z checking for _ftelli64... no
2022-05-13T17:23:57.3890339Z checking for fopen64... no
2022-05-13T17:23:57.9576776Z checking for _fopen64... no
2022-05-13T17:23:58.4190027Z checking for memmem... yes
2022-05-13T17:23:58.9911994Z checking for mmap... yes
2022-05-13T17:23:59.5629547Z checking for sleep... yes
2022-05-13T17:24:00.1478060Z checking for setenv... yes
2022-05-13T17:24:00.7353061Z checking for putenv... yes
2022-05-13T17:24:01.4371795Z checking for strcasecmp... yes
2022-05-13T17:24:02.0942386Z checking for strncasecmp... yes
2022-05-13T17:24:02.7450003Z checking for stricmp... no
2022-05-13T17:24:03.3677015Z checking for strcmpi... no
2022-05-13T17:24:03.9260859Z checking for _stricmp... no
2022-05-13T17:24:04.5124686Z checking for _strcmpi... no
2022-05-13T17:24:05.0917115Z checking for strnicmp... no
2022-05-13T17:24:05.6335416Z checking for strncmpi... no
2022-05-13T17:24:06.2531979Z checking for _strnicmp... no
2022-05-13T17:24:06.8165033Z checking for _strncmpi... no
2022-05-13T17:24:07.4020741Z checking for strnlen... yes
2022-05-13T17:24:08.0015091Z checking for strlwr... yes
2022-05-13T17:24:08.6091922Z checking for strupr... yes
2022-05-13T17:24:09.2733814Z checking for strrev... no
2022-05-13T17:24:09.7209679Z checking for atoll... yes
2022-05-13T17:24:10.4441712Z checking for _atoi64... no
2022-05-13T17:24:11.0313098Z checking for snprintf... yes
2022-05-13T17:24:11.6852435Z checking for sprintf_s... no
2022-05-13T17:24:12.6702524Z checking for strcasestr... yes
2022-05-13T17:24:12.6977845Z checking for clGetKernelArgInfo... yes
2022-05-13T17:24:13.3070789Z checking for posix_memalign... yes
2022-05-13T17:24:13.7956587Z checking for yasm that supports "-f win64"... 
2022-05-13T17:24:13.7973289Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T17:24:14.2284229Z checking for _get_osfhandle... yes
2022-05-13T17:24:17.1116788Z checking for GetFileSizeEx... yes
2022-05-13T17:24:17.1359965Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T17:24:17.7005802Z checking size of size_t... 8
2022-05-13T17:24:18.2930960Z checking size of off_t... 8
2022-05-13T17:24:18.3392620Z configure: Fuzz check disabled
2022-05-13T17:24:18.3394090Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T17:24:18.3535353Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T17:24:18.4720758Z configure: creating Makefile dependencies
2022-05-13T17:24:21.3746652Z configure: creating ./john_build_rule.h
2022-05-13T17:24:21.7141325Z configure: creating ./config.status
2022-05-13T17:24:23.8749692Z config.status: creating Makefile
2022-05-13T17:24:24.1510214Z config.status: creating aes/Makefile
2022-05-13T17:24:24.5198187Z config.status: creating aes/aesni/Makefile
2022-05-13T17:24:24.9054941Z config.status: creating aes/openssl/Makefile
2022-05-13T17:24:25.2803104Z config.status: creating secp256k1/Makefile
2022-05-13T17:24:25.6740553Z config.status: creating ed25519-donna/Makefile
2022-05-13T17:24:26.0340745Z config.status: creating poly1305-donna/Makefile
2022-05-13T17:24:26.3846755Z config.status: creating autoconfig.h
2022-05-13T17:24:26.4950864Z config.status: autoconfig.h is unchanged
2022-05-13T17:24:26.5633898Z config.status: linking x86-64.h to arch.h
2022-05-13T17:24:26.6517378Z config.status: executing default commands
2022-05-13T17:24:26.6786892Z configure: creating ./fmt_externs.h
2022-05-13T17:24:36.5762156Z configure: creating ./fmt_registers.h
2022-05-13T17:24:49.9896843Z 
2022-05-13T17:24:49.9933357Z Configured for building John the Ripper jumbo:
2022-05-13T17:24:49.9934186Z 
2022-05-13T17:24:49.9934957Z Target CPU ......................................... x86_64 AVX, 64-bit LE
2022-05-13T17:24:49.9935861Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T17:24:49.9936733Z Target OS .......................................... cygwin
2022-05-13T17:24:49.9937976Z Cross compiling .................................... no
2022-05-13T17:24:49.9939238Z Legacy arch header ................................. x86-64.h
2022-05-13T17:24:49.9940242Z 
2022-05-13T17:24:49.9940816Z Optional libraries/features found:
2022-05-13T17:24:49.9941671Z Memory map (share/page large files) ................ yes
2022-05-13T17:24:49.9942578Z Fork support ....................................... yes
2022-05-13T17:24:49.9944751Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T17:24:49.9945864Z OpenCL support ..................................... yes
2022-05-13T17:24:49.9946823Z Generic crypt(3) format ............................ yes
2022-05-13T17:24:49.9948052Z OpenSSL (many additional formats) .................. yes
2022-05-13T17:24:49.9948985Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T17:24:49.9949970Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T17:24:49.9950949Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T17:24:49.9951855Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T17:24:49.9952671Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T17:24:49.9953451Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T17:24:49.9954320Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T17:24:49.9955177Z OpenMPI support (default disabled) ................. no
2022-05-13T17:24:49.9956014Z Experimental code (default disabled) ............... no
2022-05-13T17:24:49.9956922Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T17:24:49.9957435Z 
2022-05-13T17:24:49.9958056Z Install missing libraries to get any needed features that were omitted.
2022-05-13T17:24:49.9958595Z 
2022-05-13T17:24:49.9959176Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T17:26:41.5453865Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T17:26:41.5523684Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:41.5525451Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.5526454Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.5527367Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.5528147Z       |                         ^~~~
2022-05-13T17:26:41.5528978Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:41.5529977Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.5530836Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.5532123Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.5532973Z       |                         ^~~~
2022-05-13T17:26:41.5533741Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:26:41.5534789Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:41.5535595Z       | ^~~~~~~~~~~~
2022-05-13T17:26:41.6019670Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T17:26:41.6021413Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:41.6022671Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:41.6023447Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.6024215Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.6024965Z       |                         ^~~~
2022-05-13T17:26:41.6025760Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:41.6026524Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:41.6027302Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.6028041Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.6028670Z       |                         ^~~~
2022-05-13T17:26:41.6029354Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:26:41.6030178Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:41.6030911Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:41.6520049Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T17:26:41.6521943Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:26:41.6523188Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:41.6524064Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.6526252Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.6527044Z       |                         ^~~~
2022-05-13T17:26:41.6528386Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:41.6530541Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:41.6531514Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.6532529Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.6533405Z       |                         ^~~~
2022-05-13T17:26:41.6535387Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:26:41.6536443Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:26:41.6538328Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:41.7810635Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T17:26:41.7812831Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:41.7814230Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.7815114Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.7816088Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:26:41.7817268Z       |                 ^~~~
2022-05-13T17:26:41.7818318Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:41.7820065Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.7821156Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.7822446Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:26:41.7823099Z       |                 ^~~~
2022-05-13T17:26:41.8883829Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:26:41.8885364Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:41.8886288Z       | ^~~~~~~~~~~~
2022-05-13T17:26:41.8887182Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:26:41.8888221Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:26:41.8889217Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:26:41.8890451Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:41.8891794Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.8892832Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.8893732Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.8894965Z       |                 ^~~~
2022-05-13T17:26:41.8895834Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:26:41.8896953Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:41.8897936Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.8898875Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.8899775Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.8900572Z       |                 ^~~~
2022-05-13T17:26:41.8901390Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:26:41.8902482Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:41.8903324Z       | ^~~~~~~~~~~~
2022-05-13T17:26:41.8904168Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:26:41.8905120Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:26:41.8906206Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:26:41.8907411Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:41.8908490Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.8909337Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.8910186Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.8910911Z       |         ^~~~
2022-05-13T17:26:41.8911828Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:26:41.8912884Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:41.8913906Z   276 | #define RFUN   ripemd_round
2022-05-13T17:26:41.8915046Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:41.8915864Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:41.8916601Z       |         ^~~~
2022-05-13T17:26:41.8917458Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:26:41.8918441Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:41.8919246Z       | ^~~~~~~~~~~~
2022-05-13T17:26:42.3913746Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T17:26:42.3915672Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:42.3916882Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:42.3917891Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:42.3918961Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:26:42.3919810Z       |                 ^~~~
2022-05-13T17:26:42.3920841Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:42.3922287Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:42.3923206Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:42.3924160Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:26:42.3924926Z       |                 ^~~~
2022-05-13T17:26:42.3925724Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:26:42.3926792Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:42.3927645Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:42.4805702Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:26:42.4807247Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:26:42.4808470Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:26:42.4809807Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:42.4810938Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:42.4812354Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:42.4813350Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:42.4814101Z       |                 ^~~~
2022-05-13T17:26:42.4814926Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:26:42.4815925Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:42.4817336Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:42.4818258Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:42.4819167Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:42.4819877Z       |                 ^~~~
2022-05-13T17:26:42.4820712Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:26:42.4822048Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:42.4822944Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:42.4823769Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:26:42.4824797Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:26:42.4825908Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:26:42.4827195Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:26:42.4828202Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:42.4829124Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:42.4830000Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:42.4830708Z       |         ^~~~
2022-05-13T17:26:42.4831700Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:26:42.4832822Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:42.4833816Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:26:42.4834686Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:42.4835594Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:42.4836326Z       |         ^~~~
2022-05-13T17:26:42.4837477Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:26:42.4838414Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:26:42.4839294Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:43.0288580Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T17:26:43.0290531Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:26:43.0291885Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:43.0292773Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:43.0293503Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:26:43.0294145Z       |                 ^~~~
2022-05-13T17:26:43.0333592Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:43.0335039Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:43.0336023Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:43.0336989Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:26:43.0337707Z       |                 ^~~~
2022-05-13T17:26:43.0338363Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:26:43.0339407Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:26:43.0340299Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:43.1175896Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:26:43.1177307Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:26:43.1178479Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:26:43.1180946Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:26:43.1182695Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:43.1183474Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:43.1184301Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:43.1184989Z       |                 ^~~~
2022-05-13T17:26:43.1185762Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:26:43.1186586Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:43.1187517Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:43.1188376Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:43.1189420Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:43.1190627Z       |                 ^~~~
2022-05-13T17:26:43.1191567Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:26:43.1192581Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:26:43.1193334Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:26:43.1194045Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:26:43.1195038Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:26:43.1196068Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:26:43.1197624Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:26:43.1198592Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:43.1199465Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:43.1201434Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:43.1202453Z       |         ^~~~
2022-05-13T17:26:43.1203215Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:26:43.1204278Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:26:43.1205241Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:26:43.1206134Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:26:43.1207008Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:26:43.1207767Z       |         ^~~~
2022-05-13T17:26:43.1208647Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:26:43.1209656Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:26:43.1211330Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:28:02.9354260Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:28:02.9359413Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9360949Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:28:02.9362831Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9365115Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T17:28:02.9366999Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9368314Z   366 |                                         keys,
2022-05-13T17:28:02.9369168Z       |                                         ~~~~~
2022-05-13T17:28:02.9369951Z   367 |                                         lens, cur_salt->salt,
2022-05-13T17:28:02.9370769Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9371628Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T17:28:02.9372496Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9374301Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:28:02.9376089Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9378151Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:28:02.9380617Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9382608Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:28:02.9385553Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:28:02.9388260Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:28:02.9389584Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:28:02.9390698Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9391936Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9393139Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:28:02.9394150Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9395123Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T17:28:02.9396289Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9397412Z   374 |                                         keys,
2022-05-13T17:28:02.9398401Z       |                                         ~~~~~
2022-05-13T17:28:02.9399072Z   375 |                                         lens, cur_salt->salt,
2022-05-13T17:28:02.9399939Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9400813Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T17:28:02.9401627Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9402675Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:28:02.9404039Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9405306Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:28:02.9407008Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9408356Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:28:02.9409406Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:28:02.9410440Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:28:02.9411643Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:28:02.9412718Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9413942Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9415222Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:28:02.9416941Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9417883Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T17:28:02.9418835Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9419725Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T17:28:02.9420816Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9422975Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:28:02.9423896Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:28:02.9425005Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:28:02.9426789Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9428242Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:28:02.9429667Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:28:02.9430980Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:28:02.9432017Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:28:02.9433051Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:28:02.9435556Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:28:02.9437118Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4301354Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:30:05.4308205Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:30:05.4309976Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:30:05.4314008Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4315137Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:30:05.4317300Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4318404Z   270 |                                         lens, cur_salt->salt,
2022-05-13T17:30:05.4319283Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4320145Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:30:05.4321046Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4324350Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:30:05.4325978Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:30:05.4329272Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:30:05.4333520Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:30:05.4334629Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:30:05.4335491Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:30:05.4338549Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:30:05.4339603Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:30:05.4340409Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4344579Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:05.4349865Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:30:05.4351644Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4354443Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:30:05.4355503Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4358764Z   247 |                                         lens, cur_salt->salt,
2022-05-13T17:30:05.4359787Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4360594Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:30:05.4361576Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4362987Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:30:05.4364451Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:05.4365907Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:30:05.4368654Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:05.4370132Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:30:05.4370966Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:30:05.4371790Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:30:05.4373305Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:30:05.4374436Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4379668Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:05.4381432Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:30:05.4382924Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4387531Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:30:05.4389091Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4390013Z   225 |                                         lens, cur_salt->salt,
2022-05-13T17:30:05.4390820Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4391725Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:30:05.4393023Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:05.4395927Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:30:05.4397340Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:05.4398731Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:30:05.4400195Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:05.4401508Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:30:05.4402939Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:30:05.4403815Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:30:05.4404810Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:30:05.4405661Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3454654Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:30:45.3456763Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:45.3458096Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:30:45.3459325Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3460217Z   117 |                                 cur_salt->iterations,
2022-05-13T17:30:45.3461081Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3462463Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T17:30:45.3464073Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3466742Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T17:30:45.3468477Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3470174Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:30:45.3471724Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:45.3472997Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:30:45.3474249Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:45.3475266Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:30:45.3476048Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:30:45.3476864Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:30:45.3477785Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:30:45.3478814Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3479697Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:45.3480595Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:30:45.3481293Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3481985Z   122 |                                 cur_salt->iterations,
2022-05-13T17:30:45.3482629Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3483419Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T17:30:45.3484406Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3485207Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T17:30:45.3486094Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:30:45.3486991Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:30:45.3488054Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:45.3489085Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:30:45.3490220Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:30:45.3491180Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:30:45.3492034Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:30:45.3492864Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:30:45.3493808Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:30:45.3494800Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4844978Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:31:20.4849015Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:31:20.4850676Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:31:20.4851782Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4853484Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:31:20.4854626Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4855843Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T17:31:20.4858873Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4861515Z   153 |                                                    salt_len, mackey,
2022-05-13T17:31:20.4862897Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4864101Z   154 |                                                    BINARY_SIZE);
2022-05-13T17:31:20.4864936Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:31:20.4866094Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:31:20.4868807Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:31:20.4870427Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:31:20.4871767Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:31:20.4873053Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:31:20.4873914Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:31:20.4874780Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:31:20.4875764Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:31:20.4876785Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4878682Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:31:20.4879697Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:31:20.4880542Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4881384Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:31:20.4882129Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4882909Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T17:31:20.4883679Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4884423Z   138 |                                                    salt_len, mackey,
2022-05-13T17:31:20.4885069Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:31:20.4885918Z   139 |                                                    BINARY_SIZE);
2022-05-13T17:31:20.4886732Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:31:20.4889326Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:31:20.4890418Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:31:20.4891484Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:31:20.4892548Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:31:20.4899579Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:31:20.4900558Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:31:20.4901409Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:31:20.4902375Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:31:20.4903225Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:32:01.1718893Z In file included from subsets.c:25:
2022-05-13T17:32:01.1720664Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T17:32:01.1723812Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T17:32:01.1725559Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T17:32:01.1727707Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T17:34:49.5992941Z ar: creating aes.a
2022-05-13T17:35:01.4328629Z ar: creating secp256k1.a
2022-05-13T17:35:10.0823339Z ar: creating ed25519-donna.a
2022-05-13T17:35:10.7728698Z ar: creating poly1305-donna.a
2022-05-13T17:35:49.7210379Z 
2022-05-13T17:35:49.7481399Z Make process completed.
2022-05-13T17:35:51.2744305Z 
2022-05-13T17:35:51.2976253Z Make process completed.
2022-05-13T17:35:51.3338114Z Stripping executables.
2022-05-13T17:35:52.1135334Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=xop    CPPFLAGS='-DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-avx\\\"\" '                                                                           && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-xop-non-omp'
2022-05-13T17:35:55.2594371Z checking build system type... x86_64-unknown-cygwin
2022-05-13T17:35:55.2598208Z checking host system type... x86_64-unknown-cygwin
2022-05-13T17:35:55.2781749Z checking whether to compile using MPI... no
2022-05-13T17:35:55.2800152Z checking for gcc... gcc
2022-05-13T17:35:56.1319501Z checking whether the C compiler works... yes
2022-05-13T17:35:56.1321141Z checking for C compiler default output file name... a.exe
2022-05-13T17:35:56.4706111Z checking for suffix of executables... .exe
2022-05-13T17:35:56.8835590Z checking whether we are cross compiling... no
2022-05-13T17:35:57.1265961Z checking for suffix of object files... o
2022-05-13T17:35:57.3073612Z checking whether we are using the GNU C compiler... yes
2022-05-13T17:35:57.4936326Z checking whether gcc accepts -g... yes
2022-05-13T17:35:57.8187647Z checking for gcc option to accept ISO C89... none needed
2022-05-13T17:35:58.1038367Z checking whether gcc understands -c and -o together... yes
2022-05-13T17:35:58.5233436Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T17:35:58.5234925Z checking whether gcc accepts -g... (cached) yes
2022-05-13T17:35:58.5237553Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T17:35:58.5243581Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T17:35:58.5259768Z checking additional paths...  -L/usr/local/lib
2022-05-13T17:35:59.4259765Z checking arg check macro for -m with gcc... yes
2022-05-13T17:35:59.7388802Z checking arg check macro for -Q with gcc... yes
2022-05-13T17:35:59.8960324Z checking if gcc supports -funroll-loops... yes
2022-05-13T17:36:00.1528060Z checking if gcc supports -Os... yes
2022-05-13T17:36:00.5849311Z checking if gcc supports -finline-functions... yes
2022-05-13T17:36:00.7912337Z checking if gcc supports -Og... yes
2022-05-13T17:36:01.0055703Z checking if gcc supports -Wall... yes
2022-05-13T17:36:01.2448907Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T17:36:01.4495054Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T17:36:01.6893687Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T17:36:02.0717267Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T17:36:02.2643188Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T17:36:02.5875224Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T17:36:02.7925620Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T17:36:03.0711696Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T17:36:03.2703550Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T17:36:03.5494450Z checking if gcc supports -Qunused-arguments... no
2022-05-13T17:36:03.7257299Z checking if gcc supports -std=gnu89... yes
2022-05-13T17:36:03.9215898Z checking if gcc supports -Wdate-time... yes
2022-05-13T17:36:04.3482352Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T17:36:04.7695746Z checking for 32/64 bit... 64-bit
2022-05-13T17:36:04.7972711Z checking additional paths (64 bit)... none
2022-05-13T17:36:04.7976038Z checking whether ln -s works... yes
2022-05-13T17:36:04.8430999Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T17:36:04.9199476Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T17:36:05.0278750Z checking for GNU make... make
2022-05-13T17:36:05.7155149Z checking whether make sets $(MAKE)... yes
2022-05-13T17:36:05.7156516Z checking how to run the C preprocessor... gcc -E
2022-05-13T17:36:05.8969304Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T17:36:06.1673639Z checking for sort... /usr/bin/sort
2022-05-13T17:36:06.1685728Z checking for find... /usr/bin/find
2022-05-13T17:36:06.1704310Z checking for perl... /usr/bin/perl
2022-05-13T17:36:06.1715846Z checking for ar... ar
2022-05-13T17:36:06.1727331Z checking for strip... strip
2022-05-13T17:36:06.1742591Z checking for strings... strings
2022-05-13T17:36:06.1751422Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T17:36:06.1948632Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T17:36:06.1950362Z checking if pkg-config will be used... no
2022-05-13T17:36:06.2457245Z checking for egrep... /usr/bin/grep -E
2022-05-13T17:36:07.2054197Z checking for ANSI C header files... yes
2022-05-13T17:36:07.4530008Z checking for sys/types.h... yes
2022-05-13T17:36:07.7966211Z checking for sys/stat.h... yes
2022-05-13T17:36:08.2204083Z checking for stdlib.h... yes
2022-05-13T17:36:08.6217505Z checking for string.h... yes
2022-05-13T17:36:09.0491987Z checking for memory.h... yes
2022-05-13T17:36:09.5034111Z checking for strings.h... yes
2022-05-13T17:36:09.9031432Z checking for inttypes.h... yes
2022-05-13T17:36:10.3123414Z checking for stdint.h... yes
2022-05-13T17:36:10.7138942Z checking for unistd.h... yes
2022-05-13T17:36:11.3499267Z checking size of short... 2
2022-05-13T17:36:11.9519882Z checking size of int... 4
2022-05-13T17:36:12.5462098Z checking size of long... 8
2022-05-13T17:36:13.1066609Z checking size of long long... 8
2022-05-13T17:36:13.6861964Z checking size of wchar_t... 2
2022-05-13T17:36:14.2683384Z checking size of int *... 8
2022-05-13T17:36:14.8336007Z checking size of void *... 8
2022-05-13T17:36:14.9167663Z configure: Trying to force XOP using default method (--enable-simd=xop).
2022-05-13T17:36:15.3549125Z checking if gcc supports -mxop w/ linking... yes
2022-05-13T17:36:15.8196537Z checking for extra ASFLAGS... None needed
2022-05-13T17:36:16.0866787Z checking for X32 ABI... no
2022-05-13T17:36:16.1209797Z checking special compiler flags... Intel x86
2022-05-13T17:36:16.1211240Z configure: Testing tool-chain's CPU support with given options
2022-05-13T17:36:16.5740332Z checking for MMX... yes
2022-05-13T17:36:17.1254329Z checking for SSE2... yes
2022-05-13T17:36:17.6819063Z checking for SSSE3... yes
2022-05-13T17:36:18.1545695Z checking for SSE4.1... yes
2022-05-13T17:36:18.6668926Z checking for SSE4.2... yes
2022-05-13T17:36:20.0244665Z checking for AVX... yes
2022-05-13T17:36:21.3902152Z checking for XOP... yes
2022-05-13T17:36:22.5594237Z checking for AVX2... no
2022-05-13T17:36:22.5824373Z checking for arch.h alternative... x86-64.h
2022-05-13T17:36:22.5858872Z checking for byte ordering according to target triple... little
2022-05-13T17:36:22.5861561Z checking supplied paths for OpenSSL...  
2022-05-13T17:36:22.5862406Z checking additional paths for OpenSSL... none
2022-05-13T17:36:22.8356035Z checking openssl/opensslv.h usability... yes
2022-05-13T17:36:22.9518249Z checking openssl/opensslv.h presence... yes
2022-05-13T17:36:22.9521857Z checking for openssl/opensslv.h... yes
2022-05-13T17:36:23.3668026Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T17:36:23.7710530Z checking for MD5_Update in -lcrypto... yes
2022-05-13T17:36:23.7730695Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T17:36:24.2639618Z checking for sqrt in -lm... yes
2022-05-13T17:36:24.6383377Z checking for clock_gettime in -lrt... yes
2022-05-13T17:36:25.0367113Z checking for deflate in -lz... yes
2022-05-13T17:36:25.9541838Z checking for library containing crypt... -lcrypt
2022-05-13T17:36:26.3243153Z checking gmp.h usability... yes
2022-05-13T17:36:26.4834470Z checking gmp.h presence... yes
2022-05-13T17:36:26.4837170Z checking for gmp.h... yes
2022-05-13T17:36:26.9917151Z checking for __gmpz_init in -lgmp... yes
2022-05-13T17:36:27.3399627Z checking skey.h usability... no
2022-05-13T17:36:27.5810383Z checking skey.h presence... no
2022-05-13T17:36:27.5813196Z checking for skey.h... no
2022-05-13T17:36:27.5819232Z checking for S/Key... using our own code
2022-05-13T17:36:27.8290941Z checking bzlib.h usability... yes
2022-05-13T17:36:27.9900535Z checking bzlib.h presence... yes
2022-05-13T17:36:27.9903148Z checking for bzlib.h... yes
2022-05-13T17:36:28.4139975Z checking for main in -lbz2... yes
2022-05-13T17:36:28.8415346Z checking for main in -lkernel32... yes
2022-05-13T17:36:29.2737278Z checking for dlopen in -ldl... yes
2022-05-13T17:36:30.7115813Z checking intrin.h usability... yes
2022-05-13T17:36:31.1264951Z checking intrin.h presence... yes
2022-05-13T17:36:31.1266379Z checking for intrin.h... yes
2022-05-13T17:36:31.4710532Z checking openssl/cmac.h usability... yes
2022-05-13T17:36:31.7185092Z checking openssl/cmac.h presence... yes
2022-05-13T17:36:31.7186429Z checking for openssl/cmac.h... yes
2022-05-13T17:36:31.7455677Z configure: rexgen check not enabled
2022-05-13T17:36:32.1495463Z checking pcap.h usability... no
2022-05-13T17:36:32.4034444Z checking pcap.h presence... no
2022-05-13T17:36:32.4036324Z checking for pcap.h... no
2022-05-13T17:36:32.8198297Z checking pcap/pcap.h usability... no
2022-05-13T17:36:33.0849889Z checking pcap/pcap.h presence... no
2022-05-13T17:36:33.0855668Z checking for pcap/pcap.h... no
2022-05-13T17:36:33.1555908Z checking for pcap.h... (cached) no
2022-05-13T17:36:33.2282451Z checking for pcap/pcap.h... (cached) no
2022-05-13T17:36:33.4592151Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T17:36:33.6527899Z checking whether string.h and strings.h may both be included... yes
2022-05-13T17:36:34.1142237Z checking for SHA256... yes
2022-05-13T17:36:34.7256019Z checking for WHIRLPOOL... yes
2022-05-13T17:36:35.3203867Z checking for RIPEMD160... yes
2022-05-13T17:36:35.8983595Z checking for AES_encrypt... yes
2022-05-13T17:36:36.4908693Z checking for DSA_get0_pqg... yes
2022-05-13T17:36:36.8000142Z checking additional paths for OpenCL... none
2022-05-13T17:36:37.0727242Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T17:36:37.6489829Z checking for the pthreads library -lpthreads... no
2022-05-13T17:36:38.0771637Z checking whether pthreads work without any flags... yes
2022-05-13T17:36:38.4734837Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T17:36:38.4736632Z checking if more special flags are required for pthreads... no
2022-05-13T17:36:38.7952479Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T17:36:39.0343949Z checking whether we are using the Microsoft C compiler... no
2022-05-13T17:36:39.3789609Z checking CL/cl.h usability... yes
2022-05-13T17:36:39.5543838Z checking CL/cl.h presence... yes
2022-05-13T17:36:39.5546138Z checking for CL/cl.h... yes
2022-05-13T17:36:40.0908418Z checking OpenCL/cl.h usability... no
2022-05-13T17:36:40.3073946Z checking OpenCL/cl.h presence... no
2022-05-13T17:36:40.3075694Z checking for OpenCL/cl.h... no
2022-05-13T17:36:42.9636893Z checking windows.h usability... yes
2022-05-13T17:36:44.3618980Z checking windows.h presence... yes
2022-05-13T17:36:44.3620280Z checking for windows.h... yes
2022-05-13T17:36:44.9367254Z checking for OpenCL library... -lOpenCL
2022-05-13T17:36:45.2580989Z checking arpa/inet.h usability... yes
2022-05-13T17:36:45.4436161Z checking arpa/inet.h presence... yes
2022-05-13T17:36:45.4490004Z checking for arpa/inet.h... yes
2022-05-13T17:36:45.8391735Z checking crypt.h usability... yes
2022-05-13T17:36:45.9735562Z checking crypt.h presence... yes
2022-05-13T17:36:45.9738318Z checking for crypt.h... yes
2022-05-13T17:36:46.3660614Z checking dirent.h usability... yes
2022-05-13T17:36:46.5394443Z checking dirent.h presence... yes
2022-05-13T17:36:46.5396467Z checking for dirent.h... yes
2022-05-13T17:36:46.9289831Z checking limits.h usability... yes
2022-05-13T17:36:47.0530547Z checking limits.h presence... yes
2022-05-13T17:36:47.0533970Z checking for limits.h... yes
2022-05-13T17:36:47.4291356Z checking locale.h usability... yes
2022-05-13T17:36:47.5687428Z checking locale.h presence... yes
2022-05-13T17:36:47.5689558Z checking for locale.h... yes
2022-05-13T17:36:47.9424389Z checking malloc.h usability... yes
2022-05-13T17:36:48.0920815Z checking malloc.h presence... yes
2022-05-13T17:36:48.0923388Z checking for malloc.h... yes
2022-05-13T17:36:48.5847898Z checking net/ethernet.h usability... no
2022-05-13T17:36:48.7937763Z checking net/ethernet.h presence... no
2022-05-13T17:36:48.7939058Z checking for net/ethernet.h... no
2022-05-13T17:36:49.1052555Z checking netdb.h usability... yes
2022-05-13T17:36:49.2627566Z checking netdb.h presence... yes
2022-05-13T17:36:49.2629885Z checking for netdb.h... yes
2022-05-13T17:36:49.6815391Z checking netinet/in.h usability... yes
2022-05-13T17:36:49.8255335Z checking netinet/in.h presence... yes
2022-05-13T17:36:49.8257258Z checking for netinet/in.h... yes
2022-05-13T17:36:50.2256832Z checking netinet/in_systm.h usability... yes
2022-05-13T17:36:50.3846587Z checking netinet/in_systm.h presence... yes
2022-05-13T17:36:50.3848004Z checking for netinet/in_systm.h... yes
2022-05-13T17:36:50.5612009Z checking for string.h... (cached) yes
2022-05-13T17:36:50.7073581Z checking for strings.h... (cached) yes
2022-05-13T17:36:51.2432088Z checking sys/ethernet.h usability... no
2022-05-13T17:36:51.4739468Z checking sys/ethernet.h presence... no
2022-05-13T17:36:51.4741346Z checking for sys/ethernet.h... no
2022-05-13T17:36:51.7676745Z checking sys/file.h usability... yes
2022-05-13T17:36:51.9179036Z checking sys/file.h presence... yes
2022-05-13T17:36:51.9181039Z checking for sys/file.h... yes
2022-05-13T17:36:52.3079346Z checking sys/param.h usability... yes
2022-05-13T17:36:52.4502438Z checking sys/param.h presence... yes
2022-05-13T17:36:52.4504573Z checking for sys/param.h... yes
2022-05-13T17:36:52.8469516Z checking sys/socket.h usability... yes
2022-05-13T17:36:53.0007468Z checking sys/socket.h presence... yes
2022-05-13T17:36:53.0009393Z checking for sys/socket.h... yes
2022-05-13T17:36:53.3929992Z checking sys/time.h usability... yes
2022-05-13T17:36:53.5356147Z checking sys/time.h presence... yes
2022-05-13T17:36:53.5357871Z checking for sys/time.h... yes
2022-05-13T17:36:53.9255240Z checking sys/times.h usability... yes
2022-05-13T17:36:54.0614914Z checking sys/times.h presence... yes
2022-05-13T17:36:54.0616269Z checking for sys/times.h... yes
2022-05-13T17:36:54.2037844Z checking for sys/types.h... (cached) yes
2022-05-13T17:36:54.5877351Z checking termios.h usability... yes
2022-05-13T17:36:54.7220053Z checking termios.h presence... yes
2022-05-13T17:36:54.7223924Z checking for termios.h... yes
2022-05-13T17:36:54.8876743Z checking for unistd.h... (cached) yes
2022-05-13T17:36:55.4098933Z checking unixlib/local.h usability... no
2022-05-13T17:36:55.6359504Z checking unixlib/local.h presence... no
2022-05-13T17:36:55.6361534Z checking for unixlib/local.h... no
2022-05-13T17:36:55.6889681Z checking for windows.h... (cached) yes
2022-05-13T17:36:55.9765236Z checking for net/if.h... yes
2022-05-13T17:36:56.2626804Z checking for net/if_arp.h... no
2022-05-13T17:36:56.6215080Z checking for netinet/if_ether.h... no
2022-05-13T17:36:56.8269793Z checking for netinet/ip.h... yes
2022-05-13T17:36:57.2568630Z checking for stdbool.h that conforms to C99... yes
2022-05-13T17:36:57.8815394Z checking for _Bool... yes
2022-05-13T17:36:58.0839837Z checking for inline... inline
2022-05-13T17:36:58.7032745Z checking for int32_t... yes
2022-05-13T17:36:59.3324529Z checking for int64_t... yes
2022-05-13T17:36:59.9675391Z checking for off_t... yes
2022-05-13T17:37:00.6022546Z checking for size_t... yes
2022-05-13T17:37:01.2515812Z checking for ssize_t... yes
2022-05-13T17:37:01.5253939Z checking for uint16_t... yes
2022-05-13T17:37:01.7920704Z checking for uint32_t... yes
2022-05-13T17:37:02.0884032Z checking for uint64_t... yes
2022-05-13T17:37:02.3738148Z checking for uint8_t... yes
2022-05-13T17:37:03.0197167Z checking for ptrdiff_t... yes
2022-05-13T17:37:03.4001409Z checking for int128... no
2022-05-13T17:37:04.0724672Z checking for __int128... yes
2022-05-13T17:37:04.7152024Z checking for __int128_t... yes
2022-05-13T17:37:05.1556968Z checking for error_at_line... yes
2022-05-13T17:37:05.7842378Z checking for pid_t... yes
2022-05-13T17:37:06.0932609Z checking vfork.h usability... no
2022-05-13T17:37:06.3022207Z checking vfork.h presence... no
2022-05-13T17:37:06.3024248Z checking for vfork.h... no
2022-05-13T17:37:06.8750149Z checking for fork... yes
2022-05-13T17:37:07.4299830Z checking for vfork... yes
2022-05-13T17:37:07.9966784Z checking for working fork... yes
2022-05-13T17:37:07.9968628Z checking for working vfork... (cached) yes
2022-05-13T17:37:08.6330880Z checking for fseek64... no
2022-05-13T17:37:09.1266488Z checking for fseeko... yes
2022-05-13T17:37:09.7841008Z checking for fseeko64... no
2022-05-13T17:37:10.3293145Z checking for _fseeki64... no
2022-05-13T17:37:10.8521254Z checking for lseek64... no
2022-05-13T17:37:11.3107668Z checking for lseek... yes
2022-05-13T17:37:11.9376551Z checking for ftell64... no
2022-05-13T17:37:12.3814592Z checking for ftello... yes
2022-05-13T17:37:13.0038545Z checking for ftello64... no
2022-05-13T17:37:13.5409757Z checking for _ftelli64... no
2022-05-13T17:37:14.1435717Z checking for fopen64... no
2022-05-13T17:37:14.7172035Z checking for _fopen64... no
2022-05-13T17:37:15.1732928Z checking for memmem... yes
2022-05-13T17:37:15.7235890Z checking for mmap... yes
2022-05-13T17:37:16.2607626Z checking for sleep... yes
2022-05-13T17:37:16.7951604Z checking for setenv... yes
2022-05-13T17:37:17.3512982Z checking for putenv... yes
2022-05-13T17:37:17.9999405Z checking for strcasecmp... yes
2022-05-13T17:37:18.6181828Z checking for strncasecmp... yes
2022-05-13T17:37:19.2449199Z checking for stricmp... no
2022-05-13T17:37:19.9687687Z checking for strcmpi... no
2022-05-13T17:37:20.4981907Z checking for _stricmp... no
2022-05-13T17:37:21.0532155Z checking for _strcmpi... no
2022-05-13T17:37:21.6106542Z checking for strnicmp... no
2022-05-13T17:37:22.1748726Z checking for strncmpi... no
2022-05-13T17:37:22.7100743Z checking for _strnicmp... no
2022-05-13T17:37:23.2517390Z checking for _strncmpi... no
2022-05-13T17:37:23.7925216Z checking for strnlen... yes
2022-05-13T17:37:24.3235641Z checking for strlwr... yes
2022-05-13T17:37:24.8473661Z checking for strupr... yes
2022-05-13T17:37:25.5217953Z checking for strrev... no
2022-05-13T17:37:25.9900482Z checking for atoll... yes
2022-05-13T17:37:26.6475478Z checking for _atoi64... no
2022-05-13T17:37:27.1708045Z checking for snprintf... yes
2022-05-13T17:37:27.7570071Z checking for sprintf_s... no
2022-05-13T17:37:28.2386532Z checking for strcasestr... yes
2022-05-13T17:37:28.7438876Z checking for clGetKernelArgInfo... yes
2022-05-13T17:37:29.2752135Z checking for posix_memalign... yes
2022-05-13T17:37:29.7319744Z checking for yasm that supports "-f win64"... 
2022-05-13T17:37:29.7339312Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T17:37:30.1210735Z checking for _get_osfhandle... yes
2022-05-13T17:37:32.9679358Z checking for GetFileSizeEx... yes
2022-05-13T17:37:32.9944610Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T17:37:34.1900297Z checking size of size_t... 8
2022-05-13T17:37:34.1902932Z checking size of off_t... 8
2022-05-13T17:37:34.1903815Z configure: Fuzz check disabled
2022-05-13T17:37:34.1904619Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T17:37:34.1907914Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T17:37:34.2429113Z configure: creating Makefile dependencies
2022-05-13T17:37:36.8640489Z configure: creating ./john_build_rule.h
2022-05-13T17:37:37.1672977Z configure: creating ./config.status
2022-05-13T17:37:38.9515389Z config.status: creating Makefile
2022-05-13T17:37:39.1912285Z config.status: creating aes/Makefile
2022-05-13T17:37:39.4898360Z config.status: creating aes/aesni/Makefile
2022-05-13T17:37:39.7883847Z config.status: creating aes/openssl/Makefile
2022-05-13T17:37:40.0990444Z config.status: creating secp256k1/Makefile
2022-05-13T17:37:40.3786656Z config.status: creating ed25519-donna/Makefile
2022-05-13T17:37:40.6625719Z config.status: creating poly1305-donna/Makefile
2022-05-13T17:37:40.9566196Z config.status: creating autoconfig.h
2022-05-13T17:37:41.0437012Z config.status: autoconfig.h is unchanged
2022-05-13T17:37:41.0998689Z config.status: linking x86-64.h to arch.h
2022-05-13T17:37:41.1751071Z config.status: executing default commands
2022-05-13T17:37:41.1991127Z configure: creating ./fmt_externs.h
2022-05-13T17:37:50.7079063Z configure: creating ./fmt_registers.h
2022-05-13T17:38:02.8990874Z 
2022-05-13T17:38:02.8994520Z Configured for building John the Ripper jumbo:
2022-05-13T17:38:02.8997686Z 
2022-05-13T17:38:02.8999291Z Target CPU ......................................... x86_64 XOP, 64-bit LE
2022-05-13T17:38:02.9000550Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T17:38:02.9001573Z Target OS .......................................... cygwin
2022-05-13T17:38:02.9002514Z Cross compiling .................................... no
2022-05-13T17:38:02.9003583Z Legacy arch header ................................. x86-64.h
2022-05-13T17:38:02.9004172Z 
2022-05-13T17:38:02.9004859Z Optional libraries/features found:
2022-05-13T17:38:02.9005616Z Memory map (share/page large files) ................ yes
2022-05-13T17:38:02.9006523Z Fork support ....................................... yes
2022-05-13T17:38:02.9007444Z OpenMP support ..................................... no
2022-05-13T17:38:02.9008285Z OpenCL support ..................................... yes
2022-05-13T17:38:02.9009188Z Generic crypt(3) format ............................ yes
2022-05-13T17:38:02.9010080Z OpenSSL (many additional formats) .................. yes
2022-05-13T17:38:02.9010969Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T17:38:02.9011796Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T17:38:02.9013317Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T17:38:02.9014361Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T17:38:02.9015332Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T17:38:02.9016151Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T17:38:02.9016906Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T17:38:02.9017859Z OpenMPI support (default disabled) ................. no
2022-05-13T17:38:02.9021096Z Experimental code (default disabled) ............... no
2022-05-13T17:38:02.9023359Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T17:38:02.9023875Z 
2022-05-13T17:38:02.9025028Z Install missing libraries to get any needed features that were omitted.
2022-05-13T17:38:02.9025511Z 
2022-05-13T17:38:02.9026134Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T17:39:41.6475788Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T17:39:41.6482859Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:41.6484299Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.6485256Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.6486266Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.6487076Z       |                         ^~~~
2022-05-13T17:39:41.6488054Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:41.6489063Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.6490010Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.6491163Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.6491959Z       |                         ^~~~
2022-05-13T17:39:41.6492734Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:39:41.6493756Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:41.6494612Z       | ^~~~~~~~~~~~
2022-05-13T17:39:41.6894344Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T17:39:41.6896412Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:41.6897387Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:41.6898142Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.6898923Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.6899625Z       |                         ^~~~
2022-05-13T17:39:41.6900515Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:41.6901462Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:41.6902266Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.6903635Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.6904338Z       |                         ^~~~
2022-05-13T17:39:41.6905075Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:39:41.6905874Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:41.6906604Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:41.7326440Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T17:39:41.7328166Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:39:41.7329517Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:41.7411997Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.7413580Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.7414256Z       |                         ^~~~
2022-05-13T17:39:41.7415282Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:41.7416411Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:41.7417400Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.7418301Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.7419130Z       |                         ^~~~
2022-05-13T17:39:41.7420048Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:39:41.7421280Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:39:41.7422156Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:41.8353827Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T17:39:41.8360598Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:41.8367264Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.8373322Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.8379133Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:39:41.8380049Z       |                 ^~~~
2022-05-13T17:39:41.8384195Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:41.8389091Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.8392438Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.8397681Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:39:41.8401541Z       |                 ^~~~
2022-05-13T17:39:41.8409328Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:39:41.8423454Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:41.8429619Z       | ^~~~~~~~~~~~
2022-05-13T17:39:41.9199608Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:39:41.9201557Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:39:41.9202818Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:39:41.9204112Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:41.9205185Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.9206783Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.9207888Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.9208699Z       |                 ^~~~
2022-05-13T17:39:41.9209883Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:39:41.9212006Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:41.9213163Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.9214157Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.9215129Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.9216457Z       |                 ^~~~
2022-05-13T17:39:41.9217384Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:39:41.9218473Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:41.9219287Z       | ^~~~~~~~~~~~
2022-05-13T17:39:41.9220105Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:39:41.9221171Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:39:41.9222320Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:39:41.9223597Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:41.9224686Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.9225575Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.9227152Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.9227865Z       |         ^~~~
2022-05-13T17:39:41.9228625Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:39:41.9229708Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:41.9230875Z   276 | #define RFUN   ripemd_round
2022-05-13T17:39:41.9231737Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:41.9232685Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:41.9233394Z       |         ^~~~
2022-05-13T17:39:41.9234201Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:39:41.9235149Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:41.9236570Z       | ^~~~~~~~~~~~
2022-05-13T17:39:42.3287849Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T17:39:42.3289850Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:42.3291350Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:42.3292321Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.3293784Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:39:42.3294520Z       |                 ^~~~
2022-05-13T17:39:42.3297479Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:42.3298458Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:42.3299407Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.3300335Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:39:42.3301337Z       |                 ^~~~
2022-05-13T17:39:42.3302200Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:39:42.3303218Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:42.3304114Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:42.3988187Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:39:42.3989766Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:39:42.3992434Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:39:42.3993843Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:42.3994983Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:42.3995819Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.3996606Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.3998704Z       |                 ^~~~
2022-05-13T17:39:42.3999706Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:39:42.4000740Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:42.4002563Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:42.4003971Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.4004912Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.4005637Z       |                 ^~~~
2022-05-13T17:39:42.4006525Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:39:42.4008831Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:42.4009745Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:42.4010800Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:39:42.4011802Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:39:42.4012781Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:39:42.4015106Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:39:42.4016279Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:42.4017204Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.4018086Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.4018834Z       |         ^~~~
2022-05-13T17:39:42.4019566Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:39:42.4020961Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:42.4022075Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:39:42.4022940Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.4023815Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.4024560Z       |         ^~~~
2022-05-13T17:39:42.4025384Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:39:42.4026340Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:39:42.4027135Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:42.8914560Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T17:39:42.8916864Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:39:42.8917828Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:42.8918635Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.8919391Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:39:42.8920046Z       |                 ^~~~
2022-05-13T17:39:42.8922904Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:42.8923822Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:42.8924640Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.8925325Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:39:42.8925978Z       |                 ^~~~
2022-05-13T17:39:42.8926736Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:39:42.8928579Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:39:42.8929334Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:42.9824446Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:39:42.9826322Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:39:42.9827587Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:39:42.9829086Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:39:42.9830929Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:42.9832862Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.9835470Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.9836480Z       |                 ^~~~
2022-05-13T17:39:42.9837349Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:39:42.9838370Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:42.9839361Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:42.9840229Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.9843106Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.9844411Z       |                 ^~~~
2022-05-13T17:39:42.9845362Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:39:42.9846382Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:39:42.9847250Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:39:42.9848068Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:39:42.9849063Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:39:42.9850130Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:39:42.9851466Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:39:42.9878293Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:42.9879365Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.9880290Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.9881103Z       |         ^~~~
2022-05-13T17:39:42.9881949Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:39:42.9882992Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:39:42.9884039Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:39:42.9884924Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:39:42.9885827Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:39:42.9886571Z       |         ^~~~
2022-05-13T17:39:42.9887408Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:39:42.9888355Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:39:42.9889227Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:40:54.2486489Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:40:54.2489532Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2491320Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:40:54.2492491Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2493430Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T17:40:54.2494920Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2496972Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T17:40:54.2498019Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2499439Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:40:54.2500354Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2501314Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:40:54.2502350Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2503378Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:40:54.2504407Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2505398Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:40:54.2506199Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:40:54.2506991Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:40:54.2507861Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:40:54.2508684Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2527476Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2546667Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:40:54.2557604Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2558405Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T17:40:54.2559451Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2560205Z   366 |                                         keys,
2022-05-13T17:40:54.2560856Z       |                                         ~~~~~
2022-05-13T17:40:54.2561582Z   367 |                                         lens, cur_salt->salt,
2022-05-13T17:40:54.2562623Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2563371Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T17:40:54.2564119Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2564965Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:40:54.2565967Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2566990Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:40:54.2568070Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2569341Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:40:54.2570195Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:40:54.2571045Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:40:54.2571966Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:40:54.2572784Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2573662Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2574614Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:40:54.2575434Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2577242Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T17:40:54.2577993Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2578628Z   374 |                                         keys,
2022-05-13T17:40:54.2579588Z       |                                         ~~~~~
2022-05-13T17:40:54.2580284Z   375 |                                         lens, cur_salt->salt,
2022-05-13T17:40:54.2580967Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2581644Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T17:40:54.2582383Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:40:54.2583192Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:40:54.2584200Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2585175Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:40:54.2586235Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:40:54.2587218Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:40:54.2588020Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:40:54.2588826Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:40:54.2590254Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:40:54.2591088Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9181845Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:42:54.9185589Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:42:54.9187151Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:42:54.9188628Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9190150Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:42:54.9191361Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9192307Z   225 |                                         lens, cur_salt->salt,
2022-05-13T17:42:54.9193231Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9194154Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:42:54.9195062Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9196145Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:42:54.9197562Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:42:54.9198976Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:42:54.9200502Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:42:54.9202010Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:42:54.9203142Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:42:54.9204219Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:42:54.9205477Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:42:54.9207805Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9210366Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:42:54.9212015Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:42:54.9213346Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9214430Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:42:54.9215361Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9216308Z   247 |                                         lens, cur_salt->salt,
2022-05-13T17:42:54.9217210Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9218144Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:42:54.9219078Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9220181Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:42:54.9221902Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:42:54.9223629Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:42:54.9225845Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:42:54.9227669Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:42:54.9228862Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:42:54.9230087Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:42:54.9231508Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:42:54.9232677Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9233859Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:42:54.9235225Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:42:54.9236417Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9237506Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:42:54.9238458Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9239390Z   270 |                                         lens, cur_salt->salt,
2022-05-13T17:42:54.9240298Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9241402Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:42:54.9242307Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:42:54.9243352Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:42:54.9244738Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:42:54.9246128Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:42:54.9247566Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:42:54.9248774Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:42:54.9249834Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:42:54.9250831Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:42:54.9252507Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:42:54.9253596Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2664047Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:43:33.2667438Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:43:33.2668781Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:43:33.2669621Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2672182Z   117 |                                 cur_salt->iterations,
2022-05-13T17:43:33.2673081Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2674042Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T17:43:33.2677323Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2678450Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T17:43:33.2679430Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2681837Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:43:33.2683402Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:43:33.2684722Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:43:33.2686154Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:43:33.2688377Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:43:33.2690362Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:43:33.2692025Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:43:33.2693350Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:43:33.2694376Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2695604Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:43:33.2696921Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:43:33.2697616Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2698343Z   122 |                                 cur_salt->iterations,
2022-05-13T17:43:33.2699032Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2699806Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T17:43:33.2700811Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2701619Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T17:43:33.2702377Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:43:33.2703214Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:43:33.2704196Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:43:33.2705282Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:43:33.2706514Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:43:33.2707492Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:43:33.2708343Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:43:33.2709108Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:43:33.2710028Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:43:33.2710834Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5131919Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T17:44:09.5134230Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:44:09.5136213Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:44:09.5137495Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5138546Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:44:09.5139607Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5140561Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T17:44:09.5141489Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5142397Z   138 |                                                    salt_len, mackey,
2022-05-13T17:44:09.5143296Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5144124Z   139 |                                                    BINARY_SIZE);
2022-05-13T17:44:09.5145041Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:44:09.5146135Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:44:09.5147757Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:44:09.5149276Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:44:09.5150646Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:44:09.5152100Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:44:09.5153169Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:44:09.5154274Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:44:09.5155504Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:44:09.5156653Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5158041Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:44:09.5159761Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:44:09.5160857Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5161848Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:44:09.5162805Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5163748Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T17:44:09.5164627Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5165474Z   153 |                                                    salt_len, mackey,
2022-05-13T17:44:09.5166326Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:44:09.5167140Z   154 |                                                    BINARY_SIZE);
2022-05-13T17:44:09.5168193Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:44:09.5169255Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:44:09.5170571Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:44:09.5171846Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:44:09.5173277Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:44:09.5174849Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:44:09.5175822Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:44:09.5176861Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:44:09.5178266Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:44:09.5179403Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:44:50.8270751Z In file included from subsets.c:25:
2022-05-13T17:44:50.8272833Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T17:44:50.8275000Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T17:44:50.8277956Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T17:44:50.8279868Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T17:47:29.5709840Z ar: creating aes.a
2022-05-13T17:47:41.3590782Z ar: creating secp256k1.a
2022-05-13T17:47:49.6838265Z ar: creating ed25519-donna.a
2022-05-13T17:47:50.2786241Z ar: creating poly1305-donna.a
2022-05-13T17:48:26.0234622Z 
2022-05-13T17:48:26.0485782Z Make process completed.
2022-05-13T17:48:27.5655473Z 
2022-05-13T17:48:27.5986320Z Make process completed.
2022-05-13T17:48:27.6219333Z Stripping executables.
2022-05-13T17:48:28.3682925Z Executing './configure --disable-native-tests --enable-simd=xop    CPPFLAGS='-DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-xop-non-omp\\\"\"   -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-avx\\\"\" '   && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-xop'
2022-05-13T17:48:31.1964240Z checking build system type... x86_64-unknown-cygwin
2022-05-13T17:48:31.1968556Z checking host system type... x86_64-unknown-cygwin
2022-05-13T17:48:31.2105588Z checking whether to compile using MPI... no
2022-05-13T17:48:31.2119301Z checking for gcc... gcc
2022-05-13T17:48:31.9981791Z checking whether the C compiler works... yes
2022-05-13T17:48:31.9984446Z checking for C compiler default output file name... a.exe
2022-05-13T17:48:32.3601117Z checking for suffix of executables... .exe
2022-05-13T17:48:32.7964413Z checking whether we are cross compiling... no
2022-05-13T17:48:33.0263541Z checking for suffix of object files... o
2022-05-13T17:48:33.2105383Z checking whether we are using the GNU C compiler... yes
2022-05-13T17:48:33.4069085Z checking whether gcc accepts -g... yes
2022-05-13T17:48:33.6890163Z checking for gcc option to accept ISO C89... none needed
2022-05-13T17:48:33.9509582Z checking whether gcc understands -c and -o together... yes
2022-05-13T17:48:34.3425324Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T17:48:34.3429349Z checking whether gcc accepts -g... (cached) yes
2022-05-13T17:48:34.3430659Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T17:48:34.3433654Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T17:48:34.3449789Z checking additional paths...  -L/usr/local/lib
2022-05-13T17:48:35.1446005Z checking arg check macro for -m with gcc... yes
2022-05-13T17:48:35.4253221Z checking arg check macro for -Q with gcc... yes
2022-05-13T17:48:35.5727751Z checking if gcc supports -funroll-loops... yes
2022-05-13T17:48:35.7591184Z checking if gcc supports -Os... yes
2022-05-13T17:48:36.1454595Z checking if gcc supports -finline-functions... yes
2022-05-13T17:48:36.3294061Z checking if gcc supports -Og... yes
2022-05-13T17:48:36.5087716Z checking if gcc supports -Wall... yes
2022-05-13T17:48:36.7067442Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T17:48:36.9091841Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T17:48:37.1248480Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T17:48:37.4679191Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T17:48:37.6761487Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T17:48:37.9892111Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T17:48:38.1861868Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T17:48:38.4881981Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T17:48:38.6771670Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T17:48:38.9346134Z checking if gcc supports -Qunused-arguments... no
2022-05-13T17:48:39.1473742Z checking if gcc supports -std=gnu89... yes
2022-05-13T17:48:39.3349092Z checking if gcc supports -Wdate-time... yes
2022-05-13T17:48:39.7162760Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T17:48:40.1327238Z checking for 32/64 bit... 64-bit
2022-05-13T17:48:40.1560906Z checking additional paths (64 bit)... none
2022-05-13T17:48:40.1564020Z checking whether ln -s works... yes
2022-05-13T17:48:40.2096423Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T17:48:40.2725801Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T17:48:40.3833409Z checking for GNU make... make
2022-05-13T17:48:40.5639659Z checking whether make sets $(MAKE)... yes
2022-05-13T17:48:40.9120412Z checking how to run the C preprocessor... gcc -E
2022-05-13T17:48:41.3108575Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T17:48:41.5432777Z checking for sort... /usr/bin/sort
2022-05-13T17:48:41.5442820Z checking for find... /usr/bin/find
2022-05-13T17:48:41.5454050Z checking for perl... /usr/bin/perl
2022-05-13T17:48:41.5465353Z checking for ar... ar
2022-05-13T17:48:41.5479413Z checking for strip... strip
2022-05-13T17:48:41.5490839Z checking for strings... strings
2022-05-13T17:48:41.5530315Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T17:48:41.5744971Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T17:48:41.5746846Z checking if pkg-config will be used... no
2022-05-13T17:48:41.6372432Z checking for egrep... /usr/bin/grep -E
2022-05-13T17:48:42.6347891Z checking for ANSI C header files... yes
2022-05-13T17:48:42.9407446Z checking for sys/types.h... yes
2022-05-13T17:48:43.3242141Z checking for sys/stat.h... yes
2022-05-13T17:48:43.7050350Z checking for stdlib.h... yes
2022-05-13T17:48:44.0928019Z checking for string.h... yes
2022-05-13T17:48:44.4760454Z checking for memory.h... yes
2022-05-13T17:48:44.8772539Z checking for strings.h... yes
2022-05-13T17:48:45.2680004Z checking for inttypes.h... yes
2022-05-13T17:48:45.6264010Z checking for stdint.h... yes
2022-05-13T17:48:46.0138376Z checking for unistd.h... yes
2022-05-13T17:48:46.5877888Z checking size of short... 2
2022-05-13T17:48:47.1348357Z checking size of int... 4
2022-05-13T17:48:47.6846826Z checking size of long... 8
2022-05-13T17:48:48.2227721Z checking size of long long... 8
2022-05-13T17:48:48.7746231Z checking size of wchar_t... 2
2022-05-13T17:48:49.3330075Z checking size of int *... 8
2022-05-13T17:48:49.8851259Z checking size of void *... 8
2022-05-13T17:48:49.9588918Z configure: Trying to force XOP using default method (--enable-simd=xop).
2022-05-13T17:48:50.3129872Z checking if gcc supports -mxop w/ linking... yes
2022-05-13T17:48:51.2741079Z checking for extra ASFLAGS... None needed
2022-05-13T17:48:51.2742335Z checking for X32 ABI... no
2022-05-13T17:48:51.2743829Z checking special compiler flags... Intel x86
2022-05-13T17:48:51.2744739Z configure: Testing tool-chain's CPU support with given options
2022-05-13T17:48:51.4265540Z checking for MMX... yes
2022-05-13T17:48:51.9060249Z checking for SSE2... yes
2022-05-13T17:48:52.3934270Z checking for SSSE3... yes
2022-05-13T17:48:52.8646445Z checking for SSE4.1... yes
2022-05-13T17:48:53.3385057Z checking for SSE4.2... yes
2022-05-13T17:48:54.5602961Z checking for AVX... yes
2022-05-13T17:48:55.8224417Z checking for XOP... yes
2022-05-13T17:48:57.0406235Z checking for AVX2... no
2022-05-13T17:48:57.0706942Z checking for arch.h alternative... x86-64.h
2022-05-13T17:48:57.0708661Z checking for byte ordering according to target triple... little
2022-05-13T17:48:57.0711850Z checking supplied paths for OpenSSL...  
2022-05-13T17:48:57.0716348Z checking additional paths for OpenSSL... none
2022-05-13T17:48:57.3101628Z checking openssl/opensslv.h usability... yes
2022-05-13T17:48:57.4269607Z checking openssl/opensslv.h presence... yes
2022-05-13T17:48:57.4270968Z checking for openssl/opensslv.h... yes
2022-05-13T17:48:57.8441691Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T17:48:58.2623340Z checking for MD5_Update in -lcrypto... yes
2022-05-13T17:48:58.2643968Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T17:48:58.7596189Z checking for sqrt in -lm... yes
2022-05-13T17:48:59.1527097Z checking for clock_gettime in -lrt... yes
2022-05-13T17:48:59.5535314Z checking for deflate in -lz... yes
2022-05-13T17:49:00.4511579Z checking for library containing crypt... -lcrypt
2022-05-13T17:49:00.7903763Z checking gmp.h usability... yes
2022-05-13T17:49:00.9410821Z checking gmp.h presence... yes
2022-05-13T17:49:00.9412739Z checking for gmp.h... yes
2022-05-13T17:49:01.4533141Z checking for __gmpz_init in -lgmp... yes
2022-05-13T17:49:01.7928684Z checking skey.h usability... no
2022-05-13T17:49:02.0475725Z checking skey.h presence... no
2022-05-13T17:49:02.0477394Z checking for skey.h... no
2022-05-13T17:49:02.0483391Z checking for S/Key... using our own code
2022-05-13T17:49:02.2939930Z checking bzlib.h usability... yes
2022-05-13T17:49:02.4433311Z checking bzlib.h presence... yes
2022-05-13T17:49:02.4436337Z checking for bzlib.h... yes
2022-05-13T17:49:02.8514219Z checking for main in -lbz2... yes
2022-05-13T17:49:03.3035265Z checking for main in -lkernel32... yes
2022-05-13T17:49:03.7755179Z checking for dlopen in -ldl... yes
2022-05-13T17:49:05.1791114Z checking intrin.h usability... yes
2022-05-13T17:49:05.6165531Z checking intrin.h presence... yes
2022-05-13T17:49:05.6167383Z checking for intrin.h... yes
2022-05-13T17:49:05.9656578Z checking openssl/cmac.h usability... yes
2022-05-13T17:49:06.2215352Z checking openssl/cmac.h presence... yes
2022-05-13T17:49:06.2217241Z checking for openssl/cmac.h... yes
2022-05-13T17:49:06.2445654Z configure: rexgen check not enabled
2022-05-13T17:49:06.6592067Z checking pcap.h usability... no
2022-05-13T17:49:06.8948908Z checking pcap.h presence... no
2022-05-13T17:49:06.8950806Z checking for pcap.h... no
2022-05-13T17:49:07.2974187Z checking pcap/pcap.h usability... no
2022-05-13T17:49:07.5302687Z checking pcap/pcap.h presence... no
2022-05-13T17:49:07.5305333Z checking for pcap/pcap.h... no
2022-05-13T17:49:07.5913582Z checking for pcap.h... (cached) no
2022-05-13T17:49:07.6517286Z checking for pcap/pcap.h... (cached) no
2022-05-13T17:49:07.9360090Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T17:49:08.1521370Z checking whether string.h and strings.h may both be included... yes
2022-05-13T17:49:08.6696240Z checking for SHA256... yes
2022-05-13T17:49:09.2876030Z checking for WHIRLPOOL... yes
2022-05-13T17:49:09.8879055Z checking for RIPEMD160... yes
2022-05-13T17:49:10.4784910Z checking for AES_encrypt... yes
2022-05-13T17:49:11.0781515Z checking for DSA_get0_pqg... yes
2022-05-13T17:49:12.1930526Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T17:49:12.1936546Z checking additional paths for OpenCL... none
2022-05-13T17:49:12.4916620Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T17:49:13.1866041Z checking for the pthreads library -lpthreads... no
2022-05-13T17:49:13.6866568Z checking whether pthreads work without any flags... yes
2022-05-13T17:49:14.1472562Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T17:49:14.1475327Z checking if more special flags are required for pthreads... no
2022-05-13T17:49:14.4990275Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T17:49:14.7786820Z checking whether we are using the Microsoft C compiler... no
2022-05-13T17:49:15.1509292Z checking CL/cl.h usability... yes
2022-05-13T17:49:15.3146686Z checking CL/cl.h presence... yes
2022-05-13T17:49:15.3148763Z checking for CL/cl.h... yes
2022-05-13T17:49:15.8276393Z checking OpenCL/cl.h usability... no
2022-05-13T17:49:16.0468397Z checking OpenCL/cl.h presence... no
2022-05-13T17:49:16.0472501Z checking for OpenCL/cl.h... no
2022-05-13T17:49:18.7658952Z checking windows.h usability... yes
2022-05-13T17:49:20.1542723Z checking windows.h presence... yes
2022-05-13T17:49:20.1545791Z checking for windows.h... yes
2022-05-13T17:49:20.6591903Z checking for OpenCL library... -lOpenCL
2022-05-13T17:49:21.0099585Z checking arpa/inet.h usability... yes
2022-05-13T17:49:21.1629576Z checking arpa/inet.h presence... yes
2022-05-13T17:49:21.1630874Z checking for arpa/inet.h... yes
2022-05-13T17:49:21.5607356Z checking crypt.h usability... yes
2022-05-13T17:49:21.6814010Z checking crypt.h presence... yes
2022-05-13T17:49:21.6818981Z checking for crypt.h... yes
2022-05-13T17:49:22.1063635Z checking dirent.h usability... yes
2022-05-13T17:49:22.2655586Z checking dirent.h presence... yes
2022-05-13T17:49:22.2656873Z checking for dirent.h... yes
2022-05-13T17:49:22.7122752Z checking limits.h usability... yes
2022-05-13T17:49:22.8508463Z checking limits.h presence... yes
2022-05-13T17:49:22.8515058Z checking for limits.h... yes
2022-05-13T17:49:23.2794862Z checking locale.h usability... yes
2022-05-13T17:49:23.4061620Z checking locale.h presence... yes
2022-05-13T17:49:23.4063879Z checking for locale.h... yes
2022-05-13T17:49:23.8593030Z checking malloc.h usability... yes
2022-05-13T17:49:24.0155016Z checking malloc.h presence... yes
2022-05-13T17:49:24.0156786Z checking for malloc.h... yes
2022-05-13T17:49:24.5223297Z checking net/ethernet.h usability... no
2022-05-13T17:49:24.7462373Z checking net/ethernet.h presence... no
2022-05-13T17:49:24.7464208Z checking for net/ethernet.h... no
2022-05-13T17:49:25.0741450Z checking netdb.h usability... yes
2022-05-13T17:49:25.2352413Z checking netdb.h presence... yes
2022-05-13T17:49:25.2353853Z checking for netdb.h... yes
2022-05-13T17:49:25.6553076Z checking netinet/in.h usability... yes
2022-05-13T17:49:25.7973684Z checking netinet/in.h presence... yes
2022-05-13T17:49:25.7976024Z checking for netinet/in.h... yes
2022-05-13T17:49:26.2199820Z checking netinet/in_systm.h usability... yes
2022-05-13T17:49:26.3611575Z checking netinet/in_systm.h presence... yes
2022-05-13T17:49:26.3614134Z checking for netinet/in_systm.h... yes
2022-05-13T17:49:26.5389524Z checking for string.h... (cached) yes
2022-05-13T17:49:26.6899093Z checking for strings.h... (cached) yes
2022-05-13T17:49:27.2514884Z checking sys/ethernet.h usability... no
2022-05-13T17:49:27.4827906Z checking sys/ethernet.h presence... no
2022-05-13T17:49:27.4832253Z checking for sys/ethernet.h... no
2022-05-13T17:49:27.8573830Z checking sys/file.h usability... yes
2022-05-13T17:49:28.0448119Z checking sys/file.h presence... yes
2022-05-13T17:49:28.0449902Z checking for sys/file.h... yes
2022-05-13T17:49:28.4500055Z checking sys/param.h usability... yes
2022-05-13T17:49:28.6009347Z checking sys/param.h presence... yes
2022-05-13T17:49:28.6011917Z checking for sys/param.h... yes
2022-05-13T17:49:29.0420179Z checking sys/socket.h usability... yes
2022-05-13T17:49:29.1862219Z checking sys/socket.h presence... yes
2022-05-13T17:49:29.1863615Z checking for sys/socket.h... yes
2022-05-13T17:49:29.6099738Z checking sys/time.h usability... yes
2022-05-13T17:49:29.7962978Z checking sys/time.h presence... yes
2022-05-13T17:49:29.7964622Z checking for sys/time.h... yes
2022-05-13T17:49:30.2466203Z checking sys/times.h usability... yes
2022-05-13T17:49:30.3799171Z checking sys/times.h presence... yes
2022-05-13T17:49:30.3800590Z checking for sys/times.h... yes
2022-05-13T17:49:30.5300761Z checking for sys/types.h... (cached) yes
2022-05-13T17:49:30.9616687Z checking termios.h usability... yes
2022-05-13T17:49:31.1225934Z checking termios.h presence... yes
2022-05-13T17:49:31.1227628Z checking for termios.h... yes
2022-05-13T17:49:31.2764293Z checking for unistd.h... (cached) yes
2022-05-13T17:49:31.8197865Z checking unixlib/local.h usability... no
2022-05-13T17:49:32.0831017Z checking unixlib/local.h presence... no
2022-05-13T17:49:32.0834098Z checking for unixlib/local.h... no
2022-05-13T17:49:32.1581650Z checking for windows.h... (cached) yes
2022-05-13T17:49:32.5025960Z checking for net/if.h... yes
2022-05-13T17:49:32.8858766Z checking for net/if_arp.h... no
2022-05-13T17:49:33.2426839Z checking for netinet/if_ether.h... no
2022-05-13T17:49:33.4625827Z checking for netinet/ip.h... yes
2022-05-13T17:49:34.0245758Z checking for stdbool.h that conforms to C99... yes
2022-05-13T17:49:34.6492110Z checking for _Bool... yes
2022-05-13T17:49:34.8723097Z checking for inline... inline
2022-05-13T17:49:35.4652211Z checking for int32_t... yes
2022-05-13T17:49:36.1530690Z checking for int64_t... yes
2022-05-13T17:49:36.8366286Z checking for off_t... yes
2022-05-13T17:49:37.5017365Z checking for size_t... yes
2022-05-13T17:49:38.2245408Z checking for ssize_t... yes
2022-05-13T17:49:38.5259039Z checking for uint16_t... yes
2022-05-13T17:49:38.8667066Z checking for uint32_t... yes
2022-05-13T17:49:39.1645766Z checking for uint64_t... yes
2022-05-13T17:49:39.4496828Z checking for uint8_t... yes
2022-05-13T17:49:40.1229289Z checking for ptrdiff_t... yes
2022-05-13T17:49:40.4852781Z checking for int128... no
2022-05-13T17:49:41.1293088Z checking for __int128... yes
2022-05-13T17:49:41.7474731Z checking for __int128_t... yes
2022-05-13T17:49:42.2240046Z checking for error_at_line... yes
2022-05-13T17:49:42.8199082Z checking for pid_t... yes
2022-05-13T17:49:43.2099998Z checking vfork.h usability... no
2022-05-13T17:49:43.4535345Z checking vfork.h presence... no
2022-05-13T17:49:43.4537604Z checking for vfork.h... no
2022-05-13T17:49:44.0435364Z checking for fork... yes
2022-05-13T17:49:44.6328721Z checking for vfork... yes
2022-05-13T17:49:45.2647157Z checking for working fork... yes
2022-05-13T17:49:45.2662743Z checking for working vfork... (cached) yes
2022-05-13T17:49:45.8969718Z checking for fseek64... no
2022-05-13T17:49:46.4308689Z checking for fseeko... yes
2022-05-13T17:49:47.1298161Z checking for fseeko64... no
2022-05-13T17:49:47.7177752Z checking for _fseeki64... no
2022-05-13T17:49:48.3850543Z checking for lseek64... no
2022-05-13T17:49:48.8640205Z checking for lseek... yes
2022-05-13T17:49:49.5893713Z checking for ftell64... no
2022-05-13T17:49:50.1185315Z checking for ftello... yes
2022-05-13T17:49:50.9198612Z checking for ftello64... no
2022-05-13T17:49:51.5054835Z checking for _ftelli64... no
2022-05-13T17:49:52.0571653Z checking for fopen64... no
2022-05-13T17:49:52.6046277Z checking for _fopen64... no
2022-05-13T17:49:53.1225922Z checking for memmem... yes
2022-05-13T17:49:53.7035391Z checking for mmap... yes
2022-05-13T17:49:54.2848541Z checking for sleep... yes
2022-05-13T17:49:54.8453342Z checking for setenv... yes
2022-05-13T17:49:55.4263432Z checking for putenv... yes
2022-05-13T17:49:56.1517723Z checking for strcasecmp... yes
2022-05-13T17:49:56.8120068Z checking for strncasecmp... yes
2022-05-13T17:49:57.4898680Z checking for stricmp... no
2022-05-13T17:49:58.0773980Z checking for strcmpi... no
2022-05-13T17:49:58.6568972Z checking for _stricmp... no
2022-05-13T17:49:59.2435483Z checking for _strcmpi... no
2022-05-13T17:49:59.8708485Z checking for strnicmp... no
2022-05-13T17:50:00.5111202Z checking for strncmpi... no
2022-05-13T17:50:01.1088536Z checking for _strnicmp... no
2022-05-13T17:50:01.7394802Z checking for _strncmpi... no
2022-05-13T17:50:02.3834272Z checking for strnlen... yes
2022-05-13T17:50:02.9978896Z checking for strlwr... yes
2022-05-13T17:50:03.6082879Z checking for strupr... yes
2022-05-13T17:50:04.3248329Z checking for strrev... no
2022-05-13T17:50:04.8521495Z checking for atoll... yes
2022-05-13T17:50:05.6474456Z checking for _atoi64... no
2022-05-13T17:50:06.2843281Z checking for snprintf... yes
2022-05-13T17:50:06.9736028Z checking for sprintf_s... no
2022-05-13T17:50:07.5107482Z checking for strcasestr... yes
2022-05-13T17:50:08.0300837Z checking for clGetKernelArgInfo... yes
2022-05-13T17:50:08.6831678Z checking for posix_memalign... yes
2022-05-13T17:50:09.2691352Z checking for yasm that supports "-f win64"... 
2022-05-13T17:50:09.2722029Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T17:50:09.7386776Z checking for _get_osfhandle... yes
2022-05-13T17:50:13.9308091Z checking for GetFileSizeEx... yes
2022-05-13T17:50:13.9650983Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T17:50:14.5924509Z checking size of size_t... 8
2022-05-13T17:50:15.3116497Z checking size of off_t... 8
2022-05-13T17:50:15.3737073Z configure: Fuzz check disabled
2022-05-13T17:50:15.3740016Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T17:50:15.3865140Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T17:50:15.5248401Z configure: creating Makefile dependencies
2022-05-13T17:50:18.9045168Z configure: creating ./john_build_rule.h
2022-05-13T17:50:19.2789867Z configure: creating ./config.status
2022-05-13T17:50:21.3711882Z config.status: creating Makefile
2022-05-13T17:50:21.6517900Z config.status: creating aes/Makefile
2022-05-13T17:50:22.0392379Z config.status: creating aes/aesni/Makefile
2022-05-13T17:50:22.4046302Z config.status: creating aes/openssl/Makefile
2022-05-13T17:50:22.7485346Z config.status: creating secp256k1/Makefile
2022-05-13T17:50:23.1153019Z config.status: creating ed25519-donna/Makefile
2022-05-13T17:50:23.4722591Z config.status: creating poly1305-donna/Makefile
2022-05-13T17:50:23.8192907Z config.status: creating autoconfig.h
2022-05-13T17:50:23.9247405Z config.status: autoconfig.h is unchanged
2022-05-13T17:50:23.9891097Z config.status: linking x86-64.h to arch.h
2022-05-13T17:50:24.0834216Z config.status: executing default commands
2022-05-13T17:50:24.1177523Z configure: creating ./fmt_externs.h
2022-05-13T17:50:34.3246332Z configure: creating ./fmt_registers.h
2022-05-13T17:50:47.6087875Z 
2022-05-13T17:50:47.6090396Z Configured for building John the Ripper jumbo:
2022-05-13T17:50:47.6091923Z 
2022-05-13T17:50:47.6093307Z Target CPU ......................................... x86_64 XOP, 64-bit LE
2022-05-13T17:50:47.6095486Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T17:50:47.6097294Z Target OS .......................................... cygwin
2022-05-13T17:50:47.6099497Z Cross compiling .................................... no
2022-05-13T17:50:47.6101454Z Legacy arch header ................................. x86-64.h
2022-05-13T17:50:47.6104409Z 
2022-05-13T17:50:47.6105493Z Optional libraries/features found:
2022-05-13T17:50:47.6106713Z Memory map (share/page large files) ................ yes
2022-05-13T17:50:47.6107790Z Fork support ....................................... yes
2022-05-13T17:50:47.6108764Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T17:50:47.6109986Z OpenCL support ..................................... yes
2022-05-13T17:50:47.6112343Z Generic crypt(3) format ............................ yes
2022-05-13T17:50:47.6114958Z OpenSSL (many additional formats) .................. yes
2022-05-13T17:50:47.6116200Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T17:50:47.6117135Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T17:50:47.6118030Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T17:50:47.6118800Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T17:50:47.6119700Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T17:50:47.6120544Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T17:50:47.6121412Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T17:50:47.6122207Z OpenMPI support (default disabled) ................. no
2022-05-13T17:50:47.6123323Z Experimental code (default disabled) ............... no
2022-05-13T17:50:47.6124162Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T17:50:47.6124624Z 
2022-05-13T17:50:47.6125306Z Install missing libraries to get any needed features that were omitted.
2022-05-13T17:50:47.6125856Z 
2022-05-13T17:50:47.6126670Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T17:52:25.6453825Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T17:52:25.6458710Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:25.6460808Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.6463661Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.6464916Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.6466863Z       |                         ^~~~
2022-05-13T17:52:25.6468571Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:25.6469875Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.6472033Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.6473126Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.6473853Z       |                         ^~~~
2022-05-13T17:52:25.6474659Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:52:25.6476342Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:25.6477298Z       | ^~~~~~~~~~~~
2022-05-13T17:52:25.6837779Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T17:52:25.6839689Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:25.6840957Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:25.6841945Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.6842920Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.6843723Z       |                         ^~~~
2022-05-13T17:52:25.6844932Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:25.6846048Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:25.6846948Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.6848291Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.6849075Z       |                         ^~~~
2022-05-13T17:52:25.6850455Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:52:25.6851674Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:25.6852542Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:25.7182981Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T17:52:25.7184829Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:52:25.7186283Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:25.7187710Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.7188547Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.7190031Z       |                         ^~~~
2022-05-13T17:52:25.7208840Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:25.7209723Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:25.7210615Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.7211401Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.7212143Z       |                         ^~~~
2022-05-13T17:52:25.7212891Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:52:25.7213732Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:52:25.7214449Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:25.8327373Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T17:52:25.8329776Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:25.8331365Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.8332268Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.8333021Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:52:25.8334187Z       |                 ^~~~
2022-05-13T17:52:25.8337587Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:25.8338702Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.8339538Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.8340301Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:52:25.8340901Z       |                 ^~~~
2022-05-13T17:52:25.8341692Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:52:25.8342845Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:25.8343482Z       | ^~~~~~~~~~~~
2022-05-13T17:52:25.9306209Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:52:25.9307633Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:52:25.9308670Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:52:25.9311545Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:25.9313060Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.9313899Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.9314674Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.9315441Z       |                 ^~~~
2022-05-13T17:52:25.9316156Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:52:25.9317071Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:25.9317882Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.9318806Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.9319606Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.9320313Z       |                 ^~~~
2022-05-13T17:52:25.9321349Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:52:25.9322627Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:25.9323456Z       | ^~~~~~~~~~~~
2022-05-13T17:52:25.9324562Z In function ‘ripemd_addbits_and_close’,
2022-05-13T17:52:25.9325470Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T17:52:25.9326819Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T17:52:25.9327982Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:25.9328813Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.9329593Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.9330329Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.9330896Z       |         ^~~~
2022-05-13T17:52:25.9331891Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T17:52:25.9332817Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:25.9333560Z   276 | #define RFUN   ripemd_round
2022-05-13T17:52:25.9334315Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:25.9335148Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:25.9335831Z       |         ^~~~
2022-05-13T17:52:25.9336507Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T17:52:25.9337300Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:25.9338031Z       | ^~~~~~~~~~~~
2022-05-13T17:52:26.3638784Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T17:52:26.3640861Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:26.3642236Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:26.3643292Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.3644675Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:52:26.3645569Z       |                 ^~~~
2022-05-13T17:52:26.3646465Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:26.3647481Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:26.3648397Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.3649254Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:52:26.3649879Z       |                 ^~~~
2022-05-13T17:52:26.3650784Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:52:26.3651826Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:26.3652633Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:26.4334339Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:52:26.4336213Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:52:26.4337490Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:52:26.4338781Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:26.4339868Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:26.4340790Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.4341581Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:26.4342308Z       |                 ^~~~
2022-05-13T17:52:26.4343129Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:52:26.4344240Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:26.4345498Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:26.4346390Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.4347314Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:26.4348102Z       |                 ^~~~
2022-05-13T17:52:26.4348959Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:52:26.4350378Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:26.4351386Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:26.4352269Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T17:52:26.4353275Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T17:52:26.4354314Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T17:52:26.4356228Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:52:26.4357321Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:26.4358217Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.4359050Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:26.4359820Z       |         ^~~~
2022-05-13T17:52:26.4360633Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T17:52:26.4361731Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:26.4362720Z   600 | #define RFUN   ripemd128_round
2022-05-13T17:52:26.4363656Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.4364551Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:26.4365445Z       |         ^~~~
2022-05-13T17:52:26.4366236Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T17:52:26.4367276Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T17:52:26.4368156Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:26.9475283Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T17:52:26.9477764Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:52:26.9479893Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:26.9480962Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.9481690Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:52:26.9482333Z       |                 ^~~~
2022-05-13T17:52:26.9483070Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:26.9484151Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:26.9484871Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:26.9485819Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T17:52:26.9486632Z       |                 ^~~~
2022-05-13T17:52:26.9487457Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:52:26.9488243Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:52:26.9488886Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:27.0733245Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:52:27.0734776Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:52:27.0737100Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:52:27.0738899Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:52:27.0740149Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:27.0741040Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:27.0741762Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:27.0742390Z       |                 ^~~~
2022-05-13T17:52:27.0743375Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:52:27.0744482Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:27.0745452Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:27.0746842Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:27.0747630Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:27.0748272Z       |                 ^~~~
2022-05-13T17:52:27.0748996Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:52:27.0749831Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:52:27.0750514Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:52:27.0751249Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T17:52:27.0752025Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T17:52:27.0753599Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T17:52:27.0755372Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T17:52:27.0762597Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:27.0763474Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:27.0764199Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:27.0764868Z       |         ^~~~
2022-05-13T17:52:27.0765981Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T17:52:27.0767082Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T17:52:27.0767908Z   626 | #define RFUN   ripemd256_round
2022-05-13T17:52:27.0768658Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T17:52:27.0769397Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T17:52:27.0770068Z       |         ^~~~
2022-05-13T17:52:27.0770790Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T17:52:27.0771627Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T17:52:27.0772322Z       | ^~~~~~~~~~~~~~~
2022-05-13T17:53:39.5268414Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:53:39.5277046Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5278527Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:53:39.5279763Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5280935Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T17:53:39.5281744Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5282584Z   366 |                                         keys,
2022-05-13T17:53:39.5283963Z       |                                         ~~~~~
2022-05-13T17:53:39.5284955Z   367 |                                         lens, cur_salt->salt,
2022-05-13T17:53:39.5285621Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5286449Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T17:53:39.5287236Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5288137Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:53:39.5289215Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5290412Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:53:39.5291698Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5292731Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:53:39.5293865Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:53:39.5294732Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:53:39.5295750Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:53:39.5296600Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5301971Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5303548Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:53:39.5304593Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5305459Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T17:53:39.5306317Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5307462Z   374 |                                         keys,
2022-05-13T17:53:39.5308256Z       |                                         ~~~~~
2022-05-13T17:53:39.5309277Z   375 |                                         lens, cur_salt->salt,
2022-05-13T17:53:39.5310085Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5310851Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T17:53:39.5311700Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5312672Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:53:39.5314508Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5316489Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:53:39.5318645Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5320814Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:53:39.5322542Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:53:39.5324857Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:53:39.5326089Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:53:39.5327129Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5328178Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5329190Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T17:53:39.5330237Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5331055Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T17:53:39.5331809Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5332512Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T17:53:39.5333400Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5334237Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:53:39.5335028Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:53:39.5335856Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:53:39.5336903Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5337973Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:53:39.5339044Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:53:39.5340064Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:53:39.5340841Z In file included from bks_fmt_plug.c:31:
2022-05-13T17:53:39.5341699Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:53:39.5342630Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:53:39.5344779Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0085606Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:55:54.0163851Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:55:54.0166380Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:55:54.0167655Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0183582Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:55:54.0185005Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0185943Z   270 |                                         lens, cur_salt->salt,
2022-05-13T17:55:54.0186774Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0187659Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:55:54.0188710Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0189840Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:55:54.0191586Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:55:54.0193000Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:55:54.0194372Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T17:55:54.0195834Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:55:54.0196855Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:55:54.0197916Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:55:54.0199142Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:55:54.0200293Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0201922Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:55:54.0203296Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:55:54.0204460Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0205579Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:55:54.0206478Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0207352Z   247 |                                         lens, cur_salt->salt,
2022-05-13T17:55:54.0208227Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0209091Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:55:54.0210041Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0211126Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:55:54.0212518Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:55:54.0213927Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:55:54.0215548Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:55:54.0216841Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:55:54.0217888Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:55:54.0218892Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:55:54.0220082Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:55:54.0221231Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0222434Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:55:54.0223768Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T17:55:54.0226525Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0227585Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:55:54.0228546Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0229431Z   225 |                                         lens, cur_salt->salt,
2022-05-13T17:55:54.0230300Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0231133Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T17:55:54.0232118Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:55:54.0233186Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:55:54.0234748Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:55:54.0236171Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:55:54.0237651Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:55:54.0238998Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:55:54.0240037Z In file included from pfx_fmt_plug.c:33:
2022-05-13T17:55:54.0241063Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:55:54.0242519Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:55:54.0243610Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9146643Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:56:34.9148923Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:56:34.9150210Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:56:34.9151084Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9151920Z   117 |                                 cur_salt->iterations,
2022-05-13T17:56:34.9152672Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9153690Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T17:56:34.9154793Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9157581Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T17:56:34.9160304Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9161710Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:56:34.9163793Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:56:34.9166033Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:56:34.9167781Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:56:34.9169134Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:56:34.9170168Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:56:34.9171002Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:56:34.9172056Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:56:34.9173254Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9174258Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:56:34.9175131Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T17:56:34.9175890Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9176647Z   122 |                                 cur_salt->iterations,
2022-05-13T17:56:34.9178327Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9179123Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T17:56:34.9180007Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9180839Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T17:56:34.9181638Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:56:34.9182494Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:56:34.9184394Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:56:34.9185590Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:56:34.9186719Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:56:34.9188398Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:56:34.9189475Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T17:56:34.9190370Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:56:34.9191364Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:56:34.9192244Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8468058Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T17:57:12.8471044Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:57:12.8472678Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:57:12.8473799Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8474823Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:57:12.8475789Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8476727Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T17:57:12.8478709Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8481051Z   153 |                                                    salt_len, mackey,
2022-05-13T17:57:12.8483078Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8484082Z   154 |                                                    BINARY_SIZE);
2022-05-13T17:57:12.8484874Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:57:12.8485826Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:57:12.8486964Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:57:12.8488048Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:57:12.8489335Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:57:12.8491527Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:57:12.8492633Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:57:12.8493454Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:57:12.8494433Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:57:12.8495270Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8496219Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:57:12.8497147Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T17:57:12.8497981Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8498793Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T17:57:12.8499572Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8500511Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T17:57:12.8501204Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8502138Z   138 |                                                    salt_len, mackey,
2022-05-13T17:57:12.8502830Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T17:57:12.8503518Z   139 |                                                    BINARY_SIZE);
2022-05-13T17:57:12.8504336Z       |                                                    ~~~~~~~~~~~~
2022-05-13T17:57:12.8505185Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T17:57:12.8506208Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:57:12.8507222Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T17:57:12.8508218Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T17:57:12.8509205Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T17:57:12.8510396Z In file included from zed_fmt_plug.c:30:
2022-05-13T17:57:12.8511598Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T17:57:12.8512543Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T17:57:12.8513330Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T17:57:54.0739901Z In file included from subsets.c:25:
2022-05-13T17:57:54.0742237Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T17:57:54.0745972Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T17:57:54.0748272Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T17:57:54.0749937Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T18:00:52.4361744Z ar: creating aes.a
2022-05-13T18:01:07.0189281Z ar: creating secp256k1.a
2022-05-13T18:01:17.0587929Z ar: creating ed25519-donna.a
2022-05-13T18:01:17.8128160Z ar: creating poly1305-donna.a
2022-05-13T18:01:59.0748698Z 
2022-05-13T18:01:59.0974575Z Make process completed.
2022-05-13T18:02:00.6733817Z 
2022-05-13T18:02:00.6967952Z Make process completed.
2022-05-13T18:02:00.7202848Z Stripping executables.
2022-05-13T18:02:01.5560920Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=avx2   CPPFLAGS='-DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-xop\\\"\" '                                                                           && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx2-non-omp'
2022-05-13T18:02:04.9372010Z checking build system type... x86_64-unknown-cygwin
2022-05-13T18:02:04.9477349Z checking host system type... x86_64-unknown-cygwin
2022-05-13T18:02:04.9662343Z checking whether to compile using MPI... no
2022-05-13T18:02:04.9680104Z checking for gcc... gcc
2022-05-13T18:02:05.8991115Z checking whether the C compiler works... yes
2022-05-13T18:02:05.8993810Z checking for C compiler default output file name... a.exe
2022-05-13T18:02:06.2891754Z checking for suffix of executables... .exe
2022-05-13T18:02:06.7119133Z checking whether we are cross compiling... no
2022-05-13T18:02:06.9866003Z checking for suffix of object files... o
2022-05-13T18:02:07.2129940Z checking whether we are using the GNU C compiler... yes
2022-05-13T18:02:07.4098356Z checking whether gcc accepts -g... yes
2022-05-13T18:02:07.7271346Z checking for gcc option to accept ISO C89... none needed
2022-05-13T18:02:08.0064442Z checking whether gcc understands -c and -o together... yes
2022-05-13T18:02:08.4528516Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T18:02:08.4530876Z checking whether gcc accepts -g... (cached) yes
2022-05-13T18:02:08.4533093Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T18:02:08.4535929Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T18:02:08.4550919Z checking additional paths...  -L/usr/local/lib
2022-05-13T18:02:09.3019434Z checking arg check macro for -m with gcc... yes
2022-05-13T18:02:09.6107752Z checking arg check macro for -Q with gcc... yes
2022-05-13T18:02:09.8110188Z checking if gcc supports -funroll-loops... yes
2022-05-13T18:02:10.0152419Z checking if gcc supports -Os... yes
2022-05-13T18:02:10.4044358Z checking if gcc supports -finline-functions... yes
2022-05-13T18:02:10.6281640Z checking if gcc supports -Og... yes
2022-05-13T18:02:10.8305822Z checking if gcc supports -Wall... yes
2022-05-13T18:02:11.0865920Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T18:02:11.3089310Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T18:02:11.5324367Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T18:02:11.9010944Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T18:02:12.1057688Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T18:02:12.4008645Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T18:02:12.5959244Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T18:02:12.8737090Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T18:02:13.0644857Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T18:02:13.3519157Z checking if gcc supports -Qunused-arguments... no
2022-05-13T18:02:13.5682149Z checking if gcc supports -std=gnu89... yes
2022-05-13T18:02:13.8010659Z checking if gcc supports -Wdate-time... yes
2022-05-13T18:02:14.2295204Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T18:02:14.6740182Z checking for 32/64 bit... 64-bit
2022-05-13T18:02:14.7013405Z checking additional paths (64 bit)... none
2022-05-13T18:02:14.7014982Z checking whether ln -s works... yes
2022-05-13T18:02:14.7494567Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T18:02:14.8284315Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T18:02:14.9172957Z checking for GNU make... make
2022-05-13T18:02:15.0953389Z checking whether make sets $(MAKE)... yes
2022-05-13T18:02:15.4737891Z checking how to run the C preprocessor... gcc -E
2022-05-13T18:02:15.8594157Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T18:02:16.1537684Z checking for sort... /usr/bin/sort
2022-05-13T18:02:16.1621183Z checking for find... /usr/bin/find
2022-05-13T18:02:16.1623135Z checking for perl... /usr/bin/perl
2022-05-13T18:02:16.1624446Z checking for ar... ar
2022-05-13T18:02:16.1625311Z checking for strip... strip
2022-05-13T18:02:16.1626351Z checking for strings... strings
2022-05-13T18:02:16.1627553Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T18:02:16.1947715Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T18:02:16.2032574Z checking if pkg-config will be used... no
2022-05-13T18:02:16.2697973Z checking for egrep... /usr/bin/grep -E
2022-05-13T18:02:17.4584978Z checking for ANSI C header files... yes
2022-05-13T18:02:17.7955766Z checking for sys/types.h... yes
2022-05-13T18:02:18.2644282Z checking for sys/stat.h... yes
2022-05-13T18:02:18.6615595Z checking for stdlib.h... yes
2022-05-13T18:02:19.1502682Z checking for string.h... yes
2022-05-13T18:02:19.6276670Z checking for memory.h... yes
2022-05-13T18:02:20.0544809Z checking for strings.h... yes
2022-05-13T18:02:20.4762554Z checking for inttypes.h... yes
2022-05-13T18:02:20.9118177Z checking for stdint.h... yes
2022-05-13T18:02:21.3437958Z checking for unistd.h... yes
2022-05-13T18:02:22.0071139Z checking size of short... 2
2022-05-13T18:02:22.6546880Z checking size of int... 4
2022-05-13T18:02:23.2469707Z checking size of long... 8
2022-05-13T18:02:23.8769271Z checking size of long long... 8
2022-05-13T18:02:24.4647174Z checking size of wchar_t... 2
2022-05-13T18:02:25.0489408Z checking size of int *... 8
2022-05-13T18:02:25.6436863Z checking size of void *... 8
2022-05-13T18:02:25.7149428Z configure: Trying to force AVX2 using default method (--enable-simd=avx2).
2022-05-13T18:02:26.1104922Z checking if gcc supports -mavx2 w/ linking... yes
2022-05-13T18:02:26.5875300Z checking for extra ASFLAGS... None needed
2022-05-13T18:02:26.8757109Z checking for X32 ABI... no
2022-05-13T18:02:26.9055023Z checking special compiler flags... Intel x86
2022-05-13T18:02:26.9056359Z configure: Testing tool-chain's CPU support with given options
2022-05-13T18:02:27.3315221Z checking for MMX... yes
2022-05-13T18:02:27.8298484Z checking for SSE2... yes
2022-05-13T18:02:28.3361965Z checking for SSSE3... yes
2022-05-13T18:02:28.8677427Z checking for SSE4.1... yes
2022-05-13T18:02:29.8737038Z checking for SSE4.2... yes
2022-05-13T18:02:30.8013468Z checking for AVX... yes
2022-05-13T18:02:32.3520384Z checking for XOP... no
2022-05-13T18:02:33.8523953Z checking for AVX2... yes
2022-05-13T18:02:35.1001501Z checking for AVX512F... no
2022-05-13T18:02:35.1304112Z checking for arch.h alternative... x86-64.h
2022-05-13T18:02:35.1320669Z checking for byte ordering according to target triple... little
2022-05-13T18:02:35.1337789Z checking supplied paths for OpenSSL...  
2022-05-13T18:02:35.1344670Z checking additional paths for OpenSSL... none
2022-05-13T18:02:35.4051212Z checking openssl/opensslv.h usability... yes
2022-05-13T18:02:35.5387750Z checking openssl/opensslv.h presence... yes
2022-05-13T18:02:35.5389516Z checking for openssl/opensslv.h... yes
2022-05-13T18:02:35.9786385Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T18:02:36.4287929Z checking for MD5_Update in -lcrypto... yes
2022-05-13T18:02:36.4315708Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T18:02:36.9487559Z checking for sqrt in -lm... yes
2022-05-13T18:02:37.3837735Z checking for clock_gettime in -lrt... yes
2022-05-13T18:02:37.8189489Z checking for deflate in -lz... yes
2022-05-13T18:02:38.7499129Z checking for library containing crypt... -lcrypt
2022-05-13T18:02:39.1069272Z checking gmp.h usability... yes
2022-05-13T18:02:39.2521845Z checking gmp.h presence... yes
2022-05-13T18:02:39.2523564Z checking for gmp.h... yes
2022-05-13T18:02:39.7578914Z checking for __gmpz_init in -lgmp... yes
2022-05-13T18:02:40.1248929Z checking skey.h usability... no
2022-05-13T18:02:40.3667389Z checking skey.h presence... no
2022-05-13T18:02:40.3668760Z checking for skey.h... no
2022-05-13T18:02:40.3675943Z checking for S/Key... using our own code
2022-05-13T18:02:40.6348220Z checking bzlib.h usability... yes
2022-05-13T18:02:40.7924886Z checking bzlib.h presence... yes
2022-05-13T18:02:40.7926433Z checking for bzlib.h... yes
2022-05-13T18:02:41.2110099Z checking for main in -lbz2... yes
2022-05-13T18:02:41.6370776Z checking for main in -lkernel32... yes
2022-05-13T18:02:42.0578923Z checking for dlopen in -ldl... yes
2022-05-13T18:02:43.4206624Z checking intrin.h usability... yes
2022-05-13T18:02:43.8427015Z checking intrin.h presence... yes
2022-05-13T18:02:43.8428343Z checking for intrin.h... yes
2022-05-13T18:02:44.2270213Z checking openssl/cmac.h usability... yes
2022-05-13T18:02:44.4626990Z checking openssl/cmac.h presence... yes
2022-05-13T18:02:44.4628974Z checking for openssl/cmac.h... yes
2022-05-13T18:02:44.4913551Z configure: rexgen check not enabled
2022-05-13T18:02:44.8679010Z checking pcap.h usability... no
2022-05-13T18:02:45.0999719Z checking pcap.h presence... no
2022-05-13T18:02:45.1002012Z checking for pcap.h... no
2022-05-13T18:02:45.5194011Z checking pcap/pcap.h usability... no
2022-05-13T18:02:45.7609984Z checking pcap/pcap.h presence... no
2022-05-13T18:02:45.7611405Z checking for pcap/pcap.h... no
2022-05-13T18:02:45.8291424Z checking for pcap.h... (cached) no
2022-05-13T18:02:45.8934276Z checking for pcap/pcap.h... (cached) no
2022-05-13T18:02:46.1410455Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T18:02:46.3533902Z checking whether string.h and strings.h may both be included... yes
2022-05-13T18:02:46.9042285Z checking for SHA256... yes
2022-05-13T18:02:47.5136150Z checking for WHIRLPOOL... yes
2022-05-13T18:02:48.1274030Z checking for RIPEMD160... yes
2022-05-13T18:02:48.7587204Z checking for AES_encrypt... yes
2022-05-13T18:02:49.4416782Z checking for DSA_get0_pqg... yes
2022-05-13T18:02:49.8133022Z checking additional paths for OpenCL... none
2022-05-13T18:02:50.1074897Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T18:02:50.8240482Z checking for the pthreads library -lpthreads... no
2022-05-13T18:02:51.4147951Z checking whether pthreads work without any flags... yes
2022-05-13T18:02:51.9029597Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T18:02:51.9032230Z checking if more special flags are required for pthreads... no
2022-05-13T18:02:52.2973679Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T18:02:52.5763511Z checking whether we are using the Microsoft C compiler... no
2022-05-13T18:02:52.9425854Z checking CL/cl.h usability... yes
2022-05-13T18:02:53.1300271Z checking CL/cl.h presence... yes
2022-05-13T18:02:53.1303977Z checking for CL/cl.h... yes
2022-05-13T18:02:53.6759765Z checking OpenCL/cl.h usability... no
2022-05-13T18:02:53.9176717Z checking OpenCL/cl.h presence... no
2022-05-13T18:02:53.9178205Z checking for OpenCL/cl.h... no
2022-05-13T18:02:56.8037281Z checking windows.h usability... yes
2022-05-13T18:02:58.2475965Z checking windows.h presence... yes
2022-05-13T18:02:58.2478240Z checking for windows.h... yes
2022-05-13T18:02:58.7989923Z checking for OpenCL library... -lOpenCL
2022-05-13T18:02:59.1617286Z checking arpa/inet.h usability... yes
2022-05-13T18:02:59.3217694Z checking arpa/inet.h presence... yes
2022-05-13T18:02:59.3219365Z checking for arpa/inet.h... yes
2022-05-13T18:02:59.7435162Z checking crypt.h usability... yes
2022-05-13T18:02:59.8727761Z checking crypt.h presence... yes
2022-05-13T18:02:59.8729754Z checking for crypt.h... yes
2022-05-13T18:03:00.3498045Z checking dirent.h usability... yes
2022-05-13T18:03:00.5127256Z checking dirent.h presence... yes
2022-05-13T18:03:00.5131482Z checking for dirent.h... yes
2022-05-13T18:03:00.9384011Z checking limits.h usability... yes
2022-05-13T18:03:01.0994366Z checking limits.h presence... yes
2022-05-13T18:03:01.0996770Z checking for limits.h... yes
2022-05-13T18:03:01.4969648Z checking locale.h usability... yes
2022-05-13T18:03:01.6294308Z checking locale.h presence... yes
2022-05-13T18:03:01.6295665Z checking for locale.h... yes
2022-05-13T18:03:02.0898104Z checking malloc.h usability... yes
2022-05-13T18:03:02.2291581Z checking malloc.h presence... yes
2022-05-13T18:03:02.2293344Z checking for malloc.h... yes
2022-05-13T18:03:02.7703225Z checking net/ethernet.h usability... no
2022-05-13T18:03:03.0128185Z checking net/ethernet.h presence... no
2022-05-13T18:03:03.0129590Z checking for net/ethernet.h... no
2022-05-13T18:03:03.3381573Z checking netdb.h usability... yes
2022-05-13T18:03:03.4917240Z checking netdb.h presence... yes
2022-05-13T18:03:03.4918902Z checking for netdb.h... yes
2022-05-13T18:03:03.8999226Z checking netinet/in.h usability... yes
2022-05-13T18:03:04.0689135Z checking netinet/in.h presence... yes
2022-05-13T18:03:04.0691435Z checking for netinet/in.h... yes
2022-05-13T18:03:04.4637489Z checking netinet/in_systm.h usability... yes
2022-05-13T18:03:04.6409688Z checking netinet/in_systm.h presence... yes
2022-05-13T18:03:04.6412335Z checking for netinet/in_systm.h... yes
2022-05-13T18:03:04.7970455Z checking for string.h... (cached) yes
2022-05-13T18:03:04.9538153Z checking for strings.h... (cached) yes
2022-05-13T18:03:05.4734537Z checking sys/ethernet.h usability... no
2022-05-13T18:03:05.6987137Z checking sys/ethernet.h presence... no
2022-05-13T18:03:05.6988692Z checking for sys/ethernet.h... no
2022-05-13T18:03:06.0367506Z checking sys/file.h usability... yes
2022-05-13T18:03:06.2073758Z checking sys/file.h presence... yes
2022-05-13T18:03:06.2077463Z checking for sys/file.h... yes
2022-05-13T18:03:06.6799159Z checking sys/param.h usability... yes
2022-05-13T18:03:06.8273671Z checking sys/param.h presence... yes
2022-05-13T18:03:06.8276005Z checking for sys/param.h... yes
2022-05-13T18:03:07.3037667Z checking sys/socket.h usability... yes
2022-05-13T18:03:07.4628554Z checking sys/socket.h presence... yes
2022-05-13T18:03:07.4630228Z checking for sys/socket.h... yes
2022-05-13T18:03:07.8985447Z checking sys/time.h usability... yes
2022-05-13T18:03:08.0754354Z checking sys/time.h presence... yes
2022-05-13T18:03:08.0756060Z checking for sys/time.h... yes
2022-05-13T18:03:08.4907556Z checking sys/times.h usability... yes
2022-05-13T18:03:08.6302945Z checking sys/times.h presence... yes
2022-05-13T18:03:08.6305421Z checking for sys/times.h... yes
2022-05-13T18:03:08.7891113Z checking for sys/types.h... (cached) yes
2022-05-13T18:03:09.1899507Z checking termios.h usability... yes
2022-05-13T18:03:09.3383065Z checking termios.h presence... yes
2022-05-13T18:03:09.3385610Z checking for termios.h... yes
2022-05-13T18:03:09.5105859Z checking for unistd.h... (cached) yes
2022-05-13T18:03:10.0475220Z checking unixlib/local.h usability... no
2022-05-13T18:03:10.3062582Z checking unixlib/local.h presence... no
2022-05-13T18:03:10.3064670Z checking for unixlib/local.h... no
2022-05-13T18:03:10.3679926Z checking for windows.h... (cached) yes
2022-05-13T18:03:10.7195345Z checking for net/if.h... yes
2022-05-13T18:03:11.0841625Z checking for net/if_arp.h... no
2022-05-13T18:03:11.4048499Z checking for netinet/if_ether.h... no
2022-05-13T18:03:11.6241966Z checking for netinet/ip.h... yes
2022-05-13T18:03:12.1432487Z checking for stdbool.h that conforms to C99... yes
2022-05-13T18:03:12.7937954Z checking for _Bool... yes
2022-05-13T18:03:12.9999391Z checking for inline... inline
2022-05-13T18:03:13.6214584Z checking for int32_t... yes
2022-05-13T18:03:14.2340095Z checking for int64_t... yes
2022-05-13T18:03:14.8985164Z checking for off_t... yes
2022-05-13T18:03:15.5185958Z checking for size_t... yes
2022-05-13T18:03:16.1659023Z checking for ssize_t... yes
2022-05-13T18:03:16.4599323Z checking for uint16_t... yes
2022-05-13T18:03:16.7508317Z checking for uint32_t... yes
2022-05-13T18:03:17.0211717Z checking for uint64_t... yes
2022-05-13T18:03:17.2915125Z checking for uint8_t... yes
2022-05-13T18:03:17.9824555Z checking for ptrdiff_t... yes
2022-05-13T18:03:18.3731211Z checking for int128... no
2022-05-13T18:03:18.9864099Z checking for __int128... yes
2022-05-13T18:03:19.6564261Z checking for __int128_t... yes
2022-05-13T18:03:20.1001200Z checking for error_at_line... yes
2022-05-13T18:03:20.7130766Z checking for pid_t... yes
2022-05-13T18:03:21.0858404Z checking vfork.h usability... no
2022-05-13T18:03:21.3257553Z checking vfork.h presence... no
2022-05-13T18:03:21.3259893Z checking for vfork.h... no
2022-05-13T18:03:21.9213625Z checking for fork... yes
2022-05-13T18:03:22.5568184Z checking for vfork... yes
2022-05-13T18:03:23.1889206Z checking for working fork... yes
2022-05-13T18:03:23.1890732Z checking for working vfork... (cached) yes
2022-05-13T18:03:23.7886825Z checking for fseek64... no
2022-05-13T18:03:24.3180426Z checking for fseeko... yes
2022-05-13T18:03:24.9912942Z checking for fseeko64... no
2022-05-13T18:03:25.6178874Z checking for _fseeki64... no
2022-05-13T18:03:26.1958268Z checking for lseek64... no
2022-05-13T18:03:26.7433418Z checking for lseek... yes
2022-05-13T18:03:27.4466069Z checking for ftell64... no
2022-05-13T18:03:27.9828593Z checking for ftello... yes
2022-05-13T18:03:28.7158638Z checking for ftello64... no
2022-05-13T18:03:29.3014737Z checking for _ftelli64... no
2022-05-13T18:03:29.9105295Z checking for fopen64... no
2022-05-13T18:03:30.5433427Z checking for _fopen64... no
2022-05-13T18:03:31.0204329Z checking for memmem... yes
2022-05-13T18:03:31.5953228Z checking for mmap... yes
2022-05-13T18:03:32.1987589Z checking for sleep... yes
2022-05-13T18:03:32.8257186Z checking for setenv... yes
2022-05-13T18:03:33.4113463Z checking for putenv... yes
2022-05-13T18:03:34.0814288Z checking for strcasecmp... yes
2022-05-13T18:03:34.7100813Z checking for strncasecmp... yes
2022-05-13T18:03:35.4023710Z checking for stricmp... no
2022-05-13T18:03:35.9614564Z checking for strcmpi... no
2022-05-13T18:03:36.5712186Z checking for _stricmp... no
2022-05-13T18:03:37.1514433Z checking for _strcmpi... no
2022-05-13T18:03:37.7247241Z checking for strnicmp... no
2022-05-13T18:03:38.3312228Z checking for strncmpi... no
2022-05-13T18:03:38.9168301Z checking for _strnicmp... no
2022-05-13T18:03:39.5277658Z checking for _strncmpi... no
2022-05-13T18:03:40.1274741Z checking for strnlen... yes
2022-05-13T18:03:40.7240893Z checking for strlwr... yes
2022-05-13T18:03:41.3476555Z checking for strupr... yes
2022-05-13T18:03:42.0130420Z checking for strrev... no
2022-05-13T18:03:42.5144353Z checking for atoll... yes
2022-05-13T18:03:43.2093063Z checking for _atoi64... no
2022-05-13T18:03:43.8293800Z checking for snprintf... yes
2022-05-13T18:03:44.5382272Z checking for sprintf_s... no
2022-05-13T18:03:45.0380257Z checking for strcasestr... yes
2022-05-13T18:03:45.5849347Z checking for clGetKernelArgInfo... yes
2022-05-13T18:03:46.1605641Z checking for posix_memalign... yes
2022-05-13T18:03:46.6359981Z checking for yasm that supports "-f win64"... 
2022-05-13T18:03:46.6376082Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T18:03:47.0522151Z checking for _get_osfhandle... yes
2022-05-13T18:03:50.1299436Z checking for GetFileSizeEx... yes
2022-05-13T18:03:50.1599723Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T18:03:50.7468747Z checking size of size_t... 8
2022-05-13T18:03:51.3625797Z checking size of off_t... 8
2022-05-13T18:03:51.4115847Z configure: Fuzz check disabled
2022-05-13T18:03:51.4118679Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T18:03:51.4240893Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T18:03:51.5485146Z configure: creating Makefile dependencies
2022-05-13T18:03:54.6156611Z configure: creating ./john_build_rule.h
2022-05-13T18:03:54.9635723Z configure: creating ./config.status
2022-05-13T18:03:57.0726100Z config.status: creating Makefile
2022-05-13T18:03:57.3627622Z config.status: creating aes/Makefile
2022-05-13T18:03:58.3900488Z config.status: creating aes/aesni/Makefile
2022-05-13T18:03:58.3901815Z config.status: creating aes/openssl/Makefile
2022-05-13T18:03:58.5351277Z config.status: creating secp256k1/Makefile
2022-05-13T18:03:58.9657390Z config.status: creating ed25519-donna/Makefile
2022-05-13T18:03:59.3225335Z config.status: creating poly1305-donna/Makefile
2022-05-13T18:03:59.7072639Z config.status: creating autoconfig.h
2022-05-13T18:03:59.8074642Z config.status: autoconfig.h is unchanged
2022-05-13T18:03:59.8975908Z config.status: linking x86-64.h to arch.h
2022-05-13T18:03:59.9843237Z config.status: executing default commands
2022-05-13T18:04:00.0373687Z configure: creating ./fmt_externs.h
2022-05-13T18:04:11.2535054Z configure: creating ./fmt_registers.h
2022-05-13T18:04:25.3921182Z 
2022-05-13T18:04:25.3926030Z Configured for building John the Ripper jumbo:
2022-05-13T18:04:25.3926961Z 
2022-05-13T18:04:25.3928064Z Target CPU ......................................... x86_64 AVX2, 64-bit LE
2022-05-13T18:04:25.3929243Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T18:04:25.3930762Z Target OS .......................................... cygwin
2022-05-13T18:04:25.3931925Z Cross compiling .................................... no
2022-05-13T18:04:25.3932990Z Legacy arch header ................................. x86-64.h
2022-05-13T18:04:25.3933489Z 
2022-05-13T18:04:25.3934023Z Optional libraries/features found:
2022-05-13T18:04:25.3934817Z Memory map (share/page large files) ................ yes
2022-05-13T18:04:25.3936381Z Fork support ....................................... yes
2022-05-13T18:04:25.3937300Z OpenMP support ..................................... no
2022-05-13T18:04:25.3938213Z OpenCL support ..................................... yes
2022-05-13T18:04:25.3939065Z Generic crypt(3) format ............................ yes
2022-05-13T18:04:25.3939880Z OpenSSL (many additional formats) .................. yes
2022-05-13T18:04:25.3940659Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T18:04:25.3941654Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T18:04:25.3942403Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T18:04:25.3943186Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T18:04:25.3943969Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T18:04:25.3944722Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T18:04:25.3946189Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T18:04:25.3947036Z OpenMPI support (default disabled) ................. no
2022-05-13T18:04:25.3947855Z Experimental code (default disabled) ............... no
2022-05-13T18:04:25.3948822Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T18:04:25.3949259Z 
2022-05-13T18:04:25.3949886Z Install missing libraries to get any needed features that were omitted.
2022-05-13T18:04:25.3950277Z 
2022-05-13T18:04:25.3950846Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T18:06:10.0339353Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T18:06:10.0344782Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.0346226Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.0347238Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.0348144Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.0348925Z       |                         ^~~~
2022-05-13T18:06:10.0349995Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.0351086Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.0351945Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.0352921Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.0353755Z       |                         ^~~~
2022-05-13T18:06:10.0354662Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:06:10.0355666Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.0356540Z       | ^~~~~~~~~~~~
2022-05-13T18:06:10.0647860Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T18:06:10.0649873Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.0651617Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.0652606Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.0653545Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.0654339Z       |                         ^~~~
2022-05-13T18:06:10.0655203Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.0656270Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.0657185Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.0658173Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.0658922Z       |                         ^~~~
2022-05-13T18:06:10.0660007Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:06:10.0661050Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.0661852Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:10.0968232Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T18:06:10.0970427Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:06:10.0971767Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:10.0972777Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.0973686Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.0975149Z       |                         ^~~~
2022-05-13T18:06:10.0976284Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.0977734Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:10.0978617Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.0979570Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.0981726Z       |                         ^~~~
2022-05-13T18:06:10.0982610Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:06:10.0985045Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:06:10.0986031Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:10.1967896Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T18:06:10.1969826Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.1971093Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.1973169Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.1974258Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:06:10.1974986Z       |                 ^~~~
2022-05-13T18:06:10.1975955Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.1976970Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.1977876Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.1978731Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:06:10.1979612Z       |                 ^~~~
2022-05-13T18:06:10.1980527Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:06:10.1982194Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.1983477Z       | ^~~~~~~~~~~~
2022-05-13T18:06:10.2739247Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:06:10.2741031Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:06:10.2742150Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:06:10.2743302Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.2744455Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.2745328Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.2746350Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.2747090Z       |                 ^~~~
2022-05-13T18:06:10.2747917Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:06:10.2749606Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.2750763Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.2751657Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.2752605Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.2753347Z       |                 ^~~~
2022-05-13T18:06:10.2754206Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:06:10.2755166Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.2756018Z       | ^~~~~~~~~~~~
2022-05-13T18:06:10.2756864Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:06:10.2758090Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:06:10.2759141Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:06:10.2760663Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.2761795Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.2762636Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.2763514Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.2764246Z       |         ^~~~
2022-05-13T18:06:10.2765032Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:06:10.2766000Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.2767016Z   276 | #define RFUN   ripemd_round
2022-05-13T18:06:10.2767914Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.2768800Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.2769630Z       |         ^~~~
2022-05-13T18:06:10.2770540Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:06:10.2771542Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.2772421Z       | ^~~~~~~~~~~~
2022-05-13T18:06:10.6798387Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T18:06:10.6800499Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.6801691Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.6802591Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.6803571Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:06:10.6804225Z       |                 ^~~~
2022-05-13T18:06:10.6805099Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.6806011Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.6806835Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.6807634Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:06:10.6808237Z       |                 ^~~~
2022-05-13T18:06:10.6808910Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:06:10.6809752Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.6810909Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:10.7742957Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:06:10.7745829Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:06:10.7747227Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:06:10.7748579Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.7749719Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.7750463Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.7751470Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.7752301Z       |                 ^~~~
2022-05-13T18:06:10.7753028Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:06:10.7753955Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.7755027Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.7755990Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.7756913Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.7757621Z       |                 ^~~~
2022-05-13T18:06:10.7758487Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:06:10.7759658Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.7760578Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:10.7761405Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:06:10.7762408Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:06:10.7763537Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:06:10.7765244Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:06:10.7766305Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.7767217Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.7768126Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.7768835Z       |         ^~~~
2022-05-13T18:06:10.7769959Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:06:10.7771144Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:10.7772217Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:06:10.7773079Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:10.7773921Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:10.7774672Z       |         ^~~~
2022-05-13T18:06:10.7775548Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:06:10.7776486Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:06:10.7777352Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:11.2990542Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T18:06:11.2992502Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:06:11.2993627Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:11.2994361Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:11.2995223Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:06:11.2995869Z       |                 ^~~~
2022-05-13T18:06:11.2996593Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:11.2997394Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:11.2998140Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:11.2998879Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:06:11.2999452Z       |                 ^~~~
2022-05-13T18:06:11.3000469Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:06:11.3001284Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:06:11.3001967Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:11.4087400Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:06:11.4089231Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:06:11.4091057Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:06:11.4092371Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:06:11.4093514Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:11.4094376Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:11.4097117Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:11.4097968Z       |                 ^~~~
2022-05-13T18:06:11.4098802Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:06:11.4100081Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:11.4101197Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:11.4102110Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:11.4102964Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:11.4103722Z       |                 ^~~~
2022-05-13T18:06:11.4104477Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:06:11.4107036Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:06:11.4107862Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:06:11.4108891Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:06:11.4110089Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:06:11.4111233Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:06:11.4112420Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:06:11.4113914Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:11.4116062Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:11.4117273Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:11.4118014Z       |         ^~~~
2022-05-13T18:06:11.4118804Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:06:11.4120061Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:06:11.4121101Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:06:11.4121978Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:06:11.4122865Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:06:11.4123564Z       |         ^~~~
2022-05-13T18:06:11.4124306Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:06:11.4126716Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:06:11.4127726Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:07:24.7477126Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:07:24.7481226Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7483535Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:07:24.7485514Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7486711Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T18:07:24.7488282Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7489459Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T18:07:24.7490322Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7491255Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:07:24.7492212Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7493645Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:07:24.7494788Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7496159Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:07:24.7497242Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7498253Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:07:24.7499083Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:07:24.7499886Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:07:24.7500838Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:07:24.7501681Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7508948Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7510523Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:07:24.7511413Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7512306Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T18:07:24.7513362Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7514145Z   366 |                                         keys,
2022-05-13T18:07:24.7514771Z       |                                         ~~~~~
2022-05-13T18:07:24.7515475Z   367 |                                         lens, cur_salt->salt,
2022-05-13T18:07:24.7516197Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7517153Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T18:07:24.7517843Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7519057Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:07:24.7520139Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7521159Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:07:24.7522732Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7523965Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:07:24.7524968Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:07:24.7525930Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:07:24.7526983Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:07:24.7528433Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7529575Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7530565Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:07:24.7531383Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7532144Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T18:07:24.7533133Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7533814Z   374 |                                         keys,
2022-05-13T18:07:24.7534462Z       |                                         ~~~~~
2022-05-13T18:07:24.7535158Z   375 |                                         lens, cur_salt->salt,
2022-05-13T18:07:24.7535811Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7536529Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T18:07:24.7537434Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:07:24.7538440Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:07:24.7539422Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7540436Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:07:24.7541470Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:07:24.7542697Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:07:24.7543601Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:07:24.7544382Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:07:24.7545320Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:07:24.7546173Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.7983456Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:09:30.7985702Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:09:30.7987671Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:09:30.7988977Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.7990515Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:09:30.7991576Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.7993224Z   225 |                                         lens, cur_salt->salt,
2022-05-13T18:09:30.7994130Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.7995017Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:09:30.7995993Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.7997608Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:09:30.7999156Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:09:30.8000670Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:09:30.8002831Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:09:30.8004299Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:09:30.8005403Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:09:30.8006535Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:09:30.8008313Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:09:30.8009413Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8010893Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:09:30.8012925Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:09:30.8014192Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8015222Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:09:30.8016196Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8018032Z   247 |                                         lens, cur_salt->salt,
2022-05-13T18:09:30.8018927Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8019789Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:09:30.8020799Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8022517Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:09:30.8024070Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:09:30.8025526Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:09:30.8027411Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:09:30.8028902Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:09:30.8030019Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:09:30.8031244Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:09:30.8033028Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:09:30.8034222Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8035494Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:09:30.8037344Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:09:30.8038854Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8039876Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:09:30.8040911Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8043251Z   270 |                                         lens, cur_salt->salt,
2022-05-13T18:09:30.8044379Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8045267Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:09:30.8046248Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:09:30.8047845Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:09:30.8049339Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:09:30.8050881Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:09:30.8053065Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:09:30.8054581Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:09:30.8055670Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:09:30.8056717Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:09:30.8059047Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:09:30.8060208Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7004882Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:10:08.7007947Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:08.7009700Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:10:08.7011276Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7012628Z   117 |                                 cur_salt->iterations,
2022-05-13T18:10:08.7016451Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7017601Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T18:10:08.7018719Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7019820Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T18:10:08.7021018Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7022056Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:10:08.7023783Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:08.7027400Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:10:08.7032017Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:08.7035732Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:10:08.7037898Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:10:08.7039205Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:10:08.7041311Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:10:08.7042581Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7044163Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:08.7045402Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:10:08.7046477Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7047341Z   122 |                                 cur_salt->iterations,
2022-05-13T18:10:08.7048237Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7049209Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T18:10:08.7050246Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7051233Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T18:10:08.7052238Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:08.7053370Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:10:08.7054727Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:08.7056480Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:10:08.7058046Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:08.7059419Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:10:08.7060485Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:10:08.7061493Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:10:08.7062723Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:10:08.7063827Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4176518Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:10:45.4181211Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:45.4182709Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:10:45.4184390Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4186335Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:10:45.4188028Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4189035Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T18:10:45.4191869Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4193021Z   138 |                                                    salt_len, mackey,
2022-05-13T18:10:45.4194201Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4194957Z   139 |                                                    BINARY_SIZE);
2022-05-13T18:10:45.4195797Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:10:45.4196820Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:10:45.4200048Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:45.4201511Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:10:45.4202753Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:45.4203804Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:10:45.4204880Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:10:45.4205733Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:10:45.4206639Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:10:45.4207474Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4211416Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:45.4212744Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:10:45.4214072Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4214982Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:10:45.4215964Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4216755Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T18:10:45.4217505Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4218176Z   153 |                                                    salt_len, mackey,
2022-05-13T18:10:45.4219126Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:10:45.4219846Z   154 |                                                    BINARY_SIZE);
2022-05-13T18:10:45.4220583Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:10:45.4221853Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:10:45.4223010Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:45.4224233Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:10:45.4225324Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:10:45.4226310Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:10:45.4227300Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:10:45.4228303Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:10:45.4229282Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:10:45.4230123Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:11:23.4061330Z In file included from subsets.c:25:
2022-05-13T18:11:23.4063342Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T18:11:23.4066148Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T18:11:23.4067467Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T18:11:23.4068450Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T18:14:20.1314464Z ar: creating aes.a
2022-05-13T18:14:32.5189982Z ar: creating secp256k1.a
2022-05-13T18:14:41.2111425Z ar: creating ed25519-donna.a
2022-05-13T18:14:41.8432058Z ar: creating poly1305-donna.a
2022-05-13T18:15:20.0158291Z 
2022-05-13T18:15:20.0391148Z Make process completed.
2022-05-13T18:15:21.6263121Z 
2022-05-13T18:15:21.6561093Z Make process completed.
2022-05-13T18:15:21.6831932Z Stripping executables.
2022-05-13T18:15:22.4610654Z Executing './configure --disable-native-tests --enable-simd=avx2   CPPFLAGS='-DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-avx2-non-omp\\\"\"  -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-xop\\\"\" '   && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx2'
2022-05-13T18:15:25.4022116Z checking build system type... x86_64-unknown-cygwin
2022-05-13T18:15:25.4026108Z checking host system type... x86_64-unknown-cygwin
2022-05-13T18:15:25.4197301Z checking whether to compile using MPI... no
2022-05-13T18:15:25.4214732Z checking for gcc... gcc
2022-05-13T18:15:26.2949185Z checking whether the C compiler works... yes
2022-05-13T18:15:26.2952701Z checking for C compiler default output file name... a.exe
2022-05-13T18:15:26.6746209Z checking for suffix of executables... .exe
2022-05-13T18:15:27.1280638Z checking whether we are cross compiling... no
2022-05-13T18:15:27.3912490Z checking for suffix of object files... o
2022-05-13T18:15:27.5857660Z checking whether we are using the GNU C compiler... yes
2022-05-13T18:15:27.7668568Z checking whether gcc accepts -g... yes
2022-05-13T18:15:28.0823881Z checking for gcc option to accept ISO C89... none needed
2022-05-13T18:15:28.3740916Z checking whether gcc understands -c and -o together... yes
2022-05-13T18:15:28.8591885Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T18:15:28.8594340Z checking whether gcc accepts -g... (cached) yes
2022-05-13T18:15:28.8595762Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T18:15:28.8599965Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T18:15:28.8619434Z checking additional paths...  -L/usr/local/lib
2022-05-13T18:15:29.7373494Z checking arg check macro for -m with gcc... yes
2022-05-13T18:15:30.0583716Z checking arg check macro for -Q with gcc... yes
2022-05-13T18:15:30.2390161Z checking if gcc supports -funroll-loops... yes
2022-05-13T18:15:30.4366410Z checking if gcc supports -Os... yes
2022-05-13T18:15:30.8588267Z checking if gcc supports -finline-functions... yes
2022-05-13T18:15:31.0671291Z checking if gcc supports -Og... yes
2022-05-13T18:15:31.2847982Z checking if gcc supports -Wall... yes
2022-05-13T18:15:31.4797202Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T18:15:31.6944852Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T18:15:31.9084043Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T18:15:32.2896138Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T18:15:32.4890428Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T18:15:32.8257646Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T18:15:33.0269151Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T18:15:33.3361362Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T18:15:33.5381355Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T18:15:33.8533774Z checking if gcc supports -Qunused-arguments... no
2022-05-13T18:15:34.0612181Z checking if gcc supports -std=gnu89... yes
2022-05-13T18:15:34.2694892Z checking if gcc supports -Wdate-time... yes
2022-05-13T18:15:34.6830629Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T18:15:35.1669516Z checking for 32/64 bit... 64-bit
2022-05-13T18:15:35.1909802Z checking additional paths (64 bit)... none
2022-05-13T18:15:35.1911325Z checking whether ln -s works... yes
2022-05-13T18:15:35.2552055Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T18:15:35.3543199Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T18:15:35.4708620Z checking for GNU make... make
2022-05-13T18:15:35.6578988Z checking whether make sets $(MAKE)... yes
2022-05-13T18:15:36.0835536Z checking how to run the C preprocessor... gcc -E
2022-05-13T18:15:36.5890634Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T18:15:36.8643727Z checking for sort... /usr/bin/sort
2022-05-13T18:15:36.8670288Z checking for find... /usr/bin/find
2022-05-13T18:15:36.8671530Z checking for perl... /usr/bin/perl
2022-05-13T18:15:36.8674056Z checking for ar... ar
2022-05-13T18:15:36.8686243Z checking for strip... strip
2022-05-13T18:15:36.8698007Z checking for strings... strings
2022-05-13T18:15:36.8713727Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T18:15:36.8970410Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T18:15:36.8972249Z checking if pkg-config will be used... no
2022-05-13T18:15:36.9554332Z checking for egrep... /usr/bin/grep -E
2022-05-13T18:15:38.1339141Z checking for ANSI C header files... yes
2022-05-13T18:15:38.4794889Z checking for sys/types.h... yes
2022-05-13T18:15:38.9299573Z checking for sys/stat.h... yes
2022-05-13T18:15:39.3378804Z checking for stdlib.h... yes
2022-05-13T18:15:39.7775130Z checking for string.h... yes
2022-05-13T18:15:40.2261724Z checking for memory.h... yes
2022-05-13T18:15:40.6321556Z checking for strings.h... yes
2022-05-13T18:15:41.0711538Z checking for inttypes.h... yes
2022-05-13T18:15:41.5084455Z checking for stdint.h... yes
2022-05-13T18:15:41.9489908Z checking for unistd.h... yes
2022-05-13T18:15:42.6455692Z checking size of short... 2
2022-05-13T18:15:43.2540237Z checking size of int... 4
2022-05-13T18:15:43.9298693Z checking size of long... 8
2022-05-13T18:15:44.5183512Z checking size of long long... 8
2022-05-13T18:15:45.1085259Z checking size of wchar_t... 2
2022-05-13T18:15:45.7195609Z checking size of int *... 8
2022-05-13T18:15:46.3229941Z checking size of void *... 8
2022-05-13T18:15:46.4075869Z configure: Trying to force AVX2 using default method (--enable-simd=avx2).
2022-05-13T18:15:46.7927081Z checking if gcc supports -mavx2 w/ linking... yes
2022-05-13T18:15:47.2677799Z checking for extra ASFLAGS... None needed
2022-05-13T18:15:47.5444011Z checking for X32 ABI... no
2022-05-13T18:15:47.5697538Z checking special compiler flags... Intel x86
2022-05-13T18:15:47.5698953Z configure: Testing tool-chain's CPU support with given options
2022-05-13T18:15:48.0351552Z checking for MMX... yes
2022-05-13T18:15:48.5526081Z checking for SSE2... yes
2022-05-13T18:15:49.1102775Z checking for SSSE3... yes
2022-05-13T18:15:49.7359599Z checking for SSE4.1... yes
2022-05-13T18:15:50.3135664Z checking for SSE4.2... yes
2022-05-13T18:15:51.6917023Z checking for AVX... yes
2022-05-13T18:15:52.9905811Z checking for XOP... no
2022-05-13T18:15:54.4132789Z checking for AVX2... yes
2022-05-13T18:15:55.6587272Z checking for AVX512F... no
2022-05-13T18:15:55.6847827Z checking for arch.h alternative... x86-64.h
2022-05-13T18:15:55.6879204Z checking for byte ordering according to target triple... little
2022-05-13T18:15:55.6897890Z checking supplied paths for OpenSSL...  
2022-05-13T18:15:55.6905870Z checking additional paths for OpenSSL... none
2022-05-13T18:15:55.9496612Z checking openssl/opensslv.h usability... yes
2022-05-13T18:15:56.0943084Z checking openssl/opensslv.h presence... yes
2022-05-13T18:15:56.0944440Z checking for openssl/opensslv.h... yes
2022-05-13T18:15:56.5244469Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T18:15:56.9592660Z checking for MD5_Update in -lcrypto... yes
2022-05-13T18:15:56.9611869Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T18:15:57.4564619Z checking for sqrt in -lm... yes
2022-05-13T18:15:57.8958990Z checking for clock_gettime in -lrt... yes
2022-05-13T18:15:58.3475377Z checking for deflate in -lz... yes
2022-05-13T18:15:59.3130405Z checking for library containing crypt... -lcrypt
2022-05-13T18:15:59.6369599Z checking gmp.h usability... yes
2022-05-13T18:15:59.7769188Z checking gmp.h presence... yes
2022-05-13T18:15:59.7773408Z checking for gmp.h... yes
2022-05-13T18:16:00.3027078Z checking for __gmpz_init in -lgmp... yes
2022-05-13T18:16:00.6343506Z checking skey.h usability... no
2022-05-13T18:16:00.8901590Z checking skey.h presence... no
2022-05-13T18:16:00.8902904Z checking for skey.h... no
2022-05-13T18:16:00.8909485Z checking for S/Key... using our own code
2022-05-13T18:16:01.2134748Z checking bzlib.h usability... yes
2022-05-13T18:16:01.3720919Z checking bzlib.h presence... yes
2022-05-13T18:16:01.3724989Z checking for bzlib.h... yes
2022-05-13T18:16:01.7730724Z checking for main in -lbz2... yes
2022-05-13T18:16:02.1890363Z checking for main in -lkernel32... yes
2022-05-13T18:16:02.6463695Z checking for dlopen in -ldl... yes
2022-05-13T18:16:03.9839306Z checking intrin.h usability... yes
2022-05-13T18:16:04.4630578Z checking intrin.h presence... yes
2022-05-13T18:16:04.4633285Z checking for intrin.h... yes
2022-05-13T18:16:04.8177622Z checking openssl/cmac.h usability... yes
2022-05-13T18:16:05.0834660Z checking openssl/cmac.h presence... yes
2022-05-13T18:16:05.0836561Z checking for openssl/cmac.h... yes
2022-05-13T18:16:05.1135661Z configure: rexgen check not enabled
2022-05-13T18:16:05.4958647Z checking pcap.h usability... no
2022-05-13T18:16:05.7375781Z checking pcap.h presence... no
2022-05-13T18:16:05.7378424Z checking for pcap.h... no
2022-05-13T18:16:06.1519803Z checking pcap/pcap.h usability... no
2022-05-13T18:16:06.4023735Z checking pcap/pcap.h presence... no
2022-05-13T18:16:06.4026422Z checking for pcap/pcap.h... no
2022-05-13T18:16:06.4636276Z checking for pcap.h... (cached) no
2022-05-13T18:16:06.5409740Z checking for pcap/pcap.h... (cached) no
2022-05-13T18:16:06.7886144Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T18:16:07.0130425Z checking whether string.h and strings.h may both be included... yes
2022-05-13T18:16:07.5401711Z checking for SHA256... yes
2022-05-13T18:16:08.1547613Z checking for WHIRLPOOL... yes
2022-05-13T18:16:08.7841747Z checking for RIPEMD160... yes
2022-05-13T18:16:09.4109658Z checking for AES_encrypt... yes
2022-05-13T18:16:10.0679688Z checking for DSA_get0_pqg... yes
2022-05-13T18:16:11.1954161Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T18:16:11.1963612Z checking additional paths for OpenCL... none
2022-05-13T18:16:11.4728507Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T18:16:12.1472080Z checking for the pthreads library -lpthreads... no
2022-05-13T18:16:12.6085342Z checking whether pthreads work without any flags... yes
2022-05-13T18:16:13.0546837Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T18:16:13.0549861Z checking if more special flags are required for pthreads... no
2022-05-13T18:16:13.4364733Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T18:16:13.7266234Z checking whether we are using the Microsoft C compiler... no
2022-05-13T18:16:14.1511943Z checking CL/cl.h usability... yes
2022-05-13T18:16:14.3251999Z checking CL/cl.h presence... yes
2022-05-13T18:16:14.3258631Z checking for CL/cl.h... yes
2022-05-13T18:16:14.8337365Z checking OpenCL/cl.h usability... no
2022-05-13T18:16:15.0792839Z checking OpenCL/cl.h presence... no
2022-05-13T18:16:15.0794609Z checking for OpenCL/cl.h... no
2022-05-13T18:16:17.9524383Z checking windows.h usability... yes
2022-05-13T18:16:19.4413430Z checking windows.h presence... yes
2022-05-13T18:16:19.4414905Z checking for windows.h... yes
2022-05-13T18:16:20.0091312Z checking for OpenCL library... -lOpenCL
2022-05-13T18:16:20.3513256Z checking arpa/inet.h usability... yes
2022-05-13T18:16:20.5297529Z checking arpa/inet.h presence... yes
2022-05-13T18:16:20.5301562Z checking for arpa/inet.h... yes
2022-05-13T18:16:20.9746997Z checking crypt.h usability... yes
2022-05-13T18:16:21.1637096Z checking crypt.h presence... yes
2022-05-13T18:16:21.1639115Z checking for crypt.h... yes
2022-05-13T18:16:21.6020351Z checking dirent.h usability... yes
2022-05-13T18:16:21.7854941Z checking dirent.h presence... yes
2022-05-13T18:16:21.7856509Z checking for dirent.h... yes
2022-05-13T18:16:22.2599812Z checking limits.h usability... yes
2022-05-13T18:16:22.4072481Z checking limits.h presence... yes
2022-05-13T18:16:22.4074521Z checking for limits.h... yes
2022-05-13T18:16:22.9274282Z checking locale.h usability... yes
2022-05-13T18:16:23.1262744Z checking locale.h presence... yes
2022-05-13T18:16:23.1265784Z checking for locale.h... yes
2022-05-13T18:16:23.6939966Z checking malloc.h usability... yes
2022-05-13T18:16:23.8647982Z checking malloc.h presence... yes
2022-05-13T18:16:23.8649293Z checking for malloc.h... yes
2022-05-13T18:16:24.5653428Z checking net/ethernet.h usability... no
2022-05-13T18:16:24.8757267Z checking net/ethernet.h presence... no
2022-05-13T18:16:24.8758982Z checking for net/ethernet.h... no
2022-05-13T18:16:25.2875556Z checking netdb.h usability... yes
2022-05-13T18:16:25.4936097Z checking netdb.h presence... yes
2022-05-13T18:16:25.4946610Z checking for netdb.h... yes
2022-05-13T18:16:26.0011908Z checking netinet/in.h usability... yes
2022-05-13T18:16:26.2223751Z checking netinet/in.h presence... yes
2022-05-13T18:16:26.2225392Z checking for netinet/in.h... yes
2022-05-13T18:16:26.6948410Z checking netinet/in_systm.h usability... yes
2022-05-13T18:16:26.8319172Z checking netinet/in_systm.h presence... yes
2022-05-13T18:16:26.8320976Z checking for netinet/in_systm.h... yes
2022-05-13T18:16:27.0134068Z checking for string.h... (cached) yes
2022-05-13T18:16:27.1855736Z checking for strings.h... (cached) yes
2022-05-13T18:16:27.6954071Z checking sys/ethernet.h usability... no
2022-05-13T18:16:27.9658854Z checking sys/ethernet.h presence... no
2022-05-13T18:16:27.9660954Z checking for sys/ethernet.h... no
2022-05-13T18:16:28.3191443Z checking sys/file.h usability... yes
2022-05-13T18:16:28.4854358Z checking sys/file.h presence... yes
2022-05-13T18:16:28.4855877Z checking for sys/file.h... yes
2022-05-13T18:16:28.9696004Z checking sys/param.h usability... yes
2022-05-13T18:16:29.1344767Z checking sys/param.h presence... yes
2022-05-13T18:16:29.1347566Z checking for sys/param.h... yes
2022-05-13T18:16:29.5954524Z checking sys/socket.h usability... yes
2022-05-13T18:16:29.7429198Z checking sys/socket.h presence... yes
2022-05-13T18:16:29.7434541Z checking for sys/socket.h... yes
2022-05-13T18:16:30.1507676Z checking sys/time.h usability... yes
2022-05-13T18:16:30.3117555Z checking sys/time.h presence... yes
2022-05-13T18:16:30.3119822Z checking for sys/time.h... yes
2022-05-13T18:16:30.7121007Z checking sys/times.h usability... yes
2022-05-13T18:16:30.8570330Z checking sys/times.h presence... yes
2022-05-13T18:16:30.8572168Z checking for sys/times.h... yes
2022-05-13T18:16:31.0293126Z checking for sys/types.h... (cached) yes
2022-05-13T18:16:31.4723390Z checking termios.h usability... yes
2022-05-13T18:16:31.6277642Z checking termios.h presence... yes
2022-05-13T18:16:31.6279629Z checking for termios.h... yes
2022-05-13T18:16:31.8365569Z checking for unistd.h... (cached) yes
2022-05-13T18:16:32.4472720Z checking unixlib/local.h usability... no
2022-05-13T18:16:32.7220714Z checking unixlib/local.h presence... no
2022-05-13T18:16:32.7222043Z checking for unixlib/local.h... no
2022-05-13T18:16:32.7944443Z checking for windows.h... (cached) yes
2022-05-13T18:16:33.1110442Z checking for net/if.h... yes
2022-05-13T18:16:33.4385435Z checking for net/if_arp.h... no
2022-05-13T18:16:33.8012689Z checking for netinet/if_ether.h... no
2022-05-13T18:16:34.0296264Z checking for netinet/ip.h... yes
2022-05-13T18:16:34.5604970Z checking for stdbool.h that conforms to C99... yes
2022-05-13T18:16:35.2310193Z checking for _Bool... yes
2022-05-13T18:16:35.4284599Z checking for inline... inline
2022-05-13T18:16:36.0929245Z checking for int32_t... yes
2022-05-13T18:16:36.7044230Z checking for int64_t... yes
2022-05-13T18:16:37.3560886Z checking for off_t... yes
2022-05-13T18:16:37.9646441Z checking for size_t... yes
2022-05-13T18:16:38.5954000Z checking for ssize_t... yes
2022-05-13T18:16:38.8639781Z checking for uint16_t... yes
2022-05-13T18:16:39.1700487Z checking for uint32_t... yes
2022-05-13T18:16:39.4160192Z checking for uint64_t... yes
2022-05-13T18:16:39.7305274Z checking for uint8_t... yes
2022-05-13T18:16:40.3927780Z checking for ptrdiff_t... yes
2022-05-13T18:16:40.7999683Z checking for int128... no
2022-05-13T18:16:41.4090751Z checking for __int128... yes
2022-05-13T18:16:42.0280677Z checking for __int128_t... yes
2022-05-13T18:16:42.4998493Z checking for error_at_line... yes
2022-05-13T18:16:43.1928434Z checking for pid_t... yes
2022-05-13T18:16:43.5247454Z checking vfork.h usability... no
2022-05-13T18:16:43.7852290Z checking vfork.h presence... no
2022-05-13T18:16:43.7853763Z checking for vfork.h... no
2022-05-13T18:16:44.4035634Z checking for fork... yes
2022-05-13T18:16:44.9593726Z checking for vfork... yes
2022-05-13T18:16:45.5503482Z checking for working fork... yes
2022-05-13T18:16:45.5505153Z checking for working vfork... (cached) yes
2022-05-13T18:16:46.0984321Z checking for fseek64... no
2022-05-13T18:16:46.5585263Z checking for fseeko... yes
2022-05-13T18:16:47.1935898Z checking for fseeko64... no
2022-05-13T18:16:47.7489302Z checking for _fseeki64... no
2022-05-13T18:16:48.3409743Z checking for lseek64... no
2022-05-13T18:16:48.8171532Z checking for lseek... yes
2022-05-13T18:16:49.5036166Z checking for ftell64... no
2022-05-13T18:16:49.9902711Z checking for ftello... yes
2022-05-13T18:16:50.6950578Z checking for ftello64... no
2022-05-13T18:16:51.2717729Z checking for _ftelli64... no
2022-05-13T18:16:51.8191789Z checking for fopen64... no
2022-05-13T18:16:52.3594425Z checking for _fopen64... no
2022-05-13T18:16:52.8414593Z checking for memmem... yes
2022-05-13T18:16:53.4044898Z checking for mmap... yes
2022-05-13T18:16:53.9721276Z checking for sleep... yes
2022-05-13T18:16:54.5381083Z checking for setenv... yes
2022-05-13T18:16:55.0482756Z checking for putenv... yes
2022-05-13T18:16:55.6829853Z checking for strcasecmp... yes
2022-05-13T18:16:56.2925070Z checking for strncasecmp... yes
2022-05-13T18:16:56.9090607Z checking for stricmp... no
2022-05-13T18:16:57.4295714Z checking for strcmpi... no
2022-05-13T18:16:57.9546592Z checking for _stricmp... no
2022-05-13T18:16:58.5211666Z checking for _strcmpi... no
2022-05-13T18:16:59.0717004Z checking for strnicmp... no
2022-05-13T18:16:59.5928990Z checking for strncmpi... no
2022-05-13T18:17:00.1452149Z checking for _strnicmp... no
2022-05-13T18:17:00.6852388Z checking for _strncmpi... no
2022-05-13T18:17:01.2836405Z checking for strnlen... yes
2022-05-13T18:17:01.8440591Z checking for strlwr... yes
2022-05-13T18:17:02.4155877Z checking for strupr... yes
2022-05-13T18:17:03.0718616Z checking for strrev... no
2022-05-13T18:17:03.5199060Z checking for atoll... yes
2022-05-13T18:17:04.4150393Z checking for _atoi64... no
2022-05-13T18:17:04.7508175Z checking for snprintf... yes
2022-05-13T18:17:05.3600892Z checking for sprintf_s... no
2022-05-13T18:17:05.7930181Z checking for strcasestr... yes
2022-05-13T18:17:06.2800338Z checking for clGetKernelArgInfo... yes
2022-05-13T18:17:06.8262897Z checking for posix_memalign... yes
2022-05-13T18:17:07.2617199Z checking for yasm that supports "-f win64"... 
2022-05-13T18:17:07.2636362Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T18:17:07.6517068Z checking for _get_osfhandle... yes
2022-05-13T18:17:10.4985486Z checking for GetFileSizeEx... yes
2022-05-13T18:17:10.5202969Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T18:17:11.0231325Z checking size of size_t... 8
2022-05-13T18:17:11.5661355Z checking size of off_t... 8
2022-05-13T18:17:11.6148306Z configure: Fuzz check disabled
2022-05-13T18:17:11.6149724Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T18:17:11.6243217Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T18:17:11.7235914Z configure: creating Makefile dependencies
2022-05-13T18:17:14.3875403Z configure: creating ./john_build_rule.h
2022-05-13T18:17:14.6689259Z configure: creating ./config.status
2022-05-13T18:17:16.5318362Z config.status: creating Makefile
2022-05-13T18:17:16.7942539Z config.status: creating aes/Makefile
2022-05-13T18:17:17.1268619Z config.status: creating aes/aesni/Makefile
2022-05-13T18:17:17.4848405Z config.status: creating aes/openssl/Makefile
2022-05-13T18:17:17.8344175Z config.status: creating secp256k1/Makefile
2022-05-13T18:17:18.1880279Z config.status: creating ed25519-donna/Makefile
2022-05-13T18:17:18.5315841Z config.status: creating poly1305-donna/Makefile
2022-05-13T18:17:18.8716368Z config.status: creating autoconfig.h
2022-05-13T18:17:18.9787466Z config.status: autoconfig.h is unchanged
2022-05-13T18:17:19.0661584Z config.status: linking x86-64.h to arch.h
2022-05-13T18:17:19.1607902Z config.status: executing default commands
2022-05-13T18:17:19.1933070Z configure: creating ./fmt_externs.h
2022-05-13T18:17:29.1165124Z configure: creating ./fmt_registers.h
2022-05-13T18:17:41.9642790Z 
2022-05-13T18:17:41.9647147Z Configured for building John the Ripper jumbo:
2022-05-13T18:17:41.9649036Z 
2022-05-13T18:17:41.9650677Z Target CPU ......................................... x86_64 AVX2, 64-bit LE
2022-05-13T18:17:41.9652170Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T18:17:41.9653524Z Target OS .......................................... cygwin
2022-05-13T18:17:41.9654858Z Cross compiling .................................... no
2022-05-13T18:17:41.9655922Z Legacy arch header ................................. x86-64.h
2022-05-13T18:17:41.9656455Z 
2022-05-13T18:17:41.9657161Z Optional libraries/features found:
2022-05-13T18:17:41.9658347Z Memory map (share/page large files) ................ yes
2022-05-13T18:17:41.9659391Z Fork support ....................................... yes
2022-05-13T18:17:41.9660397Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T18:17:41.9661687Z OpenCL support ..................................... yes
2022-05-13T18:17:41.9663495Z Generic crypt(3) format ............................ yes
2022-05-13T18:17:41.9664359Z OpenSSL (many additional formats) .................. yes
2022-05-13T18:17:41.9665220Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T18:17:41.9666040Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T18:17:41.9666842Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T18:17:41.9667587Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T18:17:41.9668403Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T18:17:41.9669196Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T18:17:41.9669927Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T18:17:41.9670940Z OpenMPI support (default disabled) ................. no
2022-05-13T18:17:41.9671916Z Experimental code (default disabled) ............... no
2022-05-13T18:17:41.9672753Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T18:17:41.9673125Z 
2022-05-13T18:17:41.9673719Z Install missing libraries to get any needed features that were omitted.
2022-05-13T18:17:41.9674102Z 
2022-05-13T18:17:41.9674681Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T18:19:30.3188999Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T18:19:30.3191537Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:30.3193573Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.3195074Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.3196547Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.3198255Z       |                         ^~~~
2022-05-13T18:19:30.3200586Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.3203010Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.3203935Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.3204828Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.3205563Z       |                         ^~~~
2022-05-13T18:19:30.3206522Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:19:30.3207494Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:30.3208205Z       | ^~~~~~~~~~~~
2022-05-13T18:19:30.3580709Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T18:19:30.3582462Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:30.3584138Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:30.3585056Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.3585862Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.3586795Z       |                         ^~~~
2022-05-13T18:19:30.3587685Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.3588443Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:30.3589236Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.3589997Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.3590707Z       |                         ^~~~
2022-05-13T18:19:30.3591448Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:19:30.3592369Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:30.3593096Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:30.3935067Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T18:19:30.3937005Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:19:30.3938348Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:30.3939417Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.3940363Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.3941127Z       |                         ^~~~
2022-05-13T18:19:30.3942094Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.3943093Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:30.3944007Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.3944878Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.3945667Z       |                         ^~~~
2022-05-13T18:19:30.3946678Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:19:30.3947765Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:19:30.3948615Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:30.4839197Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T18:19:30.4841086Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:30.4842843Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.4843809Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.4844746Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:19:30.4845544Z       |                 ^~~~
2022-05-13T18:19:30.4846704Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.4847701Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.4848576Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.4849465Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:19:30.4850246Z       |                 ^~~~
2022-05-13T18:19:30.4851062Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:19:30.4852076Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:30.4852886Z       | ^~~~~~~~~~~~
2022-05-13T18:19:30.5586066Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:19:30.5588331Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:19:30.5589426Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:19:30.5590659Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:30.5591907Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.5592877Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.5593788Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.5594588Z       |                 ^~~~
2022-05-13T18:19:30.5595693Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:19:30.5598055Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.5599109Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.5600023Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.5600896Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.5601726Z       |                 ^~~~
2022-05-13T18:19:30.5602595Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:19:30.5603591Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:30.5604392Z       | ^~~~~~~~~~~~
2022-05-13T18:19:30.5605078Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:19:30.5607059Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:19:30.5608291Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:19:30.5609693Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:30.5610815Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.5611663Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.5612551Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.5613293Z       |         ^~~~
2022-05-13T18:19:30.5614032Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:19:30.5615134Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.5616157Z   276 | #define RFUN   ripemd_round
2022-05-13T18:19:30.5617914Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.5618762Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:30.5619493Z       |         ^~~~
2022-05-13T18:19:30.5620317Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:19:30.5621305Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:30.5622092Z       | ^~~~~~~~~~~~
2022-05-13T18:19:30.9576918Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T18:19:30.9578916Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:30.9580155Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:30.9581137Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.9582405Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:19:30.9583318Z       |                 ^~~~
2022-05-13T18:19:30.9584879Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:30.9587078Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:30.9588811Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:30.9589992Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:19:30.9590767Z       |                 ^~~~
2022-05-13T18:19:30.9591582Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:19:30.9592587Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:30.9593473Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:31.0491622Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:19:31.0493191Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:19:31.0494268Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:19:31.0495609Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:31.0497533Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:31.0498302Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.0499086Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.0499710Z       |                 ^~~~
2022-05-13T18:19:31.0500332Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:19:31.0501204Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:31.0502035Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:31.0503172Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.0503885Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.0504426Z       |                 ^~~~
2022-05-13T18:19:31.0505116Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:19:31.0506624Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:31.0507539Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:31.0517017Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:19:31.0518169Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:19:31.0519502Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:19:31.0520566Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:19:31.0521396Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:31.0522584Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.0523932Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.0524545Z       |         ^~~~
2022-05-13T18:19:31.0525262Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:19:31.0526903Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:31.0528368Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:19:31.0529210Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.0529911Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.0530563Z       |         ^~~~
2022-05-13T18:19:31.0531314Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:19:31.0532142Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:19:31.0532782Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:31.6127098Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T18:19:31.6128964Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:19:31.6130341Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:31.6131372Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.6132270Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:19:31.6133059Z       |                 ^~~~
2022-05-13T18:19:31.6134069Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:31.6135467Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:31.6136540Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.6137400Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:19:31.6138192Z       |                 ^~~~
2022-05-13T18:19:31.6139030Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:19:31.6140049Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:19:31.6140898Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:31.7003607Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:19:31.7005263Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:19:31.7006697Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:19:31.7008081Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:19:31.7009284Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:31.7011015Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.7012054Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.7013514Z       |                 ^~~~
2022-05-13T18:19:31.7015129Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:19:31.7016075Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:31.7016916Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:31.7017703Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.7018446Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.7019406Z       |                 ^~~~
2022-05-13T18:19:31.7021070Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:19:31.7022089Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:19:31.7023709Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:19:31.7024541Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:19:31.7025637Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:19:31.7026868Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:19:31.7028245Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:19:31.7029243Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:31.7031279Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.7032978Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.7034778Z       |         ^~~~
2022-05-13T18:19:31.7035624Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:19:31.7036873Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:19:31.7037933Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:19:31.7038814Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:19:31.7039699Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:19:31.7040952Z       |         ^~~~
2022-05-13T18:19:31.7041720Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:19:31.7043333Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:19:31.7044331Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:20:48.5033970Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:20:48.5039434Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5041176Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:20:48.5042335Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5043186Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T18:20:48.5043948Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5044571Z   366 |                                         keys,
2022-05-13T18:20:48.5045316Z       |                                         ~~~~~
2022-05-13T18:20:48.5047947Z   367 |                                         lens, cur_salt->salt,
2022-05-13T18:20:48.5050390Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5051859Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T18:20:48.5057538Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5059321Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:20:48.5061514Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5067367Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:20:48.5068966Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5070334Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:20:48.5071366Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:20:48.5072445Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:20:48.5073823Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:20:48.5074966Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5076109Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5080415Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:20:48.5082347Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5083580Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T18:20:48.5084511Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5085346Z   374 |                                         keys,
2022-05-13T18:20:48.5087556Z       |                                         ~~~~~
2022-05-13T18:20:48.5088562Z   375 |                                         lens, cur_salt->salt,
2022-05-13T18:20:48.5089388Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5090298Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T18:20:48.5091211Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5092369Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:20:48.5093923Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5095625Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:20:48.5098655Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5100149Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:20:48.5101207Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:20:48.5102188Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:20:48.5103539Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:20:48.5104755Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5133449Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5135156Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:20:48.5136258Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5137148Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T18:20:48.5138150Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5140364Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T18:20:48.5141377Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5142378Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:20:48.5143853Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:20:48.5144962Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:20:48.5146375Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5147712Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:20:48.5149170Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:20:48.5150554Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:20:48.5151610Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:20:48.5152602Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:20:48.5154045Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:20:48.5155209Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9621123Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:23:02.9623430Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:23:02.9625920Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:23:02.9627417Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9628449Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:23:02.9629367Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9630190Z   270 |                                         lens, cur_salt->salt,
2022-05-13T18:23:02.9631072Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9631883Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:23:02.9632794Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9634157Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:23:02.9635518Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:23:02.9637583Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:23:02.9639915Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:23:02.9660529Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:23:02.9661623Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:23:02.9662631Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:23:02.9663798Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:23:02.9664890Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9666110Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:02.9667594Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:23:02.9668749Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9669728Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:23:02.9670624Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9671838Z   247 |                                         lens, cur_salt->salt,
2022-05-13T18:23:02.9672700Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9673562Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:23:02.9674534Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9675439Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:23:02.9676925Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:02.9678184Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:23:02.9679534Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:02.9680851Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:23:02.9681859Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:23:02.9682878Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:23:02.9684037Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:23:02.9685094Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9686138Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:02.9687841Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:23:02.9688980Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9689993Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:23:02.9690950Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9691816Z   225 |                                         lens, cur_salt->salt,
2022-05-13T18:23:02.9692620Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9693637Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:23:02.9694554Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:02.9695646Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:23:02.9699352Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:02.9700867Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:23:02.9702187Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:02.9703540Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:23:02.9704592Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:23:02.9705605Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:23:02.9707203Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:23:02.9708345Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5510310Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:23:43.5512678Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:43.5514153Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:23:43.5515352Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5516650Z   117 |                                 cur_salt->iterations,
2022-05-13T18:23:43.5517484Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5518500Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T18:23:43.5521224Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5523287Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T18:23:43.5525523Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5526772Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:23:43.5528792Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:43.5530358Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:23:43.5531706Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:43.5532863Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:23:43.5533766Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:23:43.5535239Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:23:43.5536371Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:23:43.5537213Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5538180Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:43.5539075Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:23:43.5539750Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5540527Z   122 |                                 cur_salt->iterations,
2022-05-13T18:23:43.5541280Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5542098Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T18:23:43.5544016Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5545172Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T18:23:43.5546002Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:23:43.5546893Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:23:43.5547924Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:43.5549015Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:23:43.5550085Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:23:43.5551092Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:23:43.5551957Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:23:43.5552756Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:23:43.5553706Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:23:43.5554653Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2751580Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:24:21.2754969Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:24:21.2756889Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:24:21.2758756Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2760271Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:24:21.2762143Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2763904Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T18:24:21.2765119Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2765969Z   153 |                                                    salt_len, mackey,
2022-05-13T18:24:21.2766711Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2767915Z   154 |                                                    BINARY_SIZE);
2022-05-13T18:24:21.2768793Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:24:21.2769641Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:24:21.2770650Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:24:21.2771986Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:24:21.2773059Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:24:21.2774062Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:24:21.2774899Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:24:21.2775678Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:24:21.2776618Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:24:21.2777472Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2779478Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:24:21.2781684Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:24:21.2783165Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2784006Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:24:21.2785324Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2786133Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T18:24:21.2786825Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2787654Z   138 |                                                    salt_len, mackey,
2022-05-13T18:24:21.2788350Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:24:21.2789085Z   139 |                                                    BINARY_SIZE);
2022-05-13T18:24:21.2789747Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:24:21.2790574Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:24:21.2791851Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:24:21.2792898Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:24:21.2794139Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:24:21.2795311Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:24:21.2796183Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:24:21.2796986Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:24:21.2797904Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:24:21.2798764Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:25:08.3197662Z In file included from subsets.c:25:
2022-05-13T18:25:08.3200515Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T18:25:08.3202528Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T18:25:08.3203825Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T18:25:08.3204774Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T18:28:04.3212470Z ar: creating aes.a
2022-05-13T18:28:17.0262091Z ar: creating secp256k1.a
2022-05-13T18:28:26.2784206Z ar: creating ed25519-donna.a
2022-05-13T18:28:26.9828659Z ar: creating poly1305-donna.a
2022-05-13T18:29:07.0790745Z 
2022-05-13T18:29:07.1016858Z Make process completed.
2022-05-13T18:29:08.5345549Z 
2022-05-13T18:29:08.5635770Z Make process completed.
2022-05-13T18:29:08.5957195Z Stripping executables.
2022-05-13T18:29:09.3335127Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=avx512f  CPPFLAGS='-fno-asynchronous-unwind-tables -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-avx2\\\"\" '                                                                               && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx512f-non-omp'
2022-05-13T18:29:12.2853676Z checking build system type... x86_64-unknown-cygwin
2022-05-13T18:29:12.2856488Z checking host system type... x86_64-unknown-cygwin
2022-05-13T18:29:12.3144220Z checking whether to compile using MPI... no
2022-05-13T18:29:12.3152816Z checking for gcc... gcc
2022-05-13T18:29:13.2327856Z checking whether the C compiler works... yes
2022-05-13T18:29:13.2330063Z checking for C compiler default output file name... a.exe
2022-05-13T18:29:14.0064544Z checking for suffix of executables... .exe
2022-05-13T18:29:14.1980859Z checking whether we are cross compiling... no
2022-05-13T18:29:14.4882995Z checking for suffix of object files... o
2022-05-13T18:29:14.6862142Z checking whether we are using the GNU C compiler... yes
2022-05-13T18:29:14.8882959Z checking whether gcc accepts -g... yes
2022-05-13T18:29:15.1961060Z checking for gcc option to accept ISO C89... none needed
2022-05-13T18:29:15.4880932Z checking whether gcc understands -c and -o together... yes
2022-05-13T18:29:15.9097268Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T18:29:15.9099508Z checking whether gcc accepts -g... (cached) yes
2022-05-13T18:29:15.9101619Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T18:29:15.9106431Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T18:29:15.9142299Z checking additional paths...  -L/usr/local/lib
2022-05-13T18:29:16.8692456Z checking arg check macro for -m with gcc... yes
2022-05-13T18:29:17.1604260Z checking arg check macro for -Q with gcc... yes
2022-05-13T18:29:17.3162084Z checking if gcc supports -funroll-loops... yes
2022-05-13T18:29:17.5032107Z checking if gcc supports -Os... yes
2022-05-13T18:29:17.9001130Z checking if gcc supports -finline-functions... yes
2022-05-13T18:29:18.1095135Z checking if gcc supports -Og... yes
2022-05-13T18:29:18.3134331Z checking if gcc supports -Wall... yes
2022-05-13T18:29:18.5180482Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T18:29:18.7100997Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T18:29:18.9292545Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T18:29:19.2765946Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T18:29:19.4584360Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T18:29:19.7868449Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T18:29:19.9819451Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T18:29:20.2623591Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T18:29:20.4355934Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T18:29:20.7047635Z checking if gcc supports -Qunused-arguments... no
2022-05-13T18:29:20.8821238Z checking if gcc supports -std=gnu89... yes
2022-05-13T18:29:21.0522331Z checking if gcc supports -Wdate-time... yes
2022-05-13T18:29:21.4361502Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T18:29:21.8383095Z checking for 32/64 bit... 64-bit
2022-05-13T18:29:21.8606200Z checking additional paths (64 bit)... none
2022-05-13T18:29:21.8607718Z checking whether ln -s works... yes
2022-05-13T18:29:21.9051453Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T18:29:21.9722739Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T18:29:22.0671777Z checking for GNU make... make
2022-05-13T18:29:22.2283695Z checking whether make sets $(MAKE)... yes
2022-05-13T18:29:22.6182905Z checking how to run the C preprocessor... gcc -E
2022-05-13T18:29:23.0640441Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T18:29:23.3086066Z checking for sort... /usr/bin/sort
2022-05-13T18:29:23.3096236Z checking for find... /usr/bin/find
2022-05-13T18:29:23.3108797Z checking for perl... /usr/bin/perl
2022-05-13T18:29:23.3144623Z checking for ar... ar
2022-05-13T18:29:23.3146142Z checking for strip... strip
2022-05-13T18:29:23.3189062Z checking for strings... strings
2022-05-13T18:29:23.3190373Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T18:29:23.3399997Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T18:29:23.3405388Z checking if pkg-config will be used... no
2022-05-13T18:29:23.3992573Z checking for egrep... /usr/bin/grep -E
2022-05-13T18:29:24.4737885Z checking for ANSI C header files... yes
2022-05-13T18:29:24.7512934Z checking for sys/types.h... yes
2022-05-13T18:29:25.1199860Z checking for sys/stat.h... yes
2022-05-13T18:29:25.5790604Z checking for stdlib.h... yes
2022-05-13T18:29:25.9895756Z checking for string.h... yes
2022-05-13T18:29:26.4487305Z checking for memory.h... yes
2022-05-13T18:29:26.8657625Z checking for strings.h... yes
2022-05-13T18:29:27.2857676Z checking for inttypes.h... yes
2022-05-13T18:29:27.7202199Z checking for stdint.h... yes
2022-05-13T18:29:28.1940296Z checking for unistd.h... yes
2022-05-13T18:29:28.9233058Z checking size of short... 2
2022-05-13T18:29:29.5392185Z checking size of int... 4
2022-05-13T18:29:30.1638437Z checking size of long... 8
2022-05-13T18:29:30.7684092Z checking size of long long... 8
2022-05-13T18:29:31.3600477Z checking size of wchar_t... 2
2022-05-13T18:29:32.0362510Z checking size of int *... 8
2022-05-13T18:29:32.6437948Z checking size of void *... 8
2022-05-13T18:29:32.7276577Z configure: Trying to force AVX512F using default method (--enable-simd=avx512f).
2022-05-13T18:29:33.1159883Z checking if gcc supports -mavx512f w/ linking... yes
2022-05-13T18:29:33.5621758Z checking for extra ASFLAGS... None needed
2022-05-13T18:29:33.8311636Z checking for X32 ABI... no
2022-05-13T18:29:33.8615759Z checking special compiler flags... Intel x86
2022-05-13T18:29:33.8618052Z configure: Testing tool-chain's CPU support with given options
2022-05-13T18:29:34.2914217Z checking for MMX... yes
2022-05-13T18:29:34.7821775Z checking for SSE2... yes
2022-05-13T18:29:35.2746133Z checking for SSSE3... yes
2022-05-13T18:29:35.8080201Z checking for SSE4.1... yes
2022-05-13T18:29:36.3113876Z checking for SSE4.2... yes
2022-05-13T18:29:37.5202106Z checking for AVX... yes
2022-05-13T18:29:38.8852074Z checking for XOP... no
2022-05-13T18:29:40.1533928Z checking for AVX2... yes
2022-05-13T18:29:41.3277405Z checking for AVX512F... yes
2022-05-13T18:29:42.4276393Z checking for AVX512BW... no
2022-05-13T18:29:42.4548560Z checking for arch.h alternative... x86-64.h
2022-05-13T18:29:42.4560941Z checking for byte ordering according to target triple... little
2022-05-13T18:29:42.4572881Z checking supplied paths for OpenSSL...  
2022-05-13T18:29:42.4577606Z checking additional paths for OpenSSL... none
2022-05-13T18:29:42.7182672Z checking openssl/opensslv.h usability... yes
2022-05-13T18:29:42.8348770Z checking openssl/opensslv.h presence... yes
2022-05-13T18:29:42.8350142Z checking for openssl/opensslv.h... yes
2022-05-13T18:29:43.2969192Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T18:29:43.7624205Z checking for MD5_Update in -lcrypto... yes
2022-05-13T18:29:43.7650988Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T18:29:44.3030351Z checking for sqrt in -lm... yes
2022-05-13T18:29:44.7083494Z checking for clock_gettime in -lrt... yes
2022-05-13T18:29:45.1128688Z checking for deflate in -lz... yes
2022-05-13T18:29:46.0058877Z checking for library containing crypt... -lcrypt
2022-05-13T18:29:46.3240761Z checking gmp.h usability... yes
2022-05-13T18:29:46.4729942Z checking gmp.h presence... yes
2022-05-13T18:29:46.4731373Z checking for gmp.h... yes
2022-05-13T18:29:46.9922080Z checking for __gmpz_init in -lgmp... yes
2022-05-13T18:29:47.3077298Z checking skey.h usability... no
2022-05-13T18:29:47.5534618Z checking skey.h presence... no
2022-05-13T18:29:47.5536121Z checking for skey.h... no
2022-05-13T18:29:47.5542979Z checking for S/Key... using our own code
2022-05-13T18:29:47.8177252Z checking bzlib.h usability... yes
2022-05-13T18:29:47.9850366Z checking bzlib.h presence... yes
2022-05-13T18:29:47.9852028Z checking for bzlib.h... yes
2022-05-13T18:29:48.3822005Z checking for main in -lbz2... yes
2022-05-13T18:29:48.7784751Z checking for main in -lkernel32... yes
2022-05-13T18:29:49.2119079Z checking for dlopen in -ldl... yes
2022-05-13T18:29:50.5709035Z checking intrin.h usability... yes
2022-05-13T18:29:50.9937904Z checking intrin.h presence... yes
2022-05-13T18:29:50.9939355Z checking for intrin.h... yes
2022-05-13T18:29:51.3482656Z checking openssl/cmac.h usability... yes
2022-05-13T18:29:51.5833308Z checking openssl/cmac.h presence... yes
2022-05-13T18:29:51.5835106Z checking for openssl/cmac.h... yes
2022-05-13T18:29:51.6193454Z configure: rexgen check not enabled
2022-05-13T18:29:52.0001588Z checking pcap.h usability... no
2022-05-13T18:29:52.2112434Z checking pcap.h presence... no
2022-05-13T18:29:52.2114134Z checking for pcap.h... no
2022-05-13T18:29:52.6036544Z checking pcap/pcap.h usability... no
2022-05-13T18:29:52.8284681Z checking pcap/pcap.h presence... no
2022-05-13T18:29:52.8289611Z checking for pcap/pcap.h... no
2022-05-13T18:29:52.8863866Z checking for pcap.h... (cached) no
2022-05-13T18:29:52.9433122Z checking for pcap/pcap.h... (cached) no
2022-05-13T18:29:53.1738805Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T18:29:53.3852298Z checking whether string.h and strings.h may both be included... yes
2022-05-13T18:29:53.8865237Z checking for SHA256... yes
2022-05-13T18:29:54.4810924Z checking for WHIRLPOOL... yes
2022-05-13T18:29:55.0675244Z checking for RIPEMD160... yes
2022-05-13T18:29:55.6490143Z checking for AES_encrypt... yes
2022-05-13T18:29:56.2414093Z checking for DSA_get0_pqg... yes
2022-05-13T18:29:56.5931983Z checking additional paths for OpenCL... none
2022-05-13T18:29:56.8859969Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T18:29:57.4975994Z checking for the pthreads library -lpthreads... no
2022-05-13T18:29:57.9630115Z checking whether pthreads work without any flags... yes
2022-05-13T18:29:58.4173763Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T18:29:58.4176051Z checking if more special flags are required for pthreads... no
2022-05-13T18:29:58.7243406Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T18:29:58.9669136Z checking whether we are using the Microsoft C compiler... no
2022-05-13T18:29:59.3852989Z checking CL/cl.h usability... yes
2022-05-13T18:29:59.5933615Z checking CL/cl.h presence... yes
2022-05-13T18:29:59.5935572Z checking for CL/cl.h... yes
2022-05-13T18:30:00.1460667Z checking OpenCL/cl.h usability... no
2022-05-13T18:30:00.3971652Z checking OpenCL/cl.h presence... no
2022-05-13T18:30:00.3973393Z checking for OpenCL/cl.h... no
2022-05-13T18:30:03.3968327Z checking windows.h usability... yes
2022-05-13T18:30:04.8875956Z checking windows.h presence... yes
2022-05-13T18:30:04.8878737Z checking for windows.h... yes
2022-05-13T18:30:05.3917914Z checking for OpenCL library... -lOpenCL
2022-05-13T18:30:05.7115479Z checking arpa/inet.h usability... yes
2022-05-13T18:30:05.8774879Z checking arpa/inet.h presence... yes
2022-05-13T18:30:05.8781799Z checking for arpa/inet.h... yes
2022-05-13T18:30:06.2776670Z checking crypt.h usability... yes
2022-05-13T18:30:06.4077742Z checking crypt.h presence... yes
2022-05-13T18:30:06.4079471Z checking for crypt.h... yes
2022-05-13T18:30:06.7897593Z checking dirent.h usability... yes
2022-05-13T18:30:06.9457473Z checking dirent.h presence... yes
2022-05-13T18:30:06.9459428Z checking for dirent.h... yes
2022-05-13T18:30:07.3853851Z checking limits.h usability... yes
2022-05-13T18:30:07.5159013Z checking limits.h presence... yes
2022-05-13T18:30:07.5160355Z checking for limits.h... yes
2022-05-13T18:30:07.9008039Z checking locale.h usability... yes
2022-05-13T18:30:08.0323915Z checking locale.h presence... yes
2022-05-13T18:30:08.0330445Z checking for locale.h... yes
2022-05-13T18:30:08.4103558Z checking malloc.h usability... yes
2022-05-13T18:30:08.5483425Z checking malloc.h presence... yes
2022-05-13T18:30:08.5485770Z checking for malloc.h... yes
2022-05-13T18:30:09.0461702Z checking net/ethernet.h usability... no
2022-05-13T18:30:09.2834761Z checking net/ethernet.h presence... no
2022-05-13T18:30:09.2840056Z checking for net/ethernet.h... no
2022-05-13T18:30:09.5941294Z checking netdb.h usability... yes
2022-05-13T18:30:09.7451335Z checking netdb.h presence... yes
2022-05-13T18:30:09.7453857Z checking for netdb.h... yes
2022-05-13T18:30:10.1419481Z checking netinet/in.h usability... yes
2022-05-13T18:30:10.3134765Z checking netinet/in.h presence... yes
2022-05-13T18:30:10.3136297Z checking for netinet/in.h... yes
2022-05-13T18:30:10.7475058Z checking netinet/in_systm.h usability... yes
2022-05-13T18:30:10.8922633Z checking netinet/in_systm.h presence... yes
2022-05-13T18:30:10.8925451Z checking for netinet/in_systm.h... yes
2022-05-13T18:30:11.0632428Z checking for string.h... (cached) yes
2022-05-13T18:30:11.2395572Z checking for strings.h... (cached) yes
2022-05-13T18:30:11.8182461Z checking sys/ethernet.h usability... no
2022-05-13T18:30:12.0607977Z checking sys/ethernet.h presence... no
2022-05-13T18:30:12.0610592Z checking for sys/ethernet.h... no
2022-05-13T18:30:12.3754701Z checking sys/file.h usability... yes
2022-05-13T18:30:12.5431430Z checking sys/file.h presence... yes
2022-05-13T18:30:12.5435852Z checking for sys/file.h... yes
2022-05-13T18:30:12.9425636Z checking sys/param.h usability... yes
2022-05-13T18:30:13.0914874Z checking sys/param.h presence... yes
2022-05-13T18:30:13.0916325Z checking for sys/param.h... yes
2022-05-13T18:30:13.5083613Z checking sys/socket.h usability... yes
2022-05-13T18:30:13.6700038Z checking sys/socket.h presence... yes
2022-05-13T18:30:13.6702035Z checking for sys/socket.h... yes
2022-05-13T18:30:14.0907321Z checking sys/time.h usability... yes
2022-05-13T18:30:14.2612819Z checking sys/time.h presence... yes
2022-05-13T18:30:14.2618038Z checking for sys/time.h... yes
2022-05-13T18:30:14.6751241Z checking sys/times.h usability... yes
2022-05-13T18:30:14.8229699Z checking sys/times.h presence... yes
2022-05-13T18:30:14.8231669Z checking for sys/times.h... yes
2022-05-13T18:30:14.9867058Z checking for sys/types.h... (cached) yes
2022-05-13T18:30:15.4044393Z checking termios.h usability... yes
2022-05-13T18:30:15.5759977Z checking termios.h presence... yes
2022-05-13T18:30:15.5762047Z checking for termios.h... yes
2022-05-13T18:30:15.7321988Z checking for unistd.h... (cached) yes
2022-05-13T18:30:16.2600229Z checking unixlib/local.h usability... no
2022-05-13T18:30:16.5321757Z checking unixlib/local.h presence... no
2022-05-13T18:30:16.5323198Z checking for unixlib/local.h... no
2022-05-13T18:30:16.6128955Z checking for windows.h... (cached) yes
2022-05-13T18:30:16.9662932Z checking for net/if.h... yes
2022-05-13T18:30:17.3357511Z checking for net/if_arp.h... no
2022-05-13T18:30:17.7116367Z checking for netinet/if_ether.h... no
2022-05-13T18:30:17.9242045Z checking for netinet/ip.h... yes
2022-05-13T18:30:18.4321440Z checking for stdbool.h that conforms to C99... yes
2022-05-13T18:30:19.0672411Z checking for _Bool... yes
2022-05-13T18:30:19.2635986Z checking for inline... inline
2022-05-13T18:30:19.9170041Z checking for int32_t... yes
2022-05-13T18:30:20.5769972Z checking for int64_t... yes
2022-05-13T18:30:21.1875316Z checking for off_t... yes
2022-05-13T18:30:21.8166927Z checking for size_t... yes
2022-05-13T18:30:22.4598012Z checking for ssize_t... yes
2022-05-13T18:30:22.7521488Z checking for uint16_t... yes
2022-05-13T18:30:23.0532153Z checking for uint32_t... yes
2022-05-13T18:30:23.3521344Z checking for uint64_t... yes
2022-05-13T18:30:23.6227103Z checking for uint8_t... yes
2022-05-13T18:30:24.2544290Z checking for ptrdiff_t... yes
2022-05-13T18:30:24.6686405Z checking for int128... no
2022-05-13T18:30:25.3143843Z checking for __int128... yes
2022-05-13T18:30:26.0836837Z checking for __int128_t... yes
2022-05-13T18:30:26.5871809Z checking for error_at_line... yes
2022-05-13T18:30:27.2391650Z checking for pid_t... yes
2022-05-13T18:30:27.6408873Z checking vfork.h usability... no
2022-05-13T18:30:27.8880999Z checking vfork.h presence... no
2022-05-13T18:30:27.8882532Z checking for vfork.h... no
2022-05-13T18:30:28.4625475Z checking for fork... yes
2022-05-13T18:30:29.1168225Z checking for vfork... yes
2022-05-13T18:30:29.7660688Z checking for working fork... yes
2022-05-13T18:30:29.7663380Z checking for working vfork... (cached) yes
2022-05-13T18:30:30.3932161Z checking for fseek64... no
2022-05-13T18:30:30.9086283Z checking for fseeko... yes
2022-05-13T18:30:31.6615441Z checking for fseeko64... no
2022-05-13T18:30:32.3266845Z checking for _fseeki64... no
2022-05-13T18:30:33.0238322Z checking for lseek64... no
2022-05-13T18:30:33.5571205Z checking for lseek... yes
2022-05-13T18:30:34.3344895Z checking for ftell64... no
2022-05-13T18:30:34.8527512Z checking for ftello... yes
2022-05-13T18:30:35.6405008Z checking for ftello64... no
2022-05-13T18:30:36.2926578Z checking for _ftelli64... no
2022-05-13T18:30:36.9524464Z checking for fopen64... no
2022-05-13T18:30:37.7082182Z checking for _fopen64... no
2022-05-13T18:30:38.2579656Z checking for memmem... yes
2022-05-13T18:30:38.8984231Z checking for mmap... yes
2022-05-13T18:30:39.5630239Z checking for sleep... yes
2022-05-13T18:30:40.2212460Z checking for setenv... yes
2022-05-13T18:30:40.9167002Z checking for putenv... yes
2022-05-13T18:30:41.6966475Z checking for strcasecmp... yes
2022-05-13T18:30:42.4144730Z checking for strncasecmp... yes
2022-05-13T18:30:43.2096516Z checking for stricmp... no
2022-05-13T18:30:43.8471397Z checking for strcmpi... no
2022-05-13T18:30:44.4918746Z checking for _stricmp... no
2022-05-13T18:30:45.1769431Z checking for _strcmpi... no
2022-05-13T18:30:45.8152443Z checking for strnicmp... no
2022-05-13T18:30:46.4090519Z checking for strncmpi... no
2022-05-13T18:30:47.1207444Z checking for _strnicmp... no
2022-05-13T18:30:47.7494314Z checking for _strncmpi... no
2022-05-13T18:30:48.4260517Z checking for strnlen... yes
2022-05-13T18:30:49.0676468Z checking for strlwr... yes
2022-05-13T18:30:49.7260555Z checking for strupr... yes
2022-05-13T18:30:50.4989280Z checking for strrev... no
2022-05-13T18:30:51.0346736Z checking for atoll... yes
2022-05-13T18:30:51.7550341Z checking for _atoi64... no
2022-05-13T18:30:52.3633674Z checking for snprintf... yes
2022-05-13T18:30:53.0937315Z checking for sprintf_s... no
2022-05-13T18:30:53.6330539Z checking for strcasestr... yes
2022-05-13T18:30:54.2032991Z checking for clGetKernelArgInfo... yes
2022-05-13T18:30:54.8927034Z checking for posix_memalign... yes
2022-05-13T18:30:55.3633251Z checking for yasm that supports "-f win64"... 
2022-05-13T18:30:55.3643756Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T18:30:55.8285579Z checking for _get_osfhandle... yes
2022-05-13T18:30:58.9970999Z checking for GetFileSizeEx... yes
2022-05-13T18:30:59.0249647Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T18:30:59.5997811Z checking size of size_t... 8
2022-05-13T18:31:00.2253710Z checking size of off_t... 8
2022-05-13T18:31:00.2737928Z configure: Fuzz check disabled
2022-05-13T18:31:00.2739630Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T18:31:00.2891465Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T18:31:00.4199514Z configure: creating Makefile dependencies
2022-05-13T18:31:03.4342831Z configure: creating ./john_build_rule.h
2022-05-13T18:31:03.7909752Z configure: creating ./config.status
2022-05-13T18:31:06.0055685Z config.status: creating Makefile
2022-05-13T18:31:06.3465259Z config.status: creating aes/Makefile
2022-05-13T18:31:06.7417581Z config.status: creating aes/aesni/Makefile
2022-05-13T18:31:07.1289368Z config.status: creating aes/openssl/Makefile
2022-05-13T18:31:07.5411589Z config.status: creating secp256k1/Makefile
2022-05-13T18:31:07.9334580Z config.status: creating ed25519-donna/Makefile
2022-05-13T18:31:08.3706749Z config.status: creating poly1305-donna/Makefile
2022-05-13T18:31:08.7585559Z config.status: creating autoconfig.h
2022-05-13T18:31:08.8897482Z config.status: autoconfig.h is unchanged
2022-05-13T18:31:08.9626287Z config.status: linking x86-64.h to arch.h
2022-05-13T18:31:09.0486120Z config.status: executing default commands
2022-05-13T18:31:09.0792587Z configure: creating ./fmt_externs.h
2022-05-13T18:31:20.4969775Z configure: creating ./fmt_registers.h
2022-05-13T18:31:35.0899788Z 
2022-05-13T18:31:35.0902856Z Configured for building John the Ripper jumbo:
2022-05-13T18:31:35.0904733Z 
2022-05-13T18:31:35.0906482Z Target CPU ......................................... x86_64 AVX512F, 64-bit LE
2022-05-13T18:31:35.0908013Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T18:31:35.0909437Z Target OS .......................................... cygwin
2022-05-13T18:31:35.0910655Z Cross compiling .................................... no
2022-05-13T18:31:35.0911523Z Legacy arch header ................................. x86-64.h
2022-05-13T18:31:35.0912205Z 
2022-05-13T18:31:35.0913083Z Optional libraries/features found:
2022-05-13T18:31:35.0914010Z Memory map (share/page large files) ................ yes
2022-05-13T18:31:35.0914960Z Fork support ....................................... yes
2022-05-13T18:31:35.0915830Z OpenMP support ..................................... no
2022-05-13T18:31:35.0916684Z OpenCL support ..................................... yes
2022-05-13T18:31:35.0917853Z Generic crypt(3) format ............................ yes
2022-05-13T18:31:35.0919184Z OpenSSL (many additional formats) .................. yes
2022-05-13T18:31:35.0920556Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T18:31:35.0921394Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T18:31:35.0922217Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T18:31:35.0922991Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T18:31:35.0923797Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T18:31:35.0924529Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T18:31:35.0925898Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T18:31:35.0926900Z OpenMPI support (default disabled) ................. no
2022-05-13T18:31:35.0927698Z Experimental code (default disabled) ............... no
2022-05-13T18:31:35.0928435Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T18:31:35.0928863Z 
2022-05-13T18:31:35.0930294Z Install missing libraries to get any needed features that were omitted.
2022-05-13T18:31:35.0930998Z 
2022-05-13T18:31:35.0931826Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T18:33:22.4689966Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T18:33:22.4695594Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:22.4697283Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.4698643Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.4699777Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.4700533Z       |                         ^~~~
2022-05-13T18:33:22.4701432Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:22.4702178Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.4702954Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.4703764Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.4704430Z       |                         ^~~~
2022-05-13T18:33:22.4705128Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:33:22.4705968Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:22.4706659Z       | ^~~~~~~~~~~~
2022-05-13T18:33:22.5175574Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T18:33:22.5177239Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:22.5178814Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:22.5180457Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.5181582Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.5182362Z       |                         ^~~~
2022-05-13T18:33:22.5183289Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:22.5185633Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:22.5187050Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.5188117Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.5188941Z       |                         ^~~~
2022-05-13T18:33:22.5189824Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:33:22.5190821Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:22.5191609Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:22.5494464Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T18:33:22.5496385Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:33:22.5497810Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:22.5498726Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.5499681Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.5500509Z       |                         ^~~~
2022-05-13T18:33:22.5501444Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:22.5502431Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:22.5503333Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.5504265Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.5505021Z       |                         ^~~~
2022-05-13T18:33:22.5505800Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:33:22.5506771Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:33:22.5507809Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:22.6570211Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T18:33:22.6573220Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:22.6574575Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.6575583Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.6576709Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:33:22.6577551Z       |                 ^~~~
2022-05-13T18:33:22.6578678Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:22.6580223Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.6581199Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.6582107Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:33:22.6582808Z       |                 ^~~~
2022-05-13T18:33:22.6583584Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:33:22.6584529Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:22.6585369Z       | ^~~~~~~~~~~~
2022-05-13T18:33:22.7461011Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:33:22.7462797Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:33:22.7464127Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:33:22.7465392Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:22.7466513Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.7467367Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.7468434Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.7469135Z       |                 ^~~~
2022-05-13T18:33:22.7469807Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:33:22.7470862Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:22.7471843Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.7472683Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.7473609Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.7474363Z       |                 ^~~~
2022-05-13T18:33:22.7475198Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:33:22.7476119Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:22.7477420Z       | ^~~~~~~~~~~~
2022-05-13T18:33:22.7478502Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:33:22.7479445Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:33:22.7480351Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:33:22.7481600Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:22.7482707Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.7483647Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.7484525Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.7485310Z       |         ^~~~
2022-05-13T18:33:22.7486102Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:33:22.7487234Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:22.7488361Z   276 | #define RFUN   ripemd_round
2022-05-13T18:33:22.7489294Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:22.7490175Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:22.7490883Z       |         ^~~~
2022-05-13T18:33:22.7491646Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:33:22.7492670Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:22.7493524Z       | ^~~~~~~~~~~~
2022-05-13T18:33:23.1624164Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T18:33:23.1626128Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:23.1627758Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:23.1629448Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.1630580Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:33:23.1631236Z       |                 ^~~~
2022-05-13T18:33:23.1632111Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:23.1632940Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:23.1633692Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.1634376Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:33:23.1635007Z       |                 ^~~~
2022-05-13T18:33:23.1635746Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:33:23.1636526Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:23.1637809Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:23.2634058Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:33:23.2635968Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:33:23.2637245Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:33:23.2638830Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:23.2640009Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:23.2640973Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.2641955Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.2643914Z       |                 ^~~~
2022-05-13T18:33:23.2644897Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:33:23.2645895Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:23.2646795Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:23.2648002Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.2648997Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.2649725Z       |                 ^~~~
2022-05-13T18:33:23.2650548Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:33:23.2651521Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:23.2653129Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:23.2654612Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:33:23.2655709Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:33:23.2657252Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:33:23.2658835Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:33:23.2659932Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:23.2660797Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.2661710Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.2663204Z       |         ^~~~
2022-05-13T18:33:23.2665195Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:33:23.2666191Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:23.2667174Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:33:23.2668387Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.2669295Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.2670007Z       |         ^~~~
2022-05-13T18:33:23.2670907Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:33:23.2671922Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:33:23.2673440Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:23.8022474Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T18:33:23.8024435Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:33:23.8026881Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:23.8028393Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.8029350Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:33:23.8030551Z       |                 ^~~~
2022-05-13T18:33:23.8031506Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:23.8032480Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:23.8033287Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.8034177Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:33:23.8034966Z       |                 ^~~~
2022-05-13T18:33:23.8035910Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:33:23.8036910Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:33:23.8039058Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:23.9051405Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:33:23.9053108Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:33:23.9054235Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:33:23.9055504Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:33:23.9056892Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:23.9057965Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.9058896Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.9059680Z       |                 ^~~~
2022-05-13T18:33:23.9061439Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:33:23.9062764Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:23.9063727Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:23.9064630Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.9065545Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.9066268Z       |                 ^~~~
2022-05-13T18:33:23.9067029Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:33:23.9068209Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:33:23.9069150Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:33:23.9069772Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:33:23.9070783Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:33:23.9071842Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:33:23.9073104Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:33:23.9074693Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:23.9075567Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.9076503Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.9077270Z       |         ^~~~
2022-05-13T18:33:23.9078198Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:33:23.9079333Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:33:23.9080921Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:33:23.9081859Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:33:23.9082727Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:33:23.9083494Z       |         ^~~~
2022-05-13T18:33:23.9084391Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:33:23.9085452Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:33:23.9086311Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:34:38.3096198Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:34:38.3098722Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3100401Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:34:38.3101585Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3103619Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T18:34:38.3105159Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3108746Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T18:34:38.3110091Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3111070Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:34:38.3112137Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3113325Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:34:38.3114785Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3116236Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:34:38.3117653Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3119058Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:34:38.3120320Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:34:38.3121452Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:34:38.3122696Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:34:38.3123850Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3131565Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3133137Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:34:38.3134395Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3135344Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T18:34:38.3136300Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3137147Z   366 |                                         keys,
2022-05-13T18:34:38.3137928Z       |                                         ~~~~~
2022-05-13T18:34:38.3138727Z   367 |                                         lens, cur_salt->salt,
2022-05-13T18:34:38.3140158Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3141093Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T18:34:38.3142016Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3143011Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:34:38.3144462Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3145923Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:34:38.3148639Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3150436Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:34:38.3151528Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:34:38.3152651Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:34:38.3153958Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:34:38.3155361Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3156693Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3157964Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:34:38.3159483Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3160525Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T18:34:38.3161468Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3162299Z   374 |                                         keys,
2022-05-13T18:34:38.3163084Z       |                                         ~~~~~
2022-05-13T18:34:38.3163914Z   375 |                                         lens, cur_salt->salt,
2022-05-13T18:34:38.3165061Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3165973Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T18:34:38.3166988Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:34:38.3167944Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:34:38.3169222Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3170619Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:34:38.3171869Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:34:38.3173191Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:34:38.3175885Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:34:38.3177095Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:34:38.3178364Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:34:38.3179757Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7384418Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:36:35.7386742Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:36:35.7388671Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:36:35.7390416Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7391835Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:36:35.7392837Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7393712Z   225 |                                         lens, cur_salt->salt,
2022-05-13T18:36:35.7394532Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7395377Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:36:35.7396329Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7397916Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:36:35.7399427Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:36:35.7401732Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:36:35.7403326Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:36:35.7404718Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:36:35.7405825Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:36:35.7406903Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:36:35.7408509Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:36:35.7409979Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7442691Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:36:35.7444355Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:36:35.7445588Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7446837Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:36:35.7448473Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7449408Z   247 |                                         lens, cur_salt->salt,
2022-05-13T18:36:35.7451042Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7451932Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:36:35.7452930Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7454131Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:36:35.7455513Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:36:35.7457039Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:36:35.7458719Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:36:35.7460498Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:36:35.7461409Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:36:35.7462269Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:36:35.7463194Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:36:35.7464028Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7464993Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:36:35.7466984Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:36:35.7468159Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7468939Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:36:35.7470362Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7471134Z   270 |                                         lens, cur_salt->salt,
2022-05-13T18:36:35.7471897Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7472585Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:36:35.7473360Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:36:35.7474202Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:36:35.7475228Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:36:35.7476267Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:36:35.7477273Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:36:35.7479525Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:36:35.7481557Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:36:35.7483157Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:36:35.7484436Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:36:35.7485530Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1239372Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:37:12.1241760Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:12.1243267Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:37:12.1244219Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1245027Z   117 |                                 cur_salt->iterations,
2022-05-13T18:37:12.1247100Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1248218Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T18:37:12.1249302Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1250327Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T18:37:12.1251607Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1253798Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:37:12.1257578Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:12.1259129Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:37:12.1260662Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:12.1262337Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:37:12.1263516Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:37:12.1264546Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:37:12.1267187Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:37:12.1268804Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1270083Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:12.1271692Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:37:12.1272627Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1273429Z   122 |                                 cur_salt->iterations,
2022-05-13T18:37:12.1274276Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1276895Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T18:37:12.1278174Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1279210Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T18:37:12.1280142Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:12.1281560Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:37:12.1283015Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:12.1284491Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:37:12.1285897Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:12.1287550Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:37:12.1288607Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:37:12.1289634Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:37:12.1290816Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:37:12.1292271Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9525613Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T18:37:46.9530238Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:46.9531871Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:37:46.9533843Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9535083Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:37:46.9536065Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9537043Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T18:37:46.9539342Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9540186Z   138 |                                                    salt_len, mackey,
2022-05-13T18:37:46.9541095Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9541969Z   139 |                                                    BINARY_SIZE);
2022-05-13T18:37:46.9543172Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:37:46.9544244Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:37:46.9546608Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:46.9548187Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:37:46.9549711Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:46.9551100Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:37:46.9552123Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:37:46.9553564Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:37:46.9554894Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:37:46.9556054Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9557274Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:46.9558984Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:37:46.9560116Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9561158Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:37:46.9562117Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9563455Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T18:37:46.9564399Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9565295Z   153 |                                                    salt_len, mackey,
2022-05-13T18:37:46.9566181Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:37:46.9566997Z   154 |                                                    BINARY_SIZE);
2022-05-13T18:37:46.9567872Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:37:46.9568909Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:37:46.9570332Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:46.9571637Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:37:46.9573305Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:37:46.9574734Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:37:46.9575695Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:37:46.9576727Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:37:46.9578033Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:37:46.9579186Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:38:27.1214255Z In file included from subsets.c:25:
2022-05-13T18:38:27.1219520Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T18:38:27.1221359Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T18:38:27.1222514Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T18:38:27.1223393Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T18:41:08.5624547Z ar: creating aes.a
2022-05-13T18:41:21.0986472Z ar: creating secp256k1.a
2022-05-13T18:41:29.5022548Z ar: creating poly1305-donna.a
2022-05-13T18:41:29.9477228Z ar: creating ed25519-donna.a
2022-05-13T18:42:05.6782240Z 
2022-05-13T18:42:05.6979621Z Make process completed.
2022-05-13T18:42:07.1503772Z 
2022-05-13T18:42:07.1757110Z Make process completed.
2022-05-13T18:42:07.2014463Z Stripping executables.
2022-05-13T18:42:07.9713254Z Executing './configure --disable-native-tests --enable-simd=avx512f  CPPFLAGS='-fno-asynchronous-unwind-tables -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-avx512f-non-omp\\\"\"  -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-avx2\\\"\" '    && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx512f'
2022-05-13T18:42:10.9013128Z checking build system type... x86_64-unknown-cygwin
2022-05-13T18:42:10.9017836Z checking host system type... x86_64-unknown-cygwin
2022-05-13T18:42:10.9172820Z checking whether to compile using MPI... no
2022-05-13T18:42:10.9192965Z checking for gcc... gcc
2022-05-13T18:42:11.7538891Z checking whether the C compiler works... yes
2022-05-13T18:42:11.7541447Z checking for C compiler default output file name... a.exe
2022-05-13T18:42:12.1230976Z checking for suffix of executables... .exe
2022-05-13T18:42:12.5233772Z checking whether we are cross compiling... no
2022-05-13T18:42:12.7605560Z checking for suffix of object files... o
2022-05-13T18:42:12.9393353Z checking whether we are using the GNU C compiler... yes
2022-05-13T18:42:13.1266116Z checking whether gcc accepts -g... yes
2022-05-13T18:42:13.4054158Z checking for gcc option to accept ISO C89... none needed
2022-05-13T18:42:13.6919548Z checking whether gcc understands -c and -o together... yes
2022-05-13T18:42:14.1377268Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T18:42:14.1379954Z checking whether gcc accepts -g... (cached) yes
2022-05-13T18:42:14.1381110Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T18:42:14.1382393Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T18:42:14.1395296Z checking additional paths...  -L/usr/local/lib
2022-05-13T18:42:14.9683459Z checking arg check macro for -m with gcc... yes
2022-05-13T18:42:15.2870868Z checking arg check macro for -Q with gcc... yes
2022-05-13T18:42:15.4677513Z checking if gcc supports -funroll-loops... yes
2022-05-13T18:42:15.6701295Z checking if gcc supports -Os... yes
2022-05-13T18:42:16.0466887Z checking if gcc supports -finline-functions... yes
2022-05-13T18:42:16.2364183Z checking if gcc supports -Og... yes
2022-05-13T18:42:16.4113483Z checking if gcc supports -Wall... yes
2022-05-13T18:42:16.6164133Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T18:42:16.8016906Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T18:42:17.0233134Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T18:42:17.3497708Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T18:42:17.5455359Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T18:42:17.8453123Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T18:42:18.0487539Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T18:42:18.3212253Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T18:42:18.4961939Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T18:42:18.7557096Z checking if gcc supports -Qunused-arguments... no
2022-05-13T18:42:18.9512398Z checking if gcc supports -std=gnu89... yes
2022-05-13T18:42:19.1602232Z checking if gcc supports -Wdate-time... yes
2022-05-13T18:42:19.5252393Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T18:42:19.9209319Z checking for 32/64 bit... 64-bit
2022-05-13T18:42:19.9530369Z checking additional paths (64 bit)... none
2022-05-13T18:42:19.9532746Z checking whether ln -s works... yes
2022-05-13T18:42:20.0212032Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T18:42:20.0917927Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T18:42:20.1901128Z checking for GNU make... make
2022-05-13T18:42:20.3631839Z checking whether make sets $(MAKE)... yes
2022-05-13T18:42:20.7316801Z checking how to run the C preprocessor... gcc -E
2022-05-13T18:42:21.1469651Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T18:42:21.4163325Z checking for sort... /usr/bin/sort
2022-05-13T18:42:21.4172216Z checking for find... /usr/bin/find
2022-05-13T18:42:21.4185452Z checking for perl... /usr/bin/perl
2022-05-13T18:42:21.4201695Z checking for ar... ar
2022-05-13T18:42:21.4216533Z checking for strip... strip
2022-05-13T18:42:21.4231237Z checking for strings... strings
2022-05-13T18:42:21.4262458Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T18:42:21.4498843Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T18:42:21.4501750Z checking if pkg-config will be used... no
2022-05-13T18:42:21.5359719Z checking for egrep... /usr/bin/grep -E
2022-05-13T18:42:22.5840725Z checking for ANSI C header files... yes
2022-05-13T18:42:22.8961767Z checking for sys/types.h... yes
2022-05-13T18:42:23.2767682Z checking for sys/stat.h... yes
2022-05-13T18:42:23.6973442Z checking for stdlib.h... yes
2022-05-13T18:42:24.1414941Z checking for string.h... yes
2022-05-13T18:42:24.5817257Z checking for memory.h... yes
2022-05-13T18:42:24.9807119Z checking for strings.h... yes
2022-05-13T18:42:25.3724287Z checking for inttypes.h... yes
2022-05-13T18:42:25.7692277Z checking for stdint.h... yes
2022-05-13T18:42:26.1828117Z checking for unistd.h... yes
2022-05-13T18:42:26.8307153Z checking size of short... 2
2022-05-13T18:42:27.4058430Z checking size of int... 4
2022-05-13T18:42:28.5970854Z checking size of long... 8
2022-05-13T18:42:28.5972444Z checking size of long long... 8
2022-05-13T18:42:29.0607249Z checking size of wchar_t... 2
2022-05-13T18:42:29.6144413Z checking size of int *... 8
2022-05-13T18:42:30.1972933Z checking size of void *... 8
2022-05-13T18:42:30.2789393Z configure: Trying to force AVX512F using default method (--enable-simd=avx512f).
2022-05-13T18:42:30.6598423Z checking if gcc supports -mavx512f w/ linking... yes
2022-05-13T18:42:31.1143844Z checking for extra ASFLAGS... None needed
2022-05-13T18:42:31.3783823Z checking for X32 ABI... no
2022-05-13T18:42:31.4022492Z checking special compiler flags... Intel x86
2022-05-13T18:42:31.4023685Z configure: Testing tool-chain's CPU support with given options
2022-05-13T18:42:31.8363563Z checking for MMX... yes
2022-05-13T18:42:32.3401209Z checking for SSE2... yes
2022-05-13T18:42:32.8811329Z checking for SSSE3... yes
2022-05-13T18:42:33.4641657Z checking for SSE4.1... yes
2022-05-13T18:42:34.0408484Z checking for SSE4.2... yes
2022-05-13T18:42:35.4784327Z checking for AVX... yes
2022-05-13T18:42:36.6653642Z checking for XOP... no
2022-05-13T18:42:37.8793691Z checking for AVX2... yes
2022-05-13T18:42:39.2695503Z checking for AVX512F... yes
2022-05-13T18:42:40.7856151Z checking for AVX512BW... no
2022-05-13T18:42:40.8174196Z checking for arch.h alternative... x86-64.h
2022-05-13T18:42:40.8183812Z checking for byte ordering according to target triple... little
2022-05-13T18:42:40.8196320Z checking supplied paths for OpenSSL...  
2022-05-13T18:42:40.8200911Z checking additional paths for OpenSSL... none
2022-05-13T18:42:41.1879148Z checking openssl/opensslv.h usability... yes
2022-05-13T18:42:41.3739009Z checking openssl/opensslv.h presence... yes
2022-05-13T18:42:41.3742011Z checking for openssl/opensslv.h... yes
2022-05-13T18:42:42.0411913Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T18:42:42.6240085Z checking for MD5_Update in -lcrypto... yes
2022-05-13T18:42:42.6261606Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T18:42:43.2366068Z checking for sqrt in -lm... yes
2022-05-13T18:42:43.7485544Z checking for clock_gettime in -lrt... yes
2022-05-13T18:42:44.2606321Z checking for deflate in -lz... yes
2022-05-13T18:42:45.3839421Z checking for library containing crypt... -lcrypt
2022-05-13T18:42:45.7343435Z checking gmp.h usability... yes
2022-05-13T18:42:45.9173649Z checking gmp.h presence... yes
2022-05-13T18:42:45.9175874Z checking for gmp.h... yes
2022-05-13T18:42:46.4674719Z checking for __gmpz_init in -lgmp... yes
2022-05-13T18:42:46.8227868Z checking skey.h usability... no
2022-05-13T18:42:47.1171505Z checking skey.h presence... no
2022-05-13T18:42:47.1208600Z checking for skey.h... no
2022-05-13T18:42:47.1212742Z checking for S/Key... using our own code
2022-05-13T18:42:47.3895014Z checking bzlib.h usability... yes
2022-05-13T18:42:47.5704092Z checking bzlib.h presence... yes
2022-05-13T18:42:47.5705564Z checking for bzlib.h... yes
2022-05-13T18:42:48.0190833Z checking for main in -lbz2... yes
2022-05-13T18:42:48.4793563Z checking for main in -lkernel32... yes
2022-05-13T18:42:48.9689284Z checking for dlopen in -ldl... yes
2022-05-13T18:42:50.4995652Z checking intrin.h usability... yes
2022-05-13T18:42:51.0408489Z checking intrin.h presence... yes
2022-05-13T18:42:51.0410608Z checking for intrin.h... yes
2022-05-13T18:42:51.5318302Z checking openssl/cmac.h usability... yes
2022-05-13T18:42:51.8368447Z checking openssl/cmac.h presence... yes
2022-05-13T18:42:51.8370099Z checking for openssl/cmac.h... yes
2022-05-13T18:42:51.8711652Z configure: rexgen check not enabled
2022-05-13T18:42:52.3141763Z checking pcap.h usability... no
2022-05-13T18:42:52.5655791Z checking pcap.h presence... no
2022-05-13T18:42:52.5657973Z checking for pcap.h... no
2022-05-13T18:42:53.0407971Z checking pcap/pcap.h usability... no
2022-05-13T18:42:53.3124905Z checking pcap/pcap.h presence... no
2022-05-13T18:42:53.3127126Z checking for pcap/pcap.h... no
2022-05-13T18:42:53.3905950Z checking for pcap.h... (cached) no
2022-05-13T18:42:53.4590712Z checking for pcap/pcap.h... (cached) no
2022-05-13T18:42:53.7316302Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T18:42:53.9503397Z checking whether string.h and strings.h may both be included... yes
2022-05-13T18:42:54.5451788Z checking for SHA256... yes
2022-05-13T18:42:55.2113188Z checking for WHIRLPOOL... yes
2022-05-13T18:42:55.8966571Z checking for RIPEMD160... yes
2022-05-13T18:42:56.5512069Z checking for AES_encrypt... yes
2022-05-13T18:42:57.2575712Z checking for DSA_get0_pqg... yes
2022-05-13T18:42:58.4516961Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T18:42:58.4525451Z checking additional paths for OpenCL... none
2022-05-13T18:42:58.7514644Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T18:42:59.4690026Z checking for the pthreads library -lpthreads... no
2022-05-13T18:43:00.0104954Z checking whether pthreads work without any flags... yes
2022-05-13T18:43:00.4882272Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T18:43:00.4884152Z checking if more special flags are required for pthreads... no
2022-05-13T18:43:00.8681396Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T18:43:01.2120132Z checking whether we are using the Microsoft C compiler... no
2022-05-13T18:43:01.6389822Z checking CL/cl.h usability... yes
2022-05-13T18:43:01.8502008Z checking CL/cl.h presence... yes
2022-05-13T18:43:01.8503975Z checking for CL/cl.h... yes
2022-05-13T18:43:02.4119311Z checking OpenCL/cl.h usability... no
2022-05-13T18:43:02.6871533Z checking OpenCL/cl.h presence... no
2022-05-13T18:43:02.6875448Z checking for OpenCL/cl.h... no
2022-05-13T18:43:05.7149289Z checking windows.h usability... yes
2022-05-13T18:43:07.3269582Z checking windows.h presence... yes
2022-05-13T18:43:07.3271131Z checking for windows.h... yes
2022-05-13T18:43:07.9361435Z checking for OpenCL library... -lOpenCL
2022-05-13T18:43:08.3152725Z checking arpa/inet.h usability... yes
2022-05-13T18:43:08.4928607Z checking arpa/inet.h presence... yes
2022-05-13T18:43:08.4930415Z checking for arpa/inet.h... yes
2022-05-13T18:43:09.0228715Z checking crypt.h usability... yes
2022-05-13T18:43:09.1711497Z checking crypt.h presence... yes
2022-05-13T18:43:09.1713553Z checking for crypt.h... yes
2022-05-13T18:43:09.6219576Z checking dirent.h usability... yes
2022-05-13T18:43:09.8089291Z checking dirent.h presence... yes
2022-05-13T18:43:09.8091175Z checking for dirent.h... yes
2022-05-13T18:43:10.2870527Z checking limits.h usability... yes
2022-05-13T18:43:10.4185544Z checking limits.h presence... yes
2022-05-13T18:43:10.4187177Z checking for limits.h... yes
2022-05-13T18:43:10.8278222Z checking locale.h usability... yes
2022-05-13T18:43:10.9542623Z checking locale.h presence... yes
2022-05-13T18:43:10.9545088Z checking for locale.h... yes
2022-05-13T18:43:11.3771112Z checking malloc.h usability... yes
2022-05-13T18:43:11.5156327Z checking malloc.h presence... yes
2022-05-13T18:43:11.5158671Z checking for malloc.h... yes
2022-05-13T18:43:12.0087387Z checking net/ethernet.h usability... no
2022-05-13T18:43:12.2655124Z checking net/ethernet.h presence... no
2022-05-13T18:43:12.2657764Z checking for net/ethernet.h... no
2022-05-13T18:43:12.5880648Z checking netdb.h usability... yes
2022-05-13T18:43:12.7535936Z checking netdb.h presence... yes
2022-05-13T18:43:12.7541510Z checking for netdb.h... yes
2022-05-13T18:43:13.1959603Z checking netinet/in.h usability... yes
2022-05-13T18:43:13.3435769Z checking netinet/in.h presence... yes
2022-05-13T18:43:13.3439733Z checking for netinet/in.h... yes
2022-05-13T18:43:13.7593730Z checking netinet/in_systm.h usability... yes
2022-05-13T18:43:13.8947332Z checking netinet/in_systm.h presence... yes
2022-05-13T18:43:13.8949779Z checking for netinet/in_systm.h... yes
2022-05-13T18:43:14.0352279Z checking for string.h... (cached) yes
2022-05-13T18:43:14.2022617Z checking for strings.h... (cached) yes
2022-05-13T18:43:14.6734173Z checking sys/ethernet.h usability... no
2022-05-13T18:43:14.9009963Z checking sys/ethernet.h presence... no
2022-05-13T18:43:14.9011590Z checking for sys/ethernet.h... no
2022-05-13T18:43:15.2184916Z checking sys/file.h usability... yes
2022-05-13T18:43:15.3803246Z checking sys/file.h presence... yes
2022-05-13T18:43:15.3805149Z checking for sys/file.h... yes
2022-05-13T18:43:15.7952095Z checking sys/param.h usability... yes
2022-05-13T18:43:15.9566238Z checking sys/param.h presence... yes
2022-05-13T18:43:15.9567870Z checking for sys/param.h... yes
2022-05-13T18:43:16.3645766Z checking sys/socket.h usability... yes
2022-05-13T18:43:16.5069122Z checking sys/socket.h presence... yes
2022-05-13T18:43:16.5073502Z checking for sys/socket.h... yes
2022-05-13T18:43:16.9316483Z checking sys/time.h usability... yes
2022-05-13T18:43:17.1108157Z checking sys/time.h presence... yes
2022-05-13T18:43:17.1109698Z checking for sys/time.h... yes
2022-05-13T18:43:17.5271340Z checking sys/times.h usability... yes
2022-05-13T18:43:17.6603702Z checking sys/times.h presence... yes
2022-05-13T18:43:17.6605337Z checking for sys/times.h... yes
2022-05-13T18:43:17.7978764Z checking for sys/types.h... (cached) yes
2022-05-13T18:43:18.2381009Z checking termios.h usability... yes
2022-05-13T18:43:18.3738556Z checking termios.h presence... yes
2022-05-13T18:43:18.3739948Z checking for termios.h... yes
2022-05-13T18:43:18.5317820Z checking for unistd.h... (cached) yes
2022-05-13T18:43:19.0293079Z checking unixlib/local.h usability... no
2022-05-13T18:43:19.2611025Z checking unixlib/local.h presence... no
2022-05-13T18:43:19.2612763Z checking for unixlib/local.h... no
2022-05-13T18:43:19.3233136Z checking for windows.h... (cached) yes
2022-05-13T18:43:19.6365317Z checking for net/if.h... yes
2022-05-13T18:43:19.9653724Z checking for net/if_arp.h... no
2022-05-13T18:43:20.2762234Z checking for netinet/if_ether.h... no
2022-05-13T18:43:20.5131569Z checking for netinet/ip.h... yes
2022-05-13T18:43:21.0263096Z checking for stdbool.h that conforms to C99... yes
2022-05-13T18:43:21.6943805Z checking for _Bool... yes
2022-05-13T18:43:21.9046744Z checking for inline... inline
2022-05-13T18:43:22.5225350Z checking for int32_t... yes
2022-05-13T18:43:23.1600595Z checking for int64_t... yes
2022-05-13T18:43:23.7495145Z checking for off_t... yes
2022-05-13T18:43:24.3609970Z checking for size_t... yes
2022-05-13T18:43:24.9592334Z checking for ssize_t... yes
2022-05-13T18:43:25.2439321Z checking for uint16_t... yes
2022-05-13T18:43:25.5161116Z checking for uint32_t... yes
2022-05-13T18:43:25.8137772Z checking for uint64_t... yes
2022-05-13T18:43:26.1054349Z checking for uint8_t... yes
2022-05-13T18:43:26.7530188Z checking for ptrdiff_t... yes
2022-05-13T18:43:27.1203066Z checking for int128... no
2022-05-13T18:43:27.7716727Z checking for __int128... yes
2022-05-13T18:43:28.4056166Z checking for __int128_t... yes
2022-05-13T18:43:28.8248627Z checking for error_at_line... yes
2022-05-13T18:43:29.4196044Z checking for pid_t... yes
2022-05-13T18:43:29.7839273Z checking vfork.h usability... no
2022-05-13T18:43:30.0487632Z checking vfork.h presence... no
2022-05-13T18:43:30.0489184Z checking for vfork.h... no
2022-05-13T18:43:30.6791529Z checking for fork... yes
2022-05-13T18:43:31.6044619Z checking for vfork... yes
2022-05-13T18:43:31.9657220Z checking for working fork... yes
2022-05-13T18:43:31.9658590Z checking for working vfork... (cached) yes
2022-05-13T18:43:32.5670432Z checking for fseek64... no
2022-05-13T18:43:33.0864199Z checking for fseeko... yes
2022-05-13T18:43:33.7503486Z checking for fseeko64... no
2022-05-13T18:43:34.3358658Z checking for _fseeki64... no
2022-05-13T18:43:34.9167061Z checking for lseek64... no
2022-05-13T18:43:35.4324469Z checking for lseek... yes
2022-05-13T18:43:36.1743224Z checking for ftell64... no
2022-05-13T18:43:36.6923222Z checking for ftello... yes
2022-05-13T18:43:37.4257262Z checking for ftello64... no
2022-05-13T18:43:38.0311945Z checking for _ftelli64... no
2022-05-13T18:43:38.6151931Z checking for fopen64... no
2022-05-13T18:43:39.1627112Z checking for _fopen64... no
2022-05-13T18:43:39.6602770Z checking for memmem... yes
2022-05-13T18:43:40.2396645Z checking for mmap... yes
2022-05-13T18:43:40.7907512Z checking for sleep... yes
2022-05-13T18:43:41.3854745Z checking for setenv... yes
2022-05-13T18:43:41.9233841Z checking for putenv... yes
2022-05-13T18:43:42.5988112Z checking for strcasecmp... yes
2022-05-13T18:43:43.2861869Z checking for strncasecmp... yes
2022-05-13T18:43:43.9357913Z checking for stricmp... no
2022-05-13T18:43:44.5075160Z checking for strcmpi... no
2022-05-13T18:43:45.1049233Z checking for _stricmp... no
2022-05-13T18:43:45.6494267Z checking for _strcmpi... no
2022-05-13T18:43:46.2120600Z checking for strnicmp... no
2022-05-13T18:43:46.8100265Z checking for strncmpi... no
2022-05-13T18:43:47.3943560Z checking for _strnicmp... no
2022-05-13T18:43:48.0482018Z checking for _strncmpi... no
2022-05-13T18:43:48.6214525Z checking for strnlen... yes
2022-05-13T18:43:49.2914300Z checking for strlwr... yes
2022-05-13T18:43:49.9032038Z checking for strupr... yes
2022-05-13T18:43:50.5471100Z checking for strrev... no
2022-05-13T18:43:51.0514267Z checking for atoll... yes
2022-05-13T18:43:51.7070685Z checking for _atoi64... no
2022-05-13T18:43:52.2673774Z checking for snprintf... yes
2022-05-13T18:43:52.8878100Z checking for sprintf_s... no
2022-05-13T18:43:53.3577049Z checking for strcasestr... yes
2022-05-13T18:43:53.8510804Z checking for clGetKernelArgInfo... yes
2022-05-13T18:43:54.3995098Z checking for posix_memalign... yes
2022-05-13T18:43:54.8309117Z checking for yasm that supports "-f win64"... 
2022-05-13T18:43:54.8328329Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T18:43:55.2459377Z checking for _get_osfhandle... yes
2022-05-13T18:43:58.1028976Z checking for GetFileSizeEx... yes
2022-05-13T18:43:58.1237454Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T18:43:58.6541386Z checking size of size_t... 8
2022-05-13T18:43:59.2214491Z checking size of off_t... 8
2022-05-13T18:43:59.2716996Z configure: Fuzz check disabled
2022-05-13T18:43:59.2720634Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T18:43:59.2820963Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T18:43:59.3766618Z configure: creating Makefile dependencies
2022-05-13T18:44:02.3074121Z configure: creating ./john_build_rule.h
2022-05-13T18:44:02.6089892Z configure: creating ./config.status
2022-05-13T18:44:04.6280131Z config.status: creating Makefile
2022-05-13T18:44:04.8896893Z config.status: creating aes/Makefile
2022-05-13T18:44:05.2641603Z config.status: creating aes/aesni/Makefile
2022-05-13T18:44:05.6546738Z config.status: creating aes/openssl/Makefile
2022-05-13T18:44:05.9989805Z config.status: creating secp256k1/Makefile
2022-05-13T18:44:06.3853295Z config.status: creating ed25519-donna/Makefile
2022-05-13T18:44:06.7378292Z config.status: creating poly1305-donna/Makefile
2022-05-13T18:44:07.0488015Z config.status: creating autoconfig.h
2022-05-13T18:44:07.1621590Z config.status: autoconfig.h is unchanged
2022-05-13T18:44:07.2424335Z config.status: linking x86-64.h to arch.h
2022-05-13T18:44:07.3252653Z config.status: executing default commands
2022-05-13T18:44:07.3533109Z configure: creating ./fmt_externs.h
2022-05-13T18:44:18.1055668Z configure: creating ./fmt_registers.h
2022-05-13T18:44:32.7682082Z 
2022-05-13T18:44:32.7684569Z Configured for building John the Ripper jumbo:
2022-05-13T18:44:32.7685049Z 
2022-05-13T18:44:32.7685768Z Target CPU ......................................... x86_64 AVX512F, 64-bit LE
2022-05-13T18:44:32.7686744Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T18:44:32.7687713Z Target OS .......................................... cygwin
2022-05-13T18:44:32.7688596Z Cross compiling .................................... no
2022-05-13T18:44:32.7689286Z Legacy arch header ................................. x86-64.h
2022-05-13T18:44:32.7689777Z 
2022-05-13T18:44:32.7690528Z Optional libraries/features found:
2022-05-13T18:44:32.7691370Z Memory map (share/page large files) ................ yes
2022-05-13T18:44:32.7692277Z Fork support ....................................... yes
2022-05-13T18:44:32.7693237Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T18:44:32.7694245Z OpenCL support ..................................... yes
2022-05-13T18:44:32.7695175Z Generic crypt(3) format ............................ yes
2022-05-13T18:44:32.7696114Z OpenSSL (many additional formats) .................. yes
2022-05-13T18:44:32.7697037Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T18:44:32.7697905Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T18:44:32.7698805Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T18:44:32.7699780Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T18:44:32.7700845Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T18:44:32.7701808Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T18:44:32.7702631Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T18:44:32.7703554Z OpenMPI support (default disabled) ................. no
2022-05-13T18:44:32.7704490Z Experimental code (default disabled) ............... no
2022-05-13T18:44:32.7705418Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T18:44:32.7705922Z 
2022-05-13T18:44:32.7706744Z Install missing libraries to get any needed features that were omitted.
2022-05-13T18:44:32.7707286Z 
2022-05-13T18:44:32.7707993Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T18:46:23.6491240Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T18:46:23.6494117Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:23.6495697Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.6496732Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.6497718Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.6498463Z       |                         ^~~~
2022-05-13T18:46:23.6499580Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:23.6500666Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.6501564Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.6502426Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.6503261Z       |                         ^~~~
2022-05-13T18:46:23.6504254Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:46:23.6505543Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:23.6507249Z       | ^~~~~~~~~~~~
2022-05-13T18:46:23.6974888Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T18:46:23.6976589Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:23.6977563Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:23.6978322Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.6979104Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.6979921Z       |                         ^~~~
2022-05-13T18:46:23.6980814Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:23.6981953Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:23.6982795Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.6983713Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.6984370Z       |                         ^~~~
2022-05-13T18:46:23.6985111Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:46:23.6986450Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:23.6987231Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:23.7531427Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T18:46:23.7533183Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:46:23.7534962Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:23.7535999Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.7536869Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.7537482Z       |                         ^~~~
2022-05-13T18:46:23.7538356Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:23.7539174Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:23.7540100Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.7540796Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.7541523Z       |                         ^~~~
2022-05-13T18:46:23.7542295Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:46:23.7543126Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:46:23.7543773Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:23.8942853Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T18:46:23.8945120Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:23.8946219Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.8947040Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.8947760Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:46:23.8948446Z       |                 ^~~~
2022-05-13T18:46:23.8949473Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:23.8950662Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.8951437Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.8952195Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:46:23.8952875Z       |                 ^~~~
2022-05-13T18:46:23.9687854Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:46:23.9689376Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:23.9690215Z       | ^~~~~~~~~~~~
2022-05-13T18:46:23.9691400Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:46:23.9692818Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:46:23.9693654Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:46:23.9694596Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:23.9695426Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.9696156Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.9696938Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.9697559Z       |                 ^~~~
2022-05-13T18:46:23.9698790Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:46:23.9699856Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:23.9700683Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.9701419Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.9702238Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.9702953Z       |                 ^~~~
2022-05-13T18:46:23.9704104Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:46:23.9704896Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:23.9705966Z       | ^~~~~~~~~~~~
2022-05-13T18:46:23.9707237Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:46:23.9708077Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:46:23.9708907Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:46:23.9709978Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:23.9710883Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.9711692Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.9712414Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.9713040Z       |         ^~~~
2022-05-13T18:46:23.9713669Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:46:23.9714494Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:23.9715430Z   276 | #define RFUN   ripemd_round
2022-05-13T18:46:23.9716134Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:23.9716854Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:23.9717535Z       |         ^~~~
2022-05-13T18:46:23.9718277Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:46:23.9719036Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:23.9719904Z       | ^~~~~~~~~~~~
2022-05-13T18:46:24.4041890Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T18:46:24.4043812Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:24.4045009Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:24.4045897Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.4046829Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:46:24.4047620Z       |                 ^~~~
2022-05-13T18:46:24.4048559Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:24.4049981Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:24.4050958Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.4051890Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:46:24.4053034Z       |                 ^~~~
2022-05-13T18:46:24.4053934Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:46:24.4054982Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:24.4055864Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:24.4742785Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:46:24.4744454Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:46:24.4745656Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:46:24.4747870Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:24.4749250Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:24.4750311Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.4751959Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:24.4752783Z       |                 ^~~~
2022-05-13T18:46:24.4753553Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:46:24.4754612Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:24.4755654Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:24.4757450Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.4758342Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:24.4759436Z       |                 ^~~~
2022-05-13T18:46:24.4760474Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:46:24.4762351Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:24.4763624Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:24.4764535Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:46:24.4765569Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:46:24.4767418Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:46:24.4768662Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:46:24.4770435Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:24.4772040Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.4772979Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:24.4773709Z       |         ^~~~
2022-05-13T18:46:24.4774551Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:46:24.4775651Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:24.4777331Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:46:24.4778297Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.4779570Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:24.4780397Z       |         ^~~~
2022-05-13T18:46:24.4781784Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:46:24.4782888Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:46:24.4783775Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:24.9976954Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T18:46:24.9979111Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:46:24.9980472Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:24.9981455Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.9982391Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:46:24.9983120Z       |                 ^~~~
2022-05-13T18:46:24.9984005Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:24.9985020Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:24.9985969Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:24.9986747Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:46:24.9987442Z       |                 ^~~~
2022-05-13T18:46:24.9988282Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:46:24.9989871Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:46:24.9990771Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:25.0676734Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:46:25.0678470Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:46:25.0679938Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:46:25.0681393Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:46:25.0682507Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:25.0683412Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:25.0684382Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:25.0685180Z       |                 ^~~~
2022-05-13T18:46:25.0685977Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:46:25.0687226Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:25.0688297Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:25.0689205Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:25.0690242Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:25.0691019Z       |                 ^~~~
2022-05-13T18:46:25.0691884Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:46:25.0692855Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:46:25.0693754Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:46:25.0694604Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:46:25.0695611Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:46:25.0697110Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:46:25.0698352Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:46:25.0700406Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:25.0701513Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:25.0702324Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:25.0703040Z       |         ^~~~
2022-05-13T18:46:25.0703861Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:46:25.0704941Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:46:25.0705886Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:46:25.0706679Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:46:25.0707436Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:46:25.0708217Z       |         ^~~~
2022-05-13T18:46:25.0709024Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:46:25.0710129Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:46:25.0711004Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:47:38.7963522Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:47:38.7968459Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.7970249Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:47:38.7971260Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.7972128Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T18:47:38.7972962Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.7973692Z   366 |                                         keys,
2022-05-13T18:47:38.7974366Z       |                                         ~~~~~
2022-05-13T18:47:38.7975109Z   367 |                                         lens, cur_salt->salt,
2022-05-13T18:47:38.7976827Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.7977731Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T18:47:38.7978757Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.7989834Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:47:38.7991538Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.7994248Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:47:38.7995733Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.7996852Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:47:38.7997695Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:47:38.7998573Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:47:38.7999533Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:47:38.8000400Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8001298Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.8002282Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:47:38.8003248Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8004101Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T18:47:38.8005100Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8005950Z   374 |                                         keys,
2022-05-13T18:47:38.8006714Z       |                                         ~~~~~
2022-05-13T18:47:38.8007462Z   375 |                                         lens, cur_salt->salt,
2022-05-13T18:47:38.8009078Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8010492Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T18:47:38.8012025Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8013050Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:47:38.8014388Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.8015438Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:47:38.8016814Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.8017840Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:47:38.8018673Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:47:38.8019536Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:47:38.8020440Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:47:38.8021271Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8022300Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.8023288Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T18:47:38.8024096Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8024905Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T18:47:38.8025796Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8026617Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T18:47:38.8027547Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8028284Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:47:38.8029077Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:47:38.8029948Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:47:38.8030998Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.8032011Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:47:38.8033095Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:47:38.8034119Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:47:38.8034991Z In file included from bks_fmt_plug.c:31:
2022-05-13T18:47:38.8035992Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:47:38.8036918Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:47:38.8037749Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6050939Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:49:46.6053748Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:49:46.6056727Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:49:46.6059070Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6060134Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:49:46.6061151Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6062492Z   270 |                                         lens, cur_salt->salt,
2022-05-13T18:49:46.6063604Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6064482Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:49:46.6065681Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6066727Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:49:46.6068111Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:49:46.6070302Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:49:46.6071720Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T18:49:46.6073013Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:49:46.6073929Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:49:46.6075051Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:49:46.6076257Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:49:46.6077343Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6093066Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:49:46.6094992Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:49:46.6096298Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6097735Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:49:46.6098762Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6099701Z   247 |                                         lens, cur_salt->salt,
2022-05-13T18:49:46.6100472Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6101411Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:49:46.6102409Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6103569Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:49:46.6105290Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:49:46.6106812Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:49:46.6108318Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:49:46.6111588Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:49:46.6112755Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:49:46.6113806Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:49:46.6115440Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:49:46.6116921Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6127630Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:49:46.6129410Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T18:49:46.6130779Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6131896Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:49:46.6132910Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6133818Z   225 |                                         lens, cur_salt->salt,
2022-05-13T18:49:46.6134902Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6135817Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T18:49:46.6136802Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:49:46.6137827Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:49:46.6139134Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:49:46.6140524Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:49:46.6141975Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:49:46.6143254Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:49:46.6144291Z In file included from pfx_fmt_plug.c:33:
2022-05-13T18:49:46.6145632Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:49:46.6146881Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:49:46.6147990Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8957372Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:50:23.8960694Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:50:23.8963683Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:50:23.8965680Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8966667Z   117 |                                 cur_salt->iterations,
2022-05-13T18:50:23.8967901Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8968935Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T18:50:23.8970090Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8971189Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T18:50:23.8972150Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8973284Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:50:23.8975965Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:50:23.8977897Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:50:23.8980740Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:50:23.8982737Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:50:23.8983950Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:50:23.8985431Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:50:23.8986905Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:50:23.8988151Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8989330Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:50:23.8991094Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T18:50:23.8991956Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8992639Z   122 |                                 cur_salt->iterations,
2022-05-13T18:50:23.8993367Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8994143Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T18:50:23.8994985Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8995762Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T18:50:23.8997389Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:50:23.8998500Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:50:23.8999597Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:50:23.9002639Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:50:23.9003831Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:50:23.9005927Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:50:23.9006833Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T18:50:23.9007826Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:50:23.9008733Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:50:23.9009839Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1546966Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T18:51:02.1550048Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:51:02.1551735Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:51:02.1553018Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1554056Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:51:02.1555116Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1556427Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T18:51:02.1558322Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1559268Z   153 |                                                    salt_len, mackey,
2022-05-13T18:51:02.1559988Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1560803Z   154 |                                                    BINARY_SIZE);
2022-05-13T18:51:02.1561566Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:51:02.1562681Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:51:02.1563952Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:51:02.1566934Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:51:02.1570355Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:51:02.1572063Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:51:02.1573518Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:51:02.1574520Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:51:02.1575671Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:51:02.1576677Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1588120Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:51:02.1589746Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T18:51:02.1590783Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1591608Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T18:51:02.1592591Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1593402Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T18:51:02.1594086Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1594805Z   138 |                                                    salt_len, mackey,
2022-05-13T18:51:02.1595545Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T18:51:02.1596278Z   139 |                                                    BINARY_SIZE);
2022-05-13T18:51:02.1597011Z       |                                                    ~~~~~~~~~~~~
2022-05-13T18:51:02.1597819Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T18:51:02.1598908Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:51:02.1599951Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T18:51:02.1602022Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T18:51:02.1603259Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T18:51:02.1604150Z In file included from zed_fmt_plug.c:30:
2022-05-13T18:51:02.1620618Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T18:51:02.1622043Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T18:51:02.1623234Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T18:51:42.6611808Z In file included from subsets.c:25:
2022-05-13T18:51:42.6613853Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T18:51:42.6614829Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T18:51:42.6615921Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T18:51:42.6617817Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T18:54:28.1893052Z ar: creating aes.a
2022-05-13T18:54:42.1074605Z ar: creating secp256k1.a
2022-05-13T18:54:51.2518647Z ar: creating poly1305-donna.a
2022-05-13T18:54:51.6554759Z ar: creating ed25519-donna.a
2022-05-13T18:55:26.9089988Z 
2022-05-13T18:55:26.9330894Z Make process completed.
2022-05-13T18:55:28.4909268Z 
2022-05-13T18:55:28.5203911Z Make process completed.
2022-05-13T18:55:28.5574462Z Stripping executables.
2022-05-13T18:55:29.3663801Z Executing './configure --disable-native-tests --disable-openmp --enable-simd=avx512bw CPPFLAGS='-fno-asynchronous-unwind-tables -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-avx512f\\\"\" '                                                                            && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx512bw-non-omp'
2022-05-13T18:55:32.6027143Z checking build system type... x86_64-unknown-cygwin
2022-05-13T18:55:32.6029719Z checking host system type... x86_64-unknown-cygwin
2022-05-13T18:55:32.6188678Z checking whether to compile using MPI... no
2022-05-13T18:55:32.6211601Z checking for gcc... gcc
2022-05-13T18:55:33.4434307Z checking whether the C compiler works... yes
2022-05-13T18:55:33.4436761Z checking for C compiler default output file name... a.exe
2022-05-13T18:55:33.8158536Z checking for suffix of executables... .exe
2022-05-13T18:55:34.2300668Z checking whether we are cross compiling... no
2022-05-13T18:55:34.4615787Z checking for suffix of object files... o
2022-05-13T18:55:34.6401561Z checking whether we are using the GNU C compiler... yes
2022-05-13T18:55:34.8183635Z checking whether gcc accepts -g... yes
2022-05-13T18:55:35.1132925Z checking for gcc option to accept ISO C89... none needed
2022-05-13T18:55:35.4223458Z checking whether gcc understands -c and -o together... yes
2022-05-13T18:55:35.8573151Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T18:55:35.8574908Z checking whether gcc accepts -g... (cached) yes
2022-05-13T18:55:35.8576090Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T18:55:35.8580077Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T18:55:35.8614416Z checking additional paths...  -L/usr/local/lib
2022-05-13T18:55:36.6406951Z checking arg check macro for -m with gcc... yes
2022-05-13T18:55:36.9346762Z checking arg check macro for -Q with gcc... yes
2022-05-13T18:55:37.1029625Z checking if gcc supports -funroll-loops... yes
2022-05-13T18:55:37.2776791Z checking if gcc supports -Os... yes
2022-05-13T18:55:37.6525215Z checking if gcc supports -finline-functions... yes
2022-05-13T18:55:37.8477564Z checking if gcc supports -Og... yes
2022-05-13T18:55:38.0357331Z checking if gcc supports -Wall... yes
2022-05-13T18:55:38.2321045Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T18:55:38.4006926Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T18:55:38.5970563Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T18:55:38.9374315Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T18:55:39.1188987Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T18:55:39.4559671Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T18:55:39.6464268Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T18:55:39.9407162Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T18:55:40.1614824Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T18:55:40.4568152Z checking if gcc supports -Qunused-arguments... no
2022-05-13T18:55:40.6683978Z checking if gcc supports -std=gnu89... yes
2022-05-13T18:55:40.8613238Z checking if gcc supports -Wdate-time... yes
2022-05-13T18:55:41.2950145Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T18:55:41.7566847Z checking for 32/64 bit... 64-bit
2022-05-13T18:55:41.7820537Z checking additional paths (64 bit)... none
2022-05-13T18:55:41.7822061Z checking whether ln -s works... yes
2022-05-13T18:55:41.8350694Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T18:55:41.9059022Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T18:55:41.9907563Z checking for GNU make... make
2022-05-13T18:55:42.1623815Z checking whether make sets $(MAKE)... yes
2022-05-13T18:55:42.5096968Z checking how to run the C preprocessor... gcc -E
2022-05-13T18:55:42.9443766Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T18:55:43.2163229Z checking for sort... /usr/bin/sort
2022-05-13T18:55:43.2165278Z checking for find... /usr/bin/find
2022-05-13T18:55:43.2167460Z checking for perl... /usr/bin/perl
2022-05-13T18:55:43.2168379Z checking for ar... ar
2022-05-13T18:55:43.2176451Z checking for strip... strip
2022-05-13T18:55:43.2189797Z checking for strings... strings
2022-05-13T18:55:43.2202884Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T18:55:43.2419286Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T18:55:43.2422217Z checking if pkg-config will be used... no
2022-05-13T18:55:43.2949511Z checking for egrep... /usr/bin/grep -E
2022-05-13T18:55:44.3070782Z checking for ANSI C header files... yes
2022-05-13T18:55:44.6203969Z checking for sys/types.h... yes
2022-05-13T18:55:45.0071211Z checking for sys/stat.h... yes
2022-05-13T18:55:45.4345943Z checking for stdlib.h... yes
2022-05-13T18:55:45.8957050Z checking for string.h... yes
2022-05-13T18:55:46.2596904Z checking for memory.h... yes
2022-05-13T18:55:46.6946584Z checking for strings.h... yes
2022-05-13T18:55:47.1629420Z checking for inttypes.h... yes
2022-05-13T18:55:47.5826305Z checking for stdint.h... yes
2022-05-13T18:55:48.0086342Z checking for unistd.h... yes
2022-05-13T18:55:48.6722572Z checking size of short... 2
2022-05-13T18:55:49.2903591Z checking size of int... 4
2022-05-13T18:55:49.9206028Z checking size of long... 8
2022-05-13T18:55:50.5362141Z checking size of long long... 8
2022-05-13T18:55:51.2084834Z checking size of wchar_t... 2
2022-05-13T18:55:51.8237556Z checking size of int *... 8
2022-05-13T18:55:52.4585934Z checking size of void *... 8
2022-05-13T18:55:52.5559810Z configure: Trying to force AVX512BW using default method (--enable-simd=avx512bw).
2022-05-13T18:55:52.9896977Z checking if gcc supports -mavx512bw w/ linking... yes
2022-05-13T18:55:53.5266181Z checking for extra ASFLAGS... None needed
2022-05-13T18:55:53.8258251Z checking for X32 ABI... no
2022-05-13T18:55:53.8554182Z checking special compiler flags... Intel x86
2022-05-13T18:55:53.8555601Z configure: Testing tool-chain's CPU support with given options
2022-05-13T18:55:54.3862272Z checking for MMX... yes
2022-05-13T18:55:54.9250646Z checking for SSE2... yes
2022-05-13T18:55:55.4949012Z checking for SSSE3... yes
2022-05-13T18:55:56.0347621Z checking for SSE4.1... yes
2022-05-13T18:55:56.5906409Z checking for SSE4.2... yes
2022-05-13T18:55:57.7796973Z checking for AVX... yes
2022-05-13T18:55:58.9754849Z checking for XOP... no
2022-05-13T18:56:00.2187160Z checking for AVX2... yes
2022-05-13T18:56:01.4417783Z checking for AVX512F... yes
2022-05-13T18:56:02.6843601Z checking for AVX512BW... yes
2022-05-13T18:56:02.7049432Z checking for arch.h alternative... x86-64.h
2022-05-13T18:56:02.7059901Z checking for byte ordering according to target triple... little
2022-05-13T18:56:02.7073376Z checking supplied paths for OpenSSL...  
2022-05-13T18:56:02.7077512Z checking additional paths for OpenSSL... none
2022-05-13T18:56:02.9569821Z checking openssl/opensslv.h usability... yes
2022-05-13T18:56:03.0773044Z checking openssl/opensslv.h presence... yes
2022-05-13T18:56:03.0774943Z checking for openssl/opensslv.h... yes
2022-05-13T18:56:03.5517902Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T18:56:03.9891239Z checking for MD5_Update in -lcrypto... yes
2022-05-13T18:56:03.9923801Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T18:56:04.5020875Z checking for sqrt in -lm... yes
2022-05-13T18:56:04.9411776Z checking for clock_gettime in -lrt... yes
2022-05-13T18:56:05.3846916Z checking for deflate in -lz... yes
2022-05-13T18:56:06.3035766Z checking for library containing crypt... -lcrypt
2022-05-13T18:56:06.6276802Z checking gmp.h usability... yes
2022-05-13T18:56:06.7702363Z checking gmp.h presence... yes
2022-05-13T18:56:06.7705498Z checking for gmp.h... yes
2022-05-13T18:56:07.2763207Z checking for __gmpz_init in -lgmp... yes
2022-05-13T18:56:07.6210548Z checking skey.h usability... no
2022-05-13T18:56:07.8603948Z checking skey.h presence... no
2022-05-13T18:56:07.8605283Z checking for skey.h... no
2022-05-13T18:56:07.8611007Z checking for S/Key... using our own code
2022-05-13T18:56:08.1082664Z checking bzlib.h usability... yes
2022-05-13T18:56:08.2575433Z checking bzlib.h presence... yes
2022-05-13T18:56:08.2577571Z checking for bzlib.h... yes
2022-05-13T18:56:08.6956323Z checking for main in -lbz2... yes
2022-05-13T18:56:09.1340815Z checking for main in -lkernel32... yes
2022-05-13T18:56:09.6089532Z checking for dlopen in -ldl... yes
2022-05-13T18:56:10.9930524Z checking intrin.h usability... yes
2022-05-13T18:56:11.4237071Z checking intrin.h presence... yes
2022-05-13T18:56:11.4238765Z checking for intrin.h... yes
2022-05-13T18:56:11.7930321Z checking openssl/cmac.h usability... yes
2022-05-13T18:56:12.0676997Z checking openssl/cmac.h presence... yes
2022-05-13T18:56:12.0680592Z checking for openssl/cmac.h... yes
2022-05-13T18:56:12.0908346Z configure: rexgen check not enabled
2022-05-13T18:56:12.5578435Z checking pcap.h usability... no
2022-05-13T18:56:12.8104966Z checking pcap.h presence... no
2022-05-13T18:56:12.8106624Z checking for pcap.h... no
2022-05-13T18:56:13.2296903Z checking pcap/pcap.h usability... no
2022-05-13T18:56:13.4805078Z checking pcap/pcap.h presence... no
2022-05-13T18:56:13.4806770Z checking for pcap/pcap.h... no
2022-05-13T18:56:13.5615342Z checking for pcap.h... (cached) no
2022-05-13T18:56:13.6254158Z checking for pcap/pcap.h... (cached) no
2022-05-13T18:56:13.8653513Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T18:56:14.0961911Z checking whether string.h and strings.h may both be included... yes
2022-05-13T18:56:14.6131217Z checking for SHA256... yes
2022-05-13T18:56:15.2268510Z checking for WHIRLPOOL... yes
2022-05-13T18:56:15.8367942Z checking for RIPEMD160... yes
2022-05-13T18:56:16.3887725Z checking for AES_encrypt... yes
2022-05-13T18:56:17.0266346Z checking for DSA_get0_pqg... yes
2022-05-13T18:56:17.4104177Z checking additional paths for OpenCL... none
2022-05-13T18:56:17.6681505Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T18:56:18.3615069Z checking for the pthreads library -lpthreads... no
2022-05-13T18:56:18.8817501Z checking whether pthreads work without any flags... yes
2022-05-13T18:56:19.3023079Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T18:56:19.3025151Z checking if more special flags are required for pthreads... no
2022-05-13T18:56:19.6514889Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T18:56:19.9134667Z checking whether we are using the Microsoft C compiler... no
2022-05-13T18:56:20.2988152Z checking CL/cl.h usability... yes
2022-05-13T18:56:20.4866120Z checking CL/cl.h presence... yes
2022-05-13T18:56:20.4867917Z checking for CL/cl.h... yes
2022-05-13T18:56:21.0291753Z checking OpenCL/cl.h usability... no
2022-05-13T18:56:21.2580007Z checking OpenCL/cl.h presence... no
2022-05-13T18:56:21.2581713Z checking for OpenCL/cl.h... no
2022-05-13T18:56:23.9365986Z checking windows.h usability... yes
2022-05-13T18:56:25.3010363Z checking windows.h presence... yes
2022-05-13T18:56:25.3012230Z checking for windows.h... yes
2022-05-13T18:56:25.8322988Z checking for OpenCL library... -lOpenCL
2022-05-13T18:56:26.1458429Z checking arpa/inet.h usability... yes
2022-05-13T18:56:26.3008647Z checking arpa/inet.h presence... yes
2022-05-13T18:56:26.3010885Z checking for arpa/inet.h... yes
2022-05-13T18:56:26.7288273Z checking crypt.h usability... yes
2022-05-13T18:56:26.8669673Z checking crypt.h presence... yes
2022-05-13T18:56:26.8671216Z checking for crypt.h... yes
2022-05-13T18:56:27.2777577Z checking dirent.h usability... yes
2022-05-13T18:56:27.4188674Z checking dirent.h presence... yes
2022-05-13T18:56:27.4190655Z checking for dirent.h... yes
2022-05-13T18:56:27.8227165Z checking limits.h usability... yes
2022-05-13T18:56:27.9570770Z checking limits.h presence... yes
2022-05-13T18:56:27.9572433Z checking for limits.h... yes
2022-05-13T18:56:28.3750380Z checking locale.h usability... yes
2022-05-13T18:56:28.5089808Z checking locale.h presence... yes
2022-05-13T18:56:28.5092989Z checking for locale.h... yes
2022-05-13T18:56:28.9273754Z checking malloc.h usability... yes
2022-05-13T18:56:29.0596881Z checking malloc.h presence... yes
2022-05-13T18:56:29.0598652Z checking for malloc.h... yes
2022-05-13T18:56:29.4980710Z checking net/ethernet.h usability... no
2022-05-13T18:56:29.7335328Z checking net/ethernet.h presence... no
2022-05-13T18:56:29.7336597Z checking for net/ethernet.h... no
2022-05-13T18:56:30.0352644Z checking netdb.h usability... yes
2022-05-13T18:56:30.2072594Z checking netdb.h presence... yes
2022-05-13T18:56:30.2074145Z checking for netdb.h... yes
2022-05-13T18:56:30.6333736Z checking netinet/in.h usability... yes
2022-05-13T18:56:30.7975973Z checking netinet/in.h presence... yes
2022-05-13T18:56:30.7979695Z checking for netinet/in.h... yes
2022-05-13T18:56:31.1845252Z checking netinet/in_systm.h usability... yes
2022-05-13T18:56:31.3341765Z checking netinet/in_systm.h presence... yes
2022-05-13T18:56:31.3343621Z checking for netinet/in_systm.h... yes
2022-05-13T18:56:31.4848946Z checking for string.h... (cached) yes
2022-05-13T18:56:31.6334481Z checking for strings.h... (cached) yes
2022-05-13T18:56:32.0936800Z checking sys/ethernet.h usability... no
2022-05-13T18:56:32.3000170Z checking sys/ethernet.h presence... no
2022-05-13T18:56:32.3001545Z checking for sys/ethernet.h... no
2022-05-13T18:56:32.5813320Z checking sys/file.h usability... yes
2022-05-13T18:56:32.7425923Z checking sys/file.h presence... yes
2022-05-13T18:56:32.7430985Z checking for sys/file.h... yes
2022-05-13T18:56:33.1270587Z checking sys/param.h usability... yes
2022-05-13T18:56:33.2686090Z checking sys/param.h presence... yes
2022-05-13T18:56:33.2687873Z checking for sys/param.h... yes
2022-05-13T18:56:33.6747641Z checking sys/socket.h usability... yes
2022-05-13T18:56:33.8076093Z checking sys/socket.h presence... yes
2022-05-13T18:56:33.8077880Z checking for sys/socket.h... yes
2022-05-13T18:56:34.1935691Z checking sys/time.h usability... yes
2022-05-13T18:56:34.3677746Z checking sys/time.h presence... yes
2022-05-13T18:56:34.3679360Z checking for sys/time.h... yes
2022-05-13T18:56:34.7544518Z checking sys/times.h usability... yes
2022-05-13T18:56:34.8782518Z checking sys/times.h presence... yes
2022-05-13T18:56:34.8783857Z checking for sys/times.h... yes
2022-05-13T18:56:35.0421325Z checking for sys/types.h... (cached) yes
2022-05-13T18:56:35.4391861Z checking termios.h usability... yes
2022-05-13T18:56:35.5727525Z checking termios.h presence... yes
2022-05-13T18:56:35.5729935Z checking for termios.h... yes
2022-05-13T18:56:35.7411786Z checking for unistd.h... (cached) yes
2022-05-13T18:56:36.2351888Z checking unixlib/local.h usability... no
2022-05-13T18:56:36.4849328Z checking unixlib/local.h presence... no
2022-05-13T18:56:36.4851308Z checking for unixlib/local.h... no
2022-05-13T18:56:36.5532672Z checking for windows.h... (cached) yes
2022-05-13T18:56:36.8654823Z checking for net/if.h... yes
2022-05-13T18:56:37.2144428Z checking for net/if_arp.h... no
2022-05-13T18:56:37.5091952Z checking for netinet/if_ether.h... no
2022-05-13T18:56:37.7485151Z checking for netinet/ip.h... yes
2022-05-13T18:56:38.2551854Z checking for stdbool.h that conforms to C99... yes
2022-05-13T18:56:38.8631338Z checking for _Bool... yes
2022-05-13T18:56:39.0713150Z checking for inline... inline
2022-05-13T18:56:39.6986490Z checking for int32_t... yes
2022-05-13T18:56:40.7807868Z checking for int64_t... yes
2022-05-13T18:56:40.9735815Z checking for off_t... yes
2022-05-13T18:56:41.5986870Z checking for size_t... yes
2022-05-13T18:56:42.2631654Z checking for ssize_t... yes
2022-05-13T18:56:42.5431947Z checking for uint16_t... yes
2022-05-13T18:56:42.8372604Z checking for uint32_t... yes
2022-05-13T18:56:43.1424820Z checking for uint64_t... yes
2022-05-13T18:56:43.4345908Z checking for uint8_t... yes
2022-05-13T18:56:44.0780461Z checking for ptrdiff_t... yes
2022-05-13T18:56:44.4404564Z checking for int128... no
2022-05-13T18:56:45.0566253Z checking for __int128... yes
2022-05-13T18:56:45.7093061Z checking for __int128_t... yes
2022-05-13T18:56:46.1829958Z checking for error_at_line... yes
2022-05-13T18:56:46.7924719Z checking for pid_t... yes
2022-05-13T18:56:47.1617583Z checking vfork.h usability... no
2022-05-13T18:56:47.4169311Z checking vfork.h presence... no
2022-05-13T18:56:47.4170793Z checking for vfork.h... no
2022-05-13T18:56:47.9966045Z checking for fork... yes
2022-05-13T18:56:48.5497210Z checking for vfork... yes
2022-05-13T18:56:49.2036407Z checking for working fork... yes
2022-05-13T18:56:49.2037739Z checking for working vfork... (cached) yes
2022-05-13T18:56:49.8431437Z checking for fseek64... no
2022-05-13T18:56:50.3701322Z checking for fseeko... yes
2022-05-13T18:56:51.1174704Z checking for fseeko64... no
2022-05-13T18:56:51.7478530Z checking for _fseeki64... no
2022-05-13T18:56:52.3877009Z checking for lseek64... no
2022-05-13T18:56:52.9173284Z checking for lseek... yes
2022-05-13T18:56:53.7053006Z checking for ftell64... no
2022-05-13T18:56:54.1991090Z checking for ftello... yes
2022-05-13T18:56:54.8841696Z checking for ftello64... no
2022-05-13T18:56:55.4833120Z checking for _ftelli64... no
2022-05-13T18:56:56.0912620Z checking for fopen64... no
2022-05-13T18:56:56.7077856Z checking for _fopen64... no
2022-05-13T18:56:57.2390405Z checking for memmem... yes
2022-05-13T18:56:57.8619430Z checking for mmap... yes
2022-05-13T18:56:58.4687564Z checking for sleep... yes
2022-05-13T18:56:59.1152777Z checking for setenv... yes
2022-05-13T18:56:59.7208545Z checking for putenv... yes
2022-05-13T18:57:00.4289873Z checking for strcasecmp... yes
2022-05-13T18:57:01.1682936Z checking for strncasecmp... yes
2022-05-13T18:57:01.8618691Z checking for stricmp... no
2022-05-13T18:57:02.4739807Z checking for strcmpi... no
2022-05-13T18:57:03.1002520Z checking for _stricmp... no
2022-05-13T18:57:03.6554884Z checking for _strcmpi... no
2022-05-13T18:57:04.2456787Z checking for strnicmp... no
2022-05-13T18:57:04.9630387Z checking for strncmpi... no
2022-05-13T18:57:05.5555590Z checking for _strnicmp... no
2022-05-13T18:57:06.1756552Z checking for _strncmpi... no
2022-05-13T18:57:06.7554736Z checking for strnlen... yes
2022-05-13T18:57:07.3964735Z checking for strlwr... yes
2022-05-13T18:57:08.0236985Z checking for strupr... yes
2022-05-13T18:57:08.7279744Z checking for strrev... no
2022-05-13T18:57:09.2807183Z checking for atoll... yes
2022-05-13T18:57:09.9238523Z checking for _atoi64... no
2022-05-13T18:57:10.5759152Z checking for snprintf... yes
2022-05-13T18:57:11.2973232Z checking for sprintf_s... no
2022-05-13T18:57:11.8126596Z checking for strcasestr... yes
2022-05-13T18:57:12.3367219Z checking for clGetKernelArgInfo... yes
2022-05-13T18:57:12.9276069Z checking for posix_memalign... yes
2022-05-13T18:57:13.3846315Z checking for yasm that supports "-f win64"... 
2022-05-13T18:57:13.3862740Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T18:57:13.7978921Z checking for _get_osfhandle... yes
2022-05-13T18:57:16.8954562Z checking for GetFileSizeEx... yes
2022-05-13T18:57:16.9187723Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T18:57:17.4963230Z checking size of size_t... 8
2022-05-13T18:57:18.0958112Z checking size of off_t... 8
2022-05-13T18:57:18.1477663Z configure: Fuzz check disabled
2022-05-13T18:57:18.1480146Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T18:57:18.1620952Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T18:57:18.2838884Z configure: creating Makefile dependencies
2022-05-13T18:57:21.1977159Z configure: creating ./john_build_rule.h
2022-05-13T18:57:21.5042132Z configure: creating ./config.status
2022-05-13T18:57:23.6075267Z config.status: creating Makefile
2022-05-13T18:57:23.9008104Z config.status: creating aes/Makefile
2022-05-13T18:57:24.2703023Z config.status: creating aes/aesni/Makefile
2022-05-13T18:57:24.6444567Z config.status: creating aes/openssl/Makefile
2022-05-13T18:57:25.0198588Z config.status: creating secp256k1/Makefile
2022-05-13T18:57:25.3931905Z config.status: creating ed25519-donna/Makefile
2022-05-13T18:57:25.7897764Z config.status: creating poly1305-donna/Makefile
2022-05-13T18:57:26.2013232Z config.status: creating autoconfig.h
2022-05-13T18:57:26.3184756Z config.status: autoconfig.h is unchanged
2022-05-13T18:57:26.4178244Z config.status: linking x86-64.h to arch.h
2022-05-13T18:57:26.5220162Z config.status: executing default commands
2022-05-13T18:57:26.5577459Z configure: creating ./fmt_externs.h
2022-05-13T18:57:38.2169955Z configure: creating ./fmt_registers.h
2022-05-13T18:57:52.3795301Z 
2022-05-13T18:57:52.3797968Z Configured for building John the Ripper jumbo:
2022-05-13T18:57:52.3798645Z 
2022-05-13T18:57:52.3799655Z Target CPU ......................................... x86_64 AVX512BW, 64-bit LE
2022-05-13T18:57:52.3802397Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T18:57:52.3803439Z Target OS .......................................... cygwin
2022-05-13T18:57:52.3804172Z Cross compiling .................................... no
2022-05-13T18:57:52.3805155Z Legacy arch header ................................. x86-64.h
2022-05-13T18:57:52.3805699Z 
2022-05-13T18:57:52.3807612Z Optional libraries/features found:
2022-05-13T18:57:52.3808475Z Memory map (share/page large files) ................ yes
2022-05-13T18:57:52.3809379Z Fork support ....................................... yes
2022-05-13T18:57:52.3810297Z OpenMP support ..................................... no
2022-05-13T18:57:52.3811197Z OpenCL support ..................................... yes
2022-05-13T18:57:52.3812100Z Generic crypt(3) format ............................ yes
2022-05-13T18:57:52.3813037Z OpenSSL (many additional formats) .................. yes
2022-05-13T18:57:52.3813797Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T18:57:52.3814703Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T18:57:52.3815617Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T18:57:52.3817733Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T18:57:52.3818903Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T18:57:52.3819787Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T18:57:52.3820827Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T18:57:52.3821692Z OpenMPI support (default disabled) ................. no
2022-05-13T18:57:52.3822575Z Experimental code (default disabled) ............... no
2022-05-13T18:57:52.3824065Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T18:57:52.3824714Z 
2022-05-13T18:57:52.3826075Z Install missing libraries to get any needed features that were omitted.
2022-05-13T18:57:52.3826844Z 
2022-05-13T18:57:52.3827617Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T18:59:30.9239042Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T18:59:30.9244566Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:30.9246703Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:30.9247761Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:30.9248717Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:30.9249400Z       |                         ^~~~
2022-05-13T18:59:30.9250322Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:30.9251321Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:30.9252261Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:30.9253220Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:30.9254020Z       |                         ^~~~
2022-05-13T18:59:30.9255242Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:59:30.9256316Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:30.9257224Z       | ^~~~~~~~~~~~
2022-05-13T18:59:30.9551045Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T18:59:30.9553992Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:30.9555407Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:30.9556507Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:30.9558768Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:30.9559756Z       |                         ^~~~
2022-05-13T18:59:30.9560706Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:30.9561784Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:30.9562780Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:30.9563733Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:30.9564458Z       |                         ^~~~
2022-05-13T18:59:30.9565375Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:59:30.9566528Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:30.9568757Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:30.9865377Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T18:59:30.9868002Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:59:30.9869272Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:30.9870256Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:30.9871148Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:30.9871961Z       |                         ^~~~
2022-05-13T18:59:30.9872959Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:30.9874023Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:30.9874895Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:30.9875832Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:30.9876846Z       |                         ^~~~
2022-05-13T18:59:30.9878149Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:59:30.9879158Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:59:30.9880057Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:31.0899782Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T18:59:31.0903399Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:31.0905592Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:31.0907073Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.0908074Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:59:31.0908890Z       |                 ^~~~
2022-05-13T18:59:31.0909817Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:31.0910818Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:31.0911723Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.0912625Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:59:31.0913309Z       |                 ^~~~
2022-05-13T18:59:31.0914168Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:59:31.0915168Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:31.0916322Z       | ^~~~~~~~~~~~
2022-05-13T18:59:31.1675757Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:59:31.1678190Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:59:31.1680213Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:59:31.1682891Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:31.1684745Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:31.1685794Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.1686976Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.1687842Z       |                 ^~~~
2022-05-13T18:59:31.1689781Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:59:31.1691041Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:31.1692101Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:31.1692988Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.1693964Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.1694738Z       |                 ^~~~
2022-05-13T18:59:31.1695593Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:59:31.1696940Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:31.1697798Z       | ^~~~~~~~~~~~
2022-05-13T18:59:31.1698657Z In function ‘ripemd_addbits_and_close’,
2022-05-13T18:59:31.1699684Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T18:59:31.1700730Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T18:59:31.1701974Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:31.1703108Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:31.1704025Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.1704891Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.1705635Z       |         ^~~~
2022-05-13T18:59:31.1706801Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T18:59:31.1707795Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:31.1708820Z   276 | #define RFUN   ripemd_round
2022-05-13T18:59:31.1709706Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.1710624Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.1711319Z       |         ^~~~
2022-05-13T18:59:31.1712378Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T18:59:31.1713385Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:31.1714260Z       | ^~~~~~~~~~~~
2022-05-13T18:59:31.5857019Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T18:59:31.5858915Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:31.5860616Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:31.5861642Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.5862607Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:59:31.5863368Z       |                 ^~~~
2022-05-13T18:59:31.5864334Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:31.5865309Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:31.5867543Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.5868940Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:59:31.5870603Z       |                 ^~~~
2022-05-13T18:59:31.5871498Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:59:31.5872522Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:31.5873746Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:31.6726620Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:59:31.6728138Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:59:31.6729268Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:59:31.6730564Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:31.6731763Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:31.6732761Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.6733901Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.6734787Z       |                 ^~~~
2022-05-13T18:59:31.6735641Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:59:31.6737042Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:31.6738102Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:31.6739024Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.6739947Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.6740729Z       |                 ^~~~
2022-05-13T18:59:31.6741621Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:59:31.6742637Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:31.6743513Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:31.6744337Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T18:59:31.6745424Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T18:59:31.6747737Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T18:59:31.6749087Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T18:59:31.6749962Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:31.6750788Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.6751928Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.6752593Z       |         ^~~~
2022-05-13T18:59:31.6753299Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T18:59:31.6754176Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:31.6754998Z   600 | #define RFUN   ripemd128_round
2022-05-13T18:59:31.6755721Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:31.6757031Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:31.6757808Z       |         ^~~~
2022-05-13T18:59:31.6758569Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T18:59:31.6759368Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T18:59:31.6760077Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:32.2154485Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T18:59:32.2156630Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:59:32.2157761Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:32.2158606Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:32.2159372Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:59:32.2160048Z       |                 ^~~~
2022-05-13T18:59:32.2160808Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:32.2161619Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:32.2162398Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:32.2163131Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T18:59:32.2164087Z       |                 ^~~~
2022-05-13T18:59:32.2164926Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:59:32.2165754Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:59:32.2166590Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:32.2960417Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:59:32.2962163Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:59:32.2963235Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:59:32.2964553Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:59:32.2966585Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:32.2968341Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:32.2969871Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:32.2970655Z       |                 ^~~~
2022-05-13T18:59:32.2971436Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:59:32.2972579Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:32.2973593Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:32.2974510Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:32.2975364Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:32.2976427Z       |                 ^~~~
2022-05-13T18:59:32.2977363Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:59:32.2979549Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:59:32.2980404Z       | ^~~~~~~~~~~~~~~
2022-05-13T18:59:32.2981136Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T18:59:32.2982151Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T18:59:32.2983252Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T18:59:32.2984494Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T18:59:32.2985577Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:32.2986834Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:32.2988494Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:32.2989797Z       |         ^~~~
2022-05-13T18:59:32.2990654Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T18:59:32.2992206Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T18:59:32.2993223Z   626 | #define RFUN   ripemd256_round
2022-05-13T18:59:32.2994098Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T18:59:32.2995031Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T18:59:32.2996422Z       |         ^~~~
2022-05-13T18:59:32.2997288Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T18:59:32.2999547Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T18:59:32.3000505Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:00:40.6778265Z bks_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T19:00:40.6781069Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6783274Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T19:00:40.6784616Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6785734Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T19:00:40.6786590Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6787477Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T19:00:40.6788347Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6789239Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:00:40.6790542Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6791603Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:00:40.6793034Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6794456Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:00:40.6796190Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6798139Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:00:40.6799408Z In file included from bks_fmt_plug.c:31:
2022-05-13T19:00:40.6800707Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:00:40.6802157Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:00:40.6803503Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6813024Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6817040Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T19:00:40.6819233Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6820299Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T19:00:40.6821245Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6822071Z   366 |                                         keys,
2022-05-13T19:00:40.6822788Z       |                                         ~~~~~
2022-05-13T19:00:40.6823603Z   367 |                                         lens, cur_salt->salt,
2022-05-13T19:00:40.6824503Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6825499Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T19:00:40.6826425Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6827856Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:00:40.6829738Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6831462Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:00:40.6833112Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6834605Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:00:40.6836189Z In file included from bks_fmt_plug.c:31:
2022-05-13T19:00:40.6837449Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:00:40.6838810Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:00:40.6840130Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6841583Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6843025Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T19:00:40.6843981Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6845251Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T19:00:40.6846349Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6847255Z   374 |                                         keys,
2022-05-13T19:00:40.6848374Z       |                                         ~~~~~
2022-05-13T19:00:40.6849343Z   375 |                                         lens, cur_salt->salt,
2022-05-13T19:00:40.6850339Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6851316Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T19:00:40.6852367Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:00:40.6853537Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:00:40.6854784Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6856482Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:00:40.6858106Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:00:40.6859431Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:00:40.6861118Z In file included from bks_fmt_plug.c:31:
2022-05-13T19:00:40.6864318Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:00:40.6866066Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:00:40.6867525Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1275747Z pfx_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T19:02:32.1280717Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:02:32.1283174Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T19:02:32.1284573Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1285665Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:02:32.1286660Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1288172Z   225 |                                         lens, cur_salt->salt,
2022-05-13T19:02:32.1304483Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1305519Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:02:32.1306475Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1307887Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:02:32.1309371Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:02:32.1310823Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:02:32.1312887Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:02:32.1314412Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:02:32.1315483Z In file included from pfx_fmt_plug.c:33:
2022-05-13T19:02:32.1316560Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:02:32.1318176Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:02:32.1319336Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1330168Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:02:32.1333090Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T19:02:32.1334665Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1336272Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:02:32.1337683Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1338587Z   247 |                                         lens, cur_salt->salt,
2022-05-13T19:02:32.1339491Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1340419Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:02:32.1341408Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1343166Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:02:32.1344725Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:02:32.1346189Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:02:32.1348515Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:02:32.1350020Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:02:32.1351074Z In file included from pfx_fmt_plug.c:33:
2022-05-13T19:02:32.1352686Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:02:32.1354163Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:02:32.1355857Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1358033Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T19:02:32.1359485Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T19:02:32.1360693Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1361795Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:02:32.1363654Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1364540Z   270 |                                         lens, cur_salt->salt,
2022-05-13T19:02:32.1365454Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1366390Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:02:32.1367690Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:02:32.1368772Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:02:32.1370219Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T19:02:32.1371611Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:02:32.1373879Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T19:02:32.1375289Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:02:32.1376288Z In file included from pfx_fmt_plug.c:33:
2022-05-13T19:02:32.1377689Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:02:32.1379007Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:02:32.1380015Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1337069Z sap_pse_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T19:03:08.1340034Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:08.1341415Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T19:03:08.1342341Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1343231Z   117 |                                 cur_salt->iterations,
2022-05-13T19:03:08.1344063Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1344990Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T19:03:08.1346082Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1347119Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T19:03:08.1348619Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1349906Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:03:08.1351422Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:08.1352869Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:03:08.1354411Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:08.1355754Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:03:08.1356821Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T19:03:08.1357802Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:03:08.1358974Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:03:08.1360095Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1361478Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:08.1362645Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T19:03:08.1363863Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1364545Z   122 |                                 cur_salt->iterations,
2022-05-13T19:03:08.1365376Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1366152Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T19:03:08.1367212Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1368812Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T19:03:08.1369863Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:08.1371155Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:03:08.1372606Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:08.1374068Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:03:08.1375562Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:08.1376974Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:03:08.1378075Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T19:03:08.1379089Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:03:08.1380316Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:03:08.1381819Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6060650Z zed_fmt_plug.c: In function ‘crypt_all’:
2022-05-13T19:03:42.6062509Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:42.6063865Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T19:03:42.6064689Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6065480Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:03:42.6066223Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6066943Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T19:03:42.6068228Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6069526Z   138 |                                                    salt_len, mackey,
2022-05-13T19:03:42.6070252Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6070943Z   139 |                                                    BINARY_SIZE);
2022-05-13T19:03:42.6071582Z       |                                                    ~~~~~~~~~~~~
2022-05-13T19:03:42.6072388Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:03:42.6073406Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:42.6074631Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:03:42.6076307Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:42.6078224Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:03:42.6079785Z In file included from zed_fmt_plug.c:30:
2022-05-13T19:03:42.6080638Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:03:42.6081565Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:03:42.6082635Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6083773Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:42.6084795Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T19:03:42.6085603Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6086394Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:03:42.6087126Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6088548Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T19:03:42.6089288Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6089989Z   153 |                                                    salt_len, mackey,
2022-05-13T19:03:42.6091247Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T19:03:42.6091987Z   154 |                                                    BINARY_SIZE);
2022-05-13T19:03:42.6092641Z       |                                                    ~~~~~~~~~~~~
2022-05-13T19:03:42.6093444Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:03:42.6094673Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:42.6095870Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:03:42.6096910Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:03:42.6097899Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:03:42.6098689Z In file included from zed_fmt_plug.c:30:
2022-05-13T19:03:42.6099438Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:03:42.6100341Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:03:42.6101175Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:04:25.2844780Z In file included from subsets.c:25:
2022-05-13T19:04:25.2846519Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T19:04:25.2850128Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T19:04:25.2851264Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T19:04:25.2853353Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T19:07:09.8706381Z ar: creating aes.a
2022-05-13T19:07:21.9521175Z ar: creating secp256k1.a
2022-05-13T19:07:29.3892026Z ar: creating poly1305-donna.a
2022-05-13T19:07:30.5169726Z ar: creating ed25519-donna.a
2022-05-13T19:08:04.0353909Z 
2022-05-13T19:08:04.0626394Z Make process completed.
2022-05-13T19:08:05.4112117Z 
2022-05-13T19:08:05.4335443Z Make process completed.
2022-05-13T19:08:05.4559212Z Stripping executables.
2022-05-13T19:08:06.1771271Z Executing './configure --disable-native-tests --enable-simd=avx512bw CPPFLAGS='-fno-asynchronous-unwind-tables -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\"\\\"john-avx512bw-non-omp\\\"\" -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\"\\\"john-avx512f\\\"\" ' && make -s clean && make -sj2 2>&1 && make -s strip && mv ../run/john ../run/john-avx512bw'
2022-05-13T19:08:08.8607667Z checking build system type... x86_64-unknown-cygwin
2022-05-13T19:08:08.8612001Z checking host system type... x86_64-unknown-cygwin
2022-05-13T19:08:08.8747671Z checking whether to compile using MPI... no
2022-05-13T19:08:08.8767153Z checking for gcc... gcc
2022-05-13T19:08:09.6483061Z checking whether the C compiler works... yes
2022-05-13T19:08:09.6484630Z checking for C compiler default output file name... a.exe
2022-05-13T19:08:09.9729272Z checking for suffix of executables... .exe
2022-05-13T19:08:10.3585902Z checking whether we are cross compiling... no
2022-05-13T19:08:10.5893955Z checking for suffix of object files... o
2022-05-13T19:08:10.7565641Z checking whether we are using the GNU C compiler... yes
2022-05-13T19:08:10.9284896Z checking whether gcc accepts -g... yes
2022-05-13T19:08:11.1982963Z checking for gcc option to accept ISO C89... none needed
2022-05-13T19:08:11.4334883Z checking whether gcc understands -c and -o together... yes
2022-05-13T19:08:11.8232244Z checking whether we are using the GNU C compiler... (cached) yes
2022-05-13T19:08:11.8234800Z checking whether gcc accepts -g... (cached) yes
2022-05-13T19:08:11.8237837Z checking for gcc option to accept ISO C89... (cached) none needed
2022-05-13T19:08:11.8241212Z checking whether gcc understands -c and -o together... (cached) yes
2022-05-13T19:08:11.8261093Z checking additional paths...  -L/usr/local/lib
2022-05-13T19:08:12.5790149Z checking arg check macro for -m with gcc... yes
2022-05-13T19:08:12.8492950Z checking arg check macro for -Q with gcc... yes
2022-05-13T19:08:13.0007145Z checking if gcc supports -funroll-loops... yes
2022-05-13T19:08:13.1655700Z checking if gcc supports -Os... yes
2022-05-13T19:08:13.5127279Z checking if gcc supports -finline-functions... yes
2022-05-13T19:08:13.6968528Z checking if gcc supports -Og... yes
2022-05-13T19:08:13.8644644Z checking if gcc supports -Wall... yes
2022-05-13T19:08:14.0506357Z checking if gcc supports -Wno-stringop-truncation... yes
2022-05-13T19:08:14.2373680Z checking if gcc supports -Wno-format-overflow... yes
2022-05-13T19:08:14.4304598Z checking if gcc supports -Wno-format-truncation... yes
2022-05-13T19:08:14.7423073Z checking if gcc supports -Wno-tautological-constant-out-of-range-compare... no
2022-05-13T19:08:14.9175949Z checking if gcc supports -fno-omit-frame-pointer... yes
2022-05-13T19:08:15.1917007Z checking if gcc supports --param allow-store-data-races=0... no
2022-05-13T19:08:15.3671346Z checking if gcc supports -Wno-deprecated-declarations... yes
2022-05-13T19:08:15.6081594Z checking if gcc supports -Wformat-extra-args... no
2022-05-13T19:08:15.8025983Z checking if gcc supports -Wunused-but-set-variable... yes
2022-05-13T19:08:16.0809407Z checking if gcc supports -Qunused-arguments... no
2022-05-13T19:08:16.2705943Z checking if gcc supports -std=gnu89... yes
2022-05-13T19:08:16.4511028Z checking if gcc supports -Wdate-time... yes
2022-05-13T19:08:16.8112950Z checking if gcc supports -m64 w/ linking... yes
2022-05-13T19:08:17.1906032Z checking for 32/64 bit... 64-bit
2022-05-13T19:08:17.2139789Z checking additional paths (64 bit)... none
2022-05-13T19:08:17.2141811Z checking whether ln -s works... yes
2022-05-13T19:08:17.2605319Z checking for grep that handles long lines and -e... /usr/bin/grep
2022-05-13T19:08:17.3254342Z checking for a sed that does not truncate output... /usr/bin/sed
2022-05-13T19:08:17.4186646Z checking for GNU make... make
2022-05-13T19:08:17.5895553Z checking whether make sets $(MAKE)... yes
2022-05-13T19:08:17.9331647Z checking how to run the C preprocessor... gcc -E
2022-05-13T19:08:18.3070084Z checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
2022-05-13T19:08:18.5336650Z checking for sort... /usr/bin/sort
2022-05-13T19:08:18.5345373Z checking for find... /usr/bin/find
2022-05-13T19:08:18.5353377Z checking for perl... /usr/bin/perl
2022-05-13T19:08:18.5364921Z checking for ar... ar
2022-05-13T19:08:18.5404226Z checking for strip... strip
2022-05-13T19:08:18.5405180Z checking for strings... strings
2022-05-13T19:08:18.5405891Z checking for pkg-config... /usr/bin/pkg-config
2022-05-13T19:08:18.5633906Z checking pkg-config is at least version 0.9.0... yes
2022-05-13T19:08:18.5639697Z checking if pkg-config will be used... no
2022-05-13T19:08:18.6342131Z checking for egrep... /usr/bin/grep -E
2022-05-13T19:08:19.5615159Z checking for ANSI C header files... yes
2022-05-13T19:08:19.8217346Z checking for sys/types.h... yes
2022-05-13T19:08:20.1861245Z checking for sys/stat.h... yes
2022-05-13T19:08:20.5364292Z checking for stdlib.h... yes
2022-05-13T19:08:20.8768334Z checking for string.h... yes
2022-05-13T19:08:21.2474280Z checking for memory.h... yes
2022-05-13T19:08:21.6163362Z checking for strings.h... yes
2022-05-13T19:08:21.9566415Z checking for inttypes.h... yes
2022-05-13T19:08:22.3516243Z checking for stdint.h... yes
2022-05-13T19:08:22.7412122Z checking for unistd.h... yes
2022-05-13T19:08:23.3517580Z checking size of short... 2
2022-05-13T19:08:23.8944086Z checking size of int... 4
2022-05-13T19:08:24.4741599Z checking size of long... 8
2022-05-13T19:08:25.0311423Z checking size of long long... 8
2022-05-13T19:08:25.5657276Z checking size of wchar_t... 2
2022-05-13T19:08:26.1590281Z checking size of int *... 8
2022-05-13T19:08:26.7337845Z checking size of void *... 8
2022-05-13T19:08:26.8097609Z configure: Trying to force AVX512BW using default method (--enable-simd=avx512bw).
2022-05-13T19:08:27.2000507Z checking if gcc supports -mavx512bw w/ linking... yes
2022-05-13T19:08:27.6651061Z checking for extra ASFLAGS... None needed
2022-05-13T19:08:27.9292129Z checking for X32 ABI... no
2022-05-13T19:08:27.9635725Z checking special compiler flags... Intel x86
2022-05-13T19:08:27.9637761Z configure: Testing tool-chain's CPU support with given options
2022-05-13T19:08:28.4015196Z checking for MMX... yes
2022-05-13T19:08:28.9245649Z checking for SSE2... yes
2022-05-13T19:08:29.4317091Z checking for SSSE3... yes
2022-05-13T19:08:29.9356625Z checking for SSE4.1... yes
2022-05-13T19:08:30.4274447Z checking for SSE4.2... yes
2022-05-13T19:08:31.5503525Z checking for AVX... yes
2022-05-13T19:08:32.6803120Z checking for XOP... no
2022-05-13T19:08:33.8709386Z checking for AVX2... yes
2022-05-13T19:08:35.0121657Z checking for AVX512F... yes
2022-05-13T19:08:36.2143798Z checking for AVX512BW... yes
2022-05-13T19:08:36.2455157Z checking for arch.h alternative... x86-64.h
2022-05-13T19:08:36.2489168Z checking for byte ordering according to target triple... little
2022-05-13T19:08:36.2490738Z checking supplied paths for OpenSSL...  
2022-05-13T19:08:36.2491640Z checking additional paths for OpenSSL... none
2022-05-13T19:08:36.4918916Z checking openssl/opensslv.h usability... yes
2022-05-13T19:08:36.6269825Z checking openssl/opensslv.h presence... yes
2022-05-13T19:08:36.6272323Z checking for openssl/opensslv.h... yes
2022-05-13T19:08:37.0070021Z checking for SSL_CTX_new in -lssl... yes
2022-05-13T19:08:37.4192404Z checking for MD5_Update in -lcrypto... yes
2022-05-13T19:08:37.4245564Z checking for (non-free) ClamAV unrar code... yes
2022-05-13T19:08:37.9026576Z checking for sqrt in -lm... yes
2022-05-13T19:08:38.3265718Z checking for clock_gettime in -lrt... yes
2022-05-13T19:08:38.7630738Z checking for deflate in -lz... yes
2022-05-13T19:08:39.6834567Z checking for library containing crypt... -lcrypt
2022-05-13T19:08:40.0454898Z checking gmp.h usability... yes
2022-05-13T19:08:40.1984963Z checking gmp.h presence... yes
2022-05-13T19:08:40.1986946Z checking for gmp.h... yes
2022-05-13T19:08:40.6965776Z checking for __gmpz_init in -lgmp... yes
2022-05-13T19:08:41.0173753Z checking skey.h usability... no
2022-05-13T19:08:41.2414100Z checking skey.h presence... no
2022-05-13T19:08:41.2415349Z checking for skey.h... no
2022-05-13T19:08:41.2420956Z checking for S/Key... using our own code
2022-05-13T19:08:41.4787106Z checking bzlib.h usability... yes
2022-05-13T19:08:41.6324461Z checking bzlib.h presence... yes
2022-05-13T19:08:41.6325903Z checking for bzlib.h... yes
2022-05-13T19:08:42.0444136Z checking for main in -lbz2... yes
2022-05-13T19:08:42.4326519Z checking for main in -lkernel32... yes
2022-05-13T19:08:42.8833028Z checking for dlopen in -ldl... yes
2022-05-13T19:08:44.2863821Z checking intrin.h usability... yes
2022-05-13T19:08:44.7352625Z checking intrin.h presence... yes
2022-05-13T19:08:44.7354271Z checking for intrin.h... yes
2022-05-13T19:08:45.0912722Z checking openssl/cmac.h usability... yes
2022-05-13T19:08:45.3132166Z checking openssl/cmac.h presence... yes
2022-05-13T19:08:45.3133787Z checking for openssl/cmac.h... yes
2022-05-13T19:08:45.3339890Z configure: rexgen check not enabled
2022-05-13T19:08:45.7060688Z checking pcap.h usability... no
2022-05-13T19:08:45.9322299Z checking pcap.h presence... no
2022-05-13T19:08:45.9324877Z checking for pcap.h... no
2022-05-13T19:08:46.3342130Z checking pcap/pcap.h usability... no
2022-05-13T19:08:46.5795501Z checking pcap/pcap.h presence... no
2022-05-13T19:08:46.5797200Z checking for pcap/pcap.h... no
2022-05-13T19:08:46.6492445Z checking for pcap.h... (cached) no
2022-05-13T19:08:46.7087659Z checking for pcap/pcap.h... (cached) no
2022-05-13T19:08:46.9562868Z checking whether time.h and sys/time.h may both be included... yes
2022-05-13T19:08:47.1725794Z checking whether string.h and strings.h may both be included... yes
2022-05-13T19:08:47.6573577Z checking for SHA256... yes
2022-05-13T19:08:48.3029204Z checking for WHIRLPOOL... yes
2022-05-13T19:08:48.8667191Z checking for RIPEMD160... yes
2022-05-13T19:08:49.4464518Z checking for AES_encrypt... yes
2022-05-13T19:08:50.0654504Z checking for DSA_get0_pqg... yes
2022-05-13T19:08:51.1547294Z checking for gcc option to support OpenMP... -fopenmp
2022-05-13T19:08:51.1554612Z checking additional paths for OpenCL... none
2022-05-13T19:08:51.4384102Z checking if compiler needs -Werror to reject unknown flags... no
2022-05-13T19:08:52.1021839Z checking for the pthreads library -lpthreads... no
2022-05-13T19:08:52.6097436Z checking whether pthreads work without any flags... yes
2022-05-13T19:08:53.0446621Z checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
2022-05-13T19:08:53.0448173Z checking if more special flags are required for pthreads... no
2022-05-13T19:08:53.3612097Z checking for PTHREAD_PRIO_INHERIT... no
2022-05-13T19:08:53.6506659Z checking whether we are using the Microsoft C compiler... no
2022-05-13T19:08:54.0372008Z checking CL/cl.h usability... yes
2022-05-13T19:08:54.2344239Z checking CL/cl.h presence... yes
2022-05-13T19:08:54.2346071Z checking for CL/cl.h... yes
2022-05-13T19:08:54.7485204Z checking OpenCL/cl.h usability... no
2022-05-13T19:08:54.9894282Z checking OpenCL/cl.h presence... no
2022-05-13T19:08:54.9896608Z checking for OpenCL/cl.h... no
2022-05-13T19:08:57.8090613Z checking windows.h usability... yes
2022-05-13T19:08:59.2524310Z checking windows.h presence... yes
2022-05-13T19:08:59.2535797Z checking for windows.h... yes
2022-05-13T19:08:59.8101407Z checking for OpenCL library... -lOpenCL
2022-05-13T19:09:00.2056553Z checking arpa/inet.h usability... yes
2022-05-13T19:09:00.3667731Z checking arpa/inet.h presence... yes
2022-05-13T19:09:00.3670174Z checking for arpa/inet.h... yes
2022-05-13T19:09:00.7735446Z checking crypt.h usability... yes
2022-05-13T19:09:00.9290867Z checking crypt.h presence... yes
2022-05-13T19:09:00.9292392Z checking for crypt.h... yes
2022-05-13T19:09:01.3813390Z checking dirent.h usability... yes
2022-05-13T19:09:01.5408501Z checking dirent.h presence... yes
2022-05-13T19:09:01.5410115Z checking for dirent.h... yes
2022-05-13T19:09:01.9134910Z checking limits.h usability... yes
2022-05-13T19:09:02.0469878Z checking limits.h presence... yes
2022-05-13T19:09:02.0473335Z checking for limits.h... yes
2022-05-13T19:09:02.4592150Z checking locale.h usability... yes
2022-05-13T19:09:02.5994991Z checking locale.h presence... yes
2022-05-13T19:09:02.5996815Z checking for locale.h... yes
2022-05-13T19:09:03.0117720Z checking malloc.h usability... yes
2022-05-13T19:09:03.1511496Z checking malloc.h presence... yes
2022-05-13T19:09:03.1512844Z checking for malloc.h... yes
2022-05-13T19:09:03.6160315Z checking net/ethernet.h usability... no
2022-05-13T19:09:03.8387858Z checking net/ethernet.h presence... no
2022-05-13T19:09:03.8389458Z checking for net/ethernet.h... no
2022-05-13T19:09:04.1990056Z checking netdb.h usability... yes
2022-05-13T19:09:04.3640764Z checking netdb.h presence... yes
2022-05-13T19:09:04.3642730Z checking for netdb.h... yes
2022-05-13T19:09:04.7552712Z checking netinet/in.h usability... yes
2022-05-13T19:09:04.9042331Z checking netinet/in.h presence... yes
2022-05-13T19:09:04.9044614Z checking for netinet/in.h... yes
2022-05-13T19:09:05.4105633Z checking netinet/in_systm.h usability... yes
2022-05-13T19:09:05.5714386Z checking netinet/in_systm.h presence... yes
2022-05-13T19:09:05.5715849Z checking for netinet/in_systm.h... yes
2022-05-13T19:09:05.7403273Z checking for string.h... (cached) yes
2022-05-13T19:09:05.8998928Z checking for strings.h... (cached) yes
2022-05-13T19:09:06.3753723Z checking sys/ethernet.h usability... no
2022-05-13T19:09:06.5905229Z checking sys/ethernet.h presence... no
2022-05-13T19:09:06.5906798Z checking for sys/ethernet.h... no
2022-05-13T19:09:06.9058751Z checking sys/file.h usability... yes
2022-05-13T19:09:07.0727088Z checking sys/file.h presence... yes
2022-05-13T19:09:07.0728934Z checking for sys/file.h... yes
2022-05-13T19:09:07.4428685Z checking sys/param.h usability... yes
2022-05-13T19:09:07.5843351Z checking sys/param.h presence... yes
2022-05-13T19:09:07.5846014Z checking for sys/param.h... yes
2022-05-13T19:09:07.9808873Z checking sys/socket.h usability... yes
2022-05-13T19:09:08.1301578Z checking sys/socket.h presence... yes
2022-05-13T19:09:08.1303972Z checking for sys/socket.h... yes
2022-05-13T19:09:08.5043043Z checking sys/time.h usability... yes
2022-05-13T19:09:08.6600233Z checking sys/time.h presence... yes
2022-05-13T19:09:08.6601627Z checking for sys/time.h... yes
2022-05-13T19:09:09.0349796Z checking sys/times.h usability... yes
2022-05-13T19:09:09.1757044Z checking sys/times.h presence... yes
2022-05-13T19:09:09.1759653Z checking for sys/times.h... yes
2022-05-13T19:09:09.3424006Z checking for sys/types.h... (cached) yes
2022-05-13T19:09:09.7215193Z checking termios.h usability... yes
2022-05-13T19:09:09.8722817Z checking termios.h presence... yes
2022-05-13T19:09:09.8724129Z checking for termios.h... yes
2022-05-13T19:09:10.0071310Z checking for unistd.h... (cached) yes
2022-05-13T19:09:10.4676016Z checking unixlib/local.h usability... no
2022-05-13T19:09:10.6913105Z checking unixlib/local.h presence... no
2022-05-13T19:09:10.6914824Z checking for unixlib/local.h... no
2022-05-13T19:09:10.7532041Z checking for windows.h... (cached) yes
2022-05-13T19:09:11.0432056Z checking for net/if.h... yes
2022-05-13T19:09:11.3591601Z checking for net/if_arp.h... no
2022-05-13T19:09:11.6522233Z checking for netinet/if_ether.h... no
2022-05-13T19:09:11.8481243Z checking for netinet/ip.h... yes
2022-05-13T19:09:12.3428666Z checking for stdbool.h that conforms to C99... yes
2022-05-13T19:09:12.9335281Z checking for _Bool... yes
2022-05-13T19:09:13.1247229Z checking for inline... inline
2022-05-13T19:09:13.7131053Z checking for int32_t... yes
2022-05-13T19:09:14.3149346Z checking for int64_t... yes
2022-05-13T19:09:14.8519268Z checking for off_t... yes
2022-05-13T19:09:15.4592123Z checking for size_t... yes
2022-05-13T19:09:16.0386983Z checking for ssize_t... yes
2022-05-13T19:09:16.3159942Z checking for uint16_t... yes
2022-05-13T19:09:16.5840789Z checking for uint32_t... yes
2022-05-13T19:09:16.8324939Z checking for uint64_t... yes
2022-05-13T19:09:17.1075566Z checking for uint8_t... yes
2022-05-13T19:09:17.7101025Z checking for ptrdiff_t... yes
2022-05-13T19:09:18.0606417Z checking for int128... no
2022-05-13T19:09:18.6762535Z checking for __int128... yes
2022-05-13T19:09:19.2979421Z checking for __int128_t... yes
2022-05-13T19:09:19.7276581Z checking for error_at_line... yes
2022-05-13T19:09:20.3148230Z checking for pid_t... yes
2022-05-13T19:09:20.6403259Z checking vfork.h usability... no
2022-05-13T19:09:20.8488776Z checking vfork.h presence... no
2022-05-13T19:09:20.8490975Z checking for vfork.h... no
2022-05-13T19:09:21.4087821Z checking for fork... yes
2022-05-13T19:09:21.9489364Z checking for vfork... yes
2022-05-13T19:09:22.5447325Z checking for working fork... yes
2022-05-13T19:09:22.5448738Z checking for working vfork... (cached) yes
2022-05-13T19:09:23.0827245Z checking for fseek64... no
2022-05-13T19:09:23.5391117Z checking for fseeko... yes
2022-05-13T19:09:24.1467887Z checking for fseeko64... no
2022-05-13T19:09:24.6860274Z checking for _fseeki64... no
2022-05-13T19:09:25.2425517Z checking for lseek64... no
2022-05-13T19:09:25.6993011Z checking for lseek... yes
2022-05-13T19:09:26.3406884Z checking for ftell64... no
2022-05-13T19:09:26.8146450Z checking for ftello... yes
2022-05-13T19:09:27.4585816Z checking for ftello64... no
2022-05-13T19:09:27.9990798Z checking for _ftelli64... no
2022-05-13T19:09:28.5676775Z checking for fopen64... no
2022-05-13T19:09:29.0960352Z checking for _fopen64... no
2022-05-13T19:09:29.5235249Z checking for memmem... yes
2022-05-13T19:09:30.0310431Z checking for mmap... yes
2022-05-13T19:09:30.5591582Z checking for sleep... yes
2022-05-13T19:09:31.0991699Z checking for setenv... yes
2022-05-13T19:09:31.6461993Z checking for putenv... yes
2022-05-13T19:09:32.2423960Z checking for strcasecmp... yes
2022-05-13T19:09:32.8324085Z checking for strncasecmp... yes
2022-05-13T19:09:33.4021708Z checking for stricmp... no
2022-05-13T19:09:33.8818695Z checking for strcmpi... no
2022-05-13T19:09:34.4082203Z checking for _stricmp... no
2022-05-13T19:09:34.9122563Z checking for _strcmpi... no
2022-05-13T19:09:35.4420161Z checking for strnicmp... no
2022-05-13T19:09:35.9906087Z checking for strncmpi... no
2022-05-13T19:09:36.5053714Z checking for _strnicmp... no
2022-05-13T19:09:37.0091572Z checking for _strncmpi... no
2022-05-13T19:09:37.5422432Z checking for strnlen... yes
2022-05-13T19:09:38.1111946Z checking for strlwr... yes
2022-05-13T19:09:38.7486532Z checking for strupr... yes
2022-05-13T19:09:39.3796092Z checking for strrev... no
2022-05-13T19:09:39.8254994Z checking for atoll... yes
2022-05-13T19:09:40.4778643Z checking for _atoi64... no
2022-05-13T19:09:41.0384941Z checking for snprintf... yes
2022-05-13T19:09:41.6892684Z checking for sprintf_s... no
2022-05-13T19:09:42.1587067Z checking for strcasestr... yes
2022-05-13T19:09:42.6305174Z checking for clGetKernelArgInfo... yes
2022-05-13T19:09:43.1906514Z checking for posix_memalign... yes
2022-05-13T19:09:43.6301230Z checking for yasm that supports "-f win64"... 
2022-05-13T19:09:43.6318829Z checking for *2john helper type... .exe (symlink.c)
2022-05-13T19:09:44.0383938Z checking for _get_osfhandle... yes
2022-05-13T19:09:47.0137330Z checking for GetFileSizeEx... yes
2022-05-13T19:09:47.0351064Z checking for OS-specific feature macros needed...  -D_GNU_SOURCE -D__CYGWIN64__ -D__CYGWIN32__
2022-05-13T19:09:47.6427236Z checking size of size_t... 8
2022-05-13T19:09:48.4605349Z checking size of off_t... 8
2022-05-13T19:09:48.5116102Z configure: Fuzz check disabled
2022-05-13T19:09:48.5117426Z configure: Fuzzing (using libFuzzer) check disabled
2022-05-13T19:09:48.5303998Z configure: creating *_plug.c and OpenCL object rules
2022-05-13T19:09:48.6499295Z configure: creating Makefile dependencies
2022-05-13T19:09:51.8624948Z configure: creating ./john_build_rule.h
2022-05-13T19:09:52.1762248Z configure: creating ./config.status
2022-05-13T19:09:54.1722674Z config.status: creating Makefile
2022-05-13T19:09:54.4827733Z config.status: creating aes/Makefile
2022-05-13T19:09:54.8388404Z config.status: creating aes/aesni/Makefile
2022-05-13T19:09:55.1895159Z config.status: creating aes/openssl/Makefile
2022-05-13T19:09:55.5498949Z config.status: creating secp256k1/Makefile
2022-05-13T19:09:55.8925866Z config.status: creating ed25519-donna/Makefile
2022-05-13T19:09:56.2648189Z config.status: creating poly1305-donna/Makefile
2022-05-13T19:09:56.6185469Z config.status: creating autoconfig.h
2022-05-13T19:09:56.7455854Z config.status: autoconfig.h is unchanged
2022-05-13T19:09:56.8203600Z config.status: linking x86-64.h to arch.h
2022-05-13T19:09:56.9062836Z config.status: executing default commands
2022-05-13T19:09:56.9348736Z configure: creating ./fmt_externs.h
2022-05-13T19:10:07.7338699Z configure: creating ./fmt_registers.h
2022-05-13T19:10:20.8907007Z 
2022-05-13T19:10:20.8913101Z Configured for building John the Ripper jumbo:
2022-05-13T19:10:20.8916710Z 
2022-05-13T19:10:20.8921167Z Target CPU ......................................... x86_64 AVX512BW, 64-bit LE
2022-05-13T19:10:20.8922806Z AES-NI support ..................................... depends on OpenSSL
2022-05-13T19:10:20.8923957Z Target OS .......................................... cygwin
2022-05-13T19:10:20.8925003Z Cross compiling .................................... no
2022-05-13T19:10:20.8927831Z Legacy arch header ................................. x86-64.h
2022-05-13T19:10:20.8929251Z 
2022-05-13T19:10:20.8930450Z Optional libraries/features found:
2022-05-13T19:10:20.8931372Z Memory map (share/page large files) ................ yes
2022-05-13T19:10:20.8932502Z Fork support ....................................... yes
2022-05-13T19:10:20.8933498Z OpenMP support ..................................... yes (not for fast formats)
2022-05-13T19:10:20.8934615Z OpenCL support ..................................... yes
2022-05-13T19:10:20.8935511Z Generic crypt(3) format ............................ yes
2022-05-13T19:10:20.8936386Z OpenSSL (many additional formats) .................. yes
2022-05-13T19:10:20.8937206Z libgmp (PRINCE mode and faster SRP formats) ........ yes
2022-05-13T19:10:20.8937993Z 128-bit integer (faster PRINCE mode) ............... yes
2022-05-13T19:10:20.8938987Z libz (7z, pkzip and some other formats) ............ yes
2022-05-13T19:10:20.8939716Z libbz2 (7z and gpg2john bz2 support) ............... yes
2022-05-13T19:10:20.8940481Z libpcap (vncpcap2john and SIPdump) ................. no
2022-05-13T19:10:20.8941327Z Non-free unrar code (complete RAR support) ......... yes
2022-05-13T19:10:20.8942366Z librexgen (regex mode, see doc/README.librexgen) ... no
2022-05-13T19:10:20.8943097Z OpenMPI support (default disabled) ................. no
2022-05-13T19:10:20.8943872Z Experimental code (default disabled) ............... no
2022-05-13T19:10:20.8944631Z ZTEX USB-FPGA module 1.15y support ................. no
2022-05-13T19:10:20.8944991Z 
2022-05-13T19:10:20.8946151Z Install missing libraries to get any needed features that were omitted.
2022-05-13T19:10:20.8946555Z 
2022-05-13T19:10:20.8947135Z Configure finished.  Now "make -s clean && make -sj4" to compile.
2022-05-13T19:12:05.0150485Z md_helper.c: In function ‘ripemd_short’:
2022-05-13T19:12:05.0155265Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.0156611Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.0157586Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.0158576Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.0159771Z       |                         ^~~~
2022-05-13T19:12:05.0161678Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.0163370Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.0165395Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.0166595Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.0167433Z       |                         ^~~~
2022-05-13T19:12:05.0168274Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T19:12:05.0169227Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.0169881Z       | ^~~~~~~~~~~~
2022-05-13T19:12:05.0667894Z md_helper.c: In function ‘ripemd128_short’:
2022-05-13T19:12:05.0669881Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.0670853Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.0672057Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.0673565Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.0674337Z       |                         ^~~~
2022-05-13T19:12:05.0675364Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.0676217Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.0677698Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.0678551Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.0679349Z       |                         ^~~~
2022-05-13T19:12:05.0680117Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T19:12:05.0680953Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.0681668Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:05.8560127Z md_helper.c: In function ‘ripemd256_short’:
2022-05-13T19:12:05.8562356Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T19:12:05.8578233Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:05.8581436Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8583323Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.8587898Z       |                         ^~~~
2022-05-13T19:12:05.8591578Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.8594899Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:05.8603626Z md_helper.c:154:25: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8606469Z   154 |                         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.8607813Z       |                         ^~~~
2022-05-13T19:12:05.8609556Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T19:12:05.8610932Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T19:12:05.8612131Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:05.8613133Z md_helper.c: In function ‘sph_ripemd’:
2022-05-13T19:12:05.8614542Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.8615854Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.8617388Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8618582Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T19:12:05.8619508Z       |                 ^~~~
2022-05-13T19:12:05.8621077Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.8623181Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.8624430Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8626131Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T19:12:05.8627413Z       |                 ^~~~
2022-05-13T19:12:05.8628945Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T19:12:05.8630020Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.8631090Z       | ^~~~~~~~~~~~
2022-05-13T19:12:05.8632122Z In function ‘ripemd_addbits_and_close’,
2022-05-13T19:12:05.8639833Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T19:12:05.8643879Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T19:12:05.8648243Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.8652001Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.8653802Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8655193Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.8656488Z       |                 ^~~~
2022-05-13T19:12:05.8657558Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T19:12:05.8658847Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.8660366Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.8661411Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8662557Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.8663533Z       |                 ^~~~
2022-05-13T19:12:05.8664585Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T19:12:05.8665714Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.8668924Z       | ^~~~~~~~~~~~
2022-05-13T19:12:05.8674060Z In function ‘ripemd_addbits_and_close’,
2022-05-13T19:12:05.8676442Z     inlined from ‘ripemd_close’ at md_helper.c:345:2,
2022-05-13T19:12:05.8680321Z     inlined from ‘sph_ripemd_close’ at ripemd.c:288:2:
2022-05-13T19:12:05.8683020Z ripemd.c:276:16: warning: ‘ripemd_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.8684596Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.8686022Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8687294Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.8688264Z       |         ^~~~
2022-05-13T19:12:05.8689313Z md_helper.c: In function ‘sph_ripemd_close’:
2022-05-13T19:12:05.8690560Z ripemd.c:276:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.8691869Z   276 | #define RFUN   ripemd_round
2022-05-13T19:12:05.8693198Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8695048Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.8696251Z       |         ^~~~
2022-05-13T19:12:05.8697471Z ripemd.c:241:1: note: in a call to function ‘ripemd_round’
2022-05-13T19:12:05.8698988Z   241 | ripemd_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.8700211Z       | ^~~~~~~~~~~~
2022-05-13T19:12:05.8701352Z md_helper.c: In function ‘sph_ripemd128’:
2022-05-13T19:12:05.8702797Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.8704245Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.8705738Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8707225Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T19:12:05.8712612Z       |                 ^~~~
2022-05-13T19:12:05.8733276Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.8740988Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.8748694Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.8752209Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T19:12:05.8753474Z       |                 ^~~~
2022-05-13T19:12:05.8755749Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T19:12:05.8757905Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.8760228Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:05.9196179Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T19:12:05.9247482Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T19:12:05.9249651Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T19:12:05.9251131Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.9252239Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.9253169Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.9254450Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.9255827Z       |                 ^~~~
2022-05-13T19:12:05.9257389Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T19:12:05.9258703Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.9260509Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.9261583Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.9262521Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.9263678Z       |                 ^~~~
2022-05-13T19:12:05.9264589Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T19:12:05.9265727Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.9266558Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:05.9267371Z In function ‘ripemd128_addbits_and_close’,
2022-05-13T19:12:05.9268306Z     inlined from ‘ripemd128_close’ at md_helper.c:345:2,
2022-05-13T19:12:05.9269416Z     inlined from ‘sph_ripemd128_close’ at ripemd.c:612:2:
2022-05-13T19:12:05.9270760Z ripemd.c:600:16: warning: ‘ripemd128_round’ accessing 20 bytes in a region of size 16 [-Wstringop-overflow=]
2022-05-13T19:12:05.9271934Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.9272837Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.9273744Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.9274522Z       |         ^~~~
2022-05-13T19:12:05.9275261Z md_helper.c: In function ‘sph_ripemd128_close’:
2022-05-13T19:12:05.9277086Z ripemd.c:600:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:05.9278122Z   600 | #define RFUN   ripemd128_round
2022-05-13T19:12:05.9279070Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:05.9280011Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:05.9280807Z       |         ^~~~
2022-05-13T19:12:05.9282502Z ripemd.c:530:1: note: in a call to function ‘ripemd128_round’
2022-05-13T19:12:05.9283560Z   530 | ripemd128_round(const unsigned char *data, sph_u32 r[5])
2022-05-13T19:12:05.9284879Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:06.5908162Z md_helper.c: In function ‘sph_ripemd256’:
2022-05-13T19:12:06.5909999Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T19:12:06.5911174Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:06.5912069Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:06.5913023Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T19:12:06.5913817Z       |                 ^~~~
2022-05-13T19:12:06.5914852Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:06.5916193Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:06.5917203Z md_helper.c:206:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:06.5918101Z   206 |                 RFUN(data, SPH_VAL);
2022-05-13T19:12:06.5918860Z       |                 ^~~~
2022-05-13T19:12:06.5919615Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T19:12:06.5920624Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T19:12:06.5922359Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:06.6668494Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T19:12:06.6670197Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T19:12:06.6671305Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T19:12:06.6673257Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T19:12:06.6674353Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:06.6675084Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:06.6675857Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:06.6676674Z       |                 ^~~~
2022-05-13T19:12:06.6677426Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T19:12:06.6678230Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:06.6679675Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:06.6680515Z md_helper.c:266:17: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:06.6681289Z   266 |                 RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:06.6681884Z       |                 ^~~~
2022-05-13T19:12:06.6682644Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T19:12:06.6684006Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T19:12:06.6684815Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:12:06.6685721Z In function ‘ripemd256_addbits_and_close’,
2022-05-13T19:12:06.6686645Z     inlined from ‘ripemd256_close’ at md_helper.c:345:2,
2022-05-13T19:12:06.6687543Z     inlined from ‘sph_ripemd256_close’ at ripemd.c:639:2:
2022-05-13T19:12:06.6688735Z ripemd.c:626:16: warning: ‘ripemd256_round’ accessing 40 bytes in a region of size 32 [-Wstringop-overflow=]
2022-05-13T19:12:06.6689662Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:06.6690497Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:06.6691567Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:06.6692376Z       |         ^~~~
2022-05-13T19:12:06.6693061Z md_helper.c: In function ‘sph_ripemd256_close’:
2022-05-13T19:12:06.6693948Z ripemd.c:626:16: note: referencing argument 2 of type ‘sph_u32 *’ {aka ‘unsigned int *’}
2022-05-13T19:12:06.6694779Z   626 | #define RFUN   ripemd256_round
2022-05-13T19:12:06.6695659Z md_helper.c:322:9: note: in expansion of macro ‘RFUN’
2022-05-13T19:12:06.6696423Z   322 |         RFUN(sc->buf, SPH_VAL);
2022-05-13T19:12:06.6697050Z       |         ^~~~
2022-05-13T19:12:06.6697784Z ripemd.c:579:1: note: in a call to function ‘ripemd256_round’
2022-05-13T19:12:06.6698543Z   579 | ripemd256_round(const unsigned char *data, sph_u32 r[10])
2022-05-13T19:12:06.6699238Z       | ^~~~~~~~~~~~~~~
2022-05-13T19:13:25.4802017Z bks_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T19:13:25.4804124Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4805695Z   364 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T19:13:25.4808081Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4809568Z   365 |                                         MBEDTLS_PKCS12_DERIVE_IV,
2022-05-13T19:13:25.4810375Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4811117Z   366 |                                         keys,
2022-05-13T19:13:25.4811842Z       |                                         ~~~~~
2022-05-13T19:13:25.4812587Z   367 |                                         lens, cur_salt->salt,
2022-05-13T19:13:25.4814315Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4815195Z   368 |                                         cur_salt->saltlen, iv, 16);
2022-05-13T19:13:25.4817781Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4818984Z bks_fmt_plug.c:364:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:13:25.4820332Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4821680Z bks_fmt_plug.c:364:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:13:25.4823862Z bks_fmt_plug.c:364:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4825311Z bks_fmt_plug.c:364:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:13:25.4827405Z In file included from bks_fmt_plug.c:31:
2022-05-13T19:13:25.4828561Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:13:25.4829689Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:13:25.4831334Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4832875Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4834004Z   372 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T19:13:25.4835099Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4835816Z   373 |                                         MBEDTLS_PKCS12_DERIVE_KEY,
2022-05-13T19:13:25.4837644Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4838396Z   374 |                                         keys,
2022-05-13T19:13:25.4838979Z       |                                         ~~~~~
2022-05-13T19:13:25.4840350Z   375 |                                         lens, cur_salt->salt,
2022-05-13T19:13:25.4841071Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4841776Z   376 |                                         cur_salt->saltlen, ckey, 32);
2022-05-13T19:13:25.4842481Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4843295Z bks_fmt_plug.c:372:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:13:25.4845143Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4868482Z bks_fmt_plug.c:372:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:13:25.4870203Z bks_fmt_plug.c:372:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4871676Z bks_fmt_plug.c:372:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:13:25.4874162Z In file included from bks_fmt_plug.c:31:
2022-05-13T19:13:25.4876013Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:13:25.4878715Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:13:25.4883605Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4891168Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4893564Z   333 |                         pkcs12_pbe_derive_key_simd(1, cur_salt->iteration_count,
2022-05-13T19:13:25.4894717Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4896869Z   334 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY,
2022-05-13T19:13:25.4897739Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4898496Z   335 |                                         keys, lens, cur_salt->salt,
2022-05-13T19:13:25.4900530Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4901471Z   336 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:13:25.4902297Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:13:25.4905475Z bks_fmt_plug.c:333:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:13:25.4906633Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4908999Z bks_fmt_plug.c:333:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:13:25.4910178Z bks_fmt_plug.c:333:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:13:25.4911208Z bks_fmt_plug.c:333:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:13:25.4914068Z In file included from bks_fmt_plug.c:31:
2022-05-13T19:13:25.4914934Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:13:25.4917573Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:13:25.4921008Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0954241Z pfx_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T19:15:27.0956436Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T19:15:27.0958025Z   268 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T19:15:27.0959881Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0961352Z   269 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:15:27.0963272Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0964998Z   270 |                                         lens, cur_salt->salt,
2022-05-13T19:15:27.0966167Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0967142Z   271 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:15:27.0968090Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0969232Z pfx_fmt_plug.c:268:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:15:27.0971592Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T19:15:27.0973194Z pfx_fmt_plug.c:268:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:15:27.0975032Z pfx_fmt_plug.c:268:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 64 [-Wstringop-overflow=]
2022-05-13T19:15:27.0976445Z pfx_fmt_plug.c:268:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:15:27.0977523Z In file included from pfx_fmt_plug.c:33:
2022-05-13T19:15:27.0978547Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:15:27.0980321Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:15:27.0981703Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0991600Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:15:27.0993185Z   245 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T19:15:27.0994387Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0995483Z   246 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:15:27.0996408Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.0997332Z   247 |                                         lens, cur_salt->salt,
2022-05-13T19:15:27.0998468Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1000259Z   248 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:15:27.1001486Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1002572Z pfx_fmt_plug.c:245:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:15:27.1003982Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:15:27.1005607Z pfx_fmt_plug.c:245:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:15:27.1007084Z pfx_fmt_plug.c:245:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:15:27.1008350Z pfx_fmt_plug.c:245:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:15:27.1010019Z In file included from pfx_fmt_plug.c:33:
2022-05-13T19:15:27.1011298Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:15:27.1012554Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:15:27.1013686Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1017904Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:15:27.1020046Z   223 |                         pkcs12_pbe_derive_key_simd(cur_salt->mac_algo, cur_salt->iteration_count,
2022-05-13T19:15:27.1021657Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1022769Z   224 |                                         MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:15:27.1023764Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1024645Z   225 |                                         lens, cur_salt->salt,
2022-05-13T19:15:27.1025512Z       |                                         ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1026442Z   226 |                                         cur_salt->saltlen, mackey, mackeylen);
2022-05-13T19:15:27.1027399Z       |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:15:27.1028441Z pfx_fmt_plug.c:223:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:15:27.1030358Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:15:27.1031975Z pfx_fmt_plug.c:223:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:15:27.1033377Z pfx_fmt_plug.c:223:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:15:27.1034677Z pfx_fmt_plug.c:223:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:15:27.1035647Z In file included from pfx_fmt_plug.c:33:
2022-05-13T19:15:27.1036684Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:15:27.1037976Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:15:27.1039093Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5458761Z sap_pse_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T19:16:04.5462248Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:04.5463939Z   116 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T19:16:04.5464908Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5465663Z   117 |                                 cur_salt->iterations,
2022-05-13T19:16:04.5467145Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5468660Z   118 |                                 MBEDTLS_PKCS12_DERIVE_KEY, (const unsigned char **)pin, lens,
2022-05-13T19:16:04.5470957Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5472029Z   119 |                                 cur_salt->salt, cur_salt->salt_size, pout, 24);
2022-05-13T19:16:04.5473039Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5474339Z sap_pse_fmt_plug.c:116:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:16:04.5475883Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:04.5477511Z sap_pse_fmt_plug.c:116:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:16:04.5480575Z sap_pse_fmt_plug.c:116:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:04.5482621Z sap_pse_fmt_plug.c:116:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:16:04.5483734Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T19:16:04.5484791Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:16:04.5485950Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:16:04.5487382Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5488580Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:04.5492405Z   121 |                 pkcs12_pbe_derive_key_simd(1,
2022-05-13T19:16:04.5493255Z       |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5494031Z   122 |                                 cur_salt->iterations,
2022-05-13T19:16:04.5494893Z       |                                 ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5495783Z   123 |                                 MBEDTLS_PKCS12_DERIVE_IV, (const unsigned char **)pin, clens,
2022-05-13T19:16:04.5497109Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5498668Z   124 |                                 cur_salt->salt, cur_salt->salt_size, iout, 8);
2022-05-13T19:16:04.5500640Z       |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:04.5501713Z sap_pse_fmt_plug.c:121:17: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:16:04.5503055Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:04.5504435Z sap_pse_fmt_plug.c:121:17: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:16:04.5505868Z sap_pse_fmt_plug.c:121:17: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:04.5507503Z sap_pse_fmt_plug.c:121:17: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:16:04.5508523Z In file included from sap_pse_fmt_plug.c:43:
2022-05-13T19:16:04.5510076Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:16:04.5511343Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:16:04.5512451Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1718972Z zed_fmt_plug.c: In function ‘crypt_all._omp_fn.0’:
2022-05-13T19:16:42.1721316Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:42.1723000Z   150 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T19:16:42.1724539Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1725570Z   151 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:16:42.1726527Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1727420Z   152 |                                                    lens, cur_salt->salt,
2022-05-13T19:16:42.1728285Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1729080Z   153 |                                                    salt_len, mackey,
2022-05-13T19:16:42.1729841Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1731187Z   154 |                                                    BINARY_SIZE);
2022-05-13T19:16:42.1732457Z       |                                                    ~~~~~~~~~~~~
2022-05-13T19:16:42.1733981Z zed_fmt_plug.c:150:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:16:42.1735970Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:42.1737611Z zed_fmt_plug.c:150:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:16:42.1739031Z zed_fmt_plug.c:150:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:42.1740340Z zed_fmt_plug.c:150:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:16:42.1741643Z In file included from zed_fmt_plug.c:30:
2022-05-13T19:16:42.1744099Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:16:42.1745427Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:16:42.1746612Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1747859Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:42.1749138Z   135 |                         pkcs12_pbe_derive_key_simd(algo, cur_salt->iteration_count,
2022-05-13T19:16:42.1750170Z       |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1751125Z   136 |                                                    MBEDTLS_PKCS12_DERIVE_MAC_KEY, keys,
2022-05-13T19:16:42.1752248Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1753245Z   137 |                                                    lens, cur_salt->salt,
2022-05-13T19:16:42.1754133Z       |                                                    ~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1755012Z   138 |                                                    salt_len, mackey,
2022-05-13T19:16:42.1755833Z       |                                                    ~~~~~~~~~~~~~~~~~
2022-05-13T19:16:42.1756697Z   139 |                                                    BINARY_SIZE);
2022-05-13T19:16:42.1757775Z       |                                                    ~~~~~~~~~~~~
2022-05-13T19:16:42.1758833Z zed_fmt_plug.c:135:25: note: referencing argument 4 of type ‘const unsigned char **’
2022-05-13T19:16:42.1760178Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:42.1761422Z zed_fmt_plug.c:135:25: note: referencing argument 5 of type ‘size_t *’ {aka ‘long unsigned int *’}
2022-05-13T19:16:42.1762838Z zed_fmt_plug.c:135:25: warning: ‘pkcs12_pbe_derive_key_simd’ accessing 26880 bytes in a region of size 128 [-Wstringop-overflow=]
2022-05-13T19:16:42.1763979Z zed_fmt_plug.c:135:25: note: referencing argument 8 of type ‘unsigned char **’
2022-05-13T19:16:42.1765086Z In file included from zed_fmt_plug.c:30:
2022-05-13T19:16:42.1765932Z pkcs12.h:54:5: note: in a call to function ‘pkcs12_pbe_derive_key_simd’
2022-05-13T19:16:42.1766978Z    54 | int pkcs12_pbe_derive_key_simd( int md_type, int iterations, int id, const unsigned char *pwd[SIMD_MAX_GROUP_PFX],
2022-05-13T19:16:42.1767894Z       |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
2022-05-13T19:17:23.7401078Z In file included from subsets.c:25:
2022-05-13T19:17:23.7402773Z subsets.c: In function ‘do_subsets_crack’:
2022-05-13T19:17:23.7406287Z subsets.c:498:68: warning: array subscript has type ‘char’ [-Wchar-subscripts]
2022-05-13T19:17:23.7408033Z   498 |                 if (strlen(req_charset) == 1 && isdigit(req_charset[0])) {
2022-05-13T19:17:23.7409489Z       |                                                         ~~~~~~~~~~~^~~
2022-05-13T19:20:12.1295880Z ar: creating aes.a
2022-05-13T19:20:24.8596858Z ar: creating secp256k1.a
2022-05-13T19:20:33.4372698Z ar: creating poly1305-donna.a
2022-05-13T19:20:33.6539678Z ar: creating ed25519-donna.a
2022-05-13T19:21:10.1303657Z 
2022-05-13T19:21:10.1496614Z Make process completed.
2022-05-13T19:21:11.6063807Z 
2022-05-13T19:21:11.6310169Z Make process completed.
2022-05-13T19:21:11.6591466Z Stripping executables.
2022-05-13T19:21:12.4173471Z Executing 'mkdir -p ../etc/OpenCL/vendors'
2022-05-13T19:21:12.6749202Z Executing 'echo 'c:\Windows\System32\amdocl64.dll' > ../etc/OpenCL/vendors/amd.icd'
2022-05-13T19:21:12.9302654Z Executing 'echo 'c:\Windows\System32\nvopencl.dll' > ../etc/OpenCL/vendors/nvidia.icd'
2022-05-13T19:21:13.1873904Z Executing 'echo 'c:\Windows\System32\IntelOpenCL64.dll' > ../etc/OpenCL/vendors/intel.icd'
2022-05-13T19:21:13.4601347Z Executing 'cp ../run/john-avx512bw.exe ../run/john.exe'
2022-05-13T19:21:13.7244432Z Executing 'make -s windows-package'
2022-05-13T19:21:15.3780009Z 
2022-05-13T19:21:15.4027627Z Make process completed.
2022-05-13T19:21:15.4297775Z Make JtR suitable for Windows.
2022-05-13T19:21:21.4379996Z '../doc/CHANGES' -> '../doc/CHANGES.txt'
2022-05-13T19:21:21.4566021Z '../doc/CHANGES-jumbo' -> '../doc/CHANGES-jumbo.txt'
2022-05-13T19:21:21.4801785Z '../doc/CONFIG' -> '../doc/CONFIG.txt'
2022-05-13T19:21:21.5048334Z '../doc/CONTACT' -> '../doc/CONTACT.txt'
2022-05-13T19:21:21.5246510Z '../doc/COPYING' -> '../doc/COPYING.txt'
2022-05-13T19:21:21.5542187Z '../doc/CREDITS' -> '../doc/CREDITS.txt'
2022-05-13T19:21:21.5758233Z '../doc/CREDITS-jumbo' -> '../doc/CREDITS-jumbo.txt'
2022-05-13T19:21:21.6066555Z '../doc/DYNAMIC' -> '../doc/DYNAMIC.txt'
2022-05-13T19:21:21.6432387Z '../doc/DYNAMIC_EXPRESSIONS' -> '../doc/DYNAMIC_EXPRESSIONS.txt'
2022-05-13T19:21:21.6665960Z '../doc/DYNAMIC_SCRIPTING' -> '../doc/DYNAMIC_SCRIPTING.txt'
2022-05-13T19:21:21.6884183Z '../doc/ENCODINGS' -> '../doc/ENCODINGS.txt'
2022-05-13T19:21:21.7125421Z '../doc/EXAMPLES' -> '../doc/EXAMPLES.txt'
2022-05-13T19:21:21.7348671Z '../doc/EXTERNAL' -> '../doc/EXTERNAL.txt'
2022-05-13T19:21:21.7597993Z '../doc/FAQ' -> '../doc/FAQ.txt'
2022-05-13T19:21:21.7841038Z '../doc/HDAA_README' -> '../doc/HDAA_README.txt'
2022-05-13T19:21:21.8078822Z '../doc/INSTALL' -> '../doc/INSTALL.txt'
2022-05-13T19:21:21.8302738Z '../doc/INSTALL-FEDORA' -> '../doc/INSTALL-FEDORA.txt'
2022-05-13T19:21:21.8565656Z '../doc/INSTALL-UBUNTU' -> '../doc/INSTALL-UBUNTU.txt'
2022-05-13T19:21:21.8887613Z '../doc/INSTALL-WINDOWS' -> '../doc/INSTALL-WINDOWS.txt'
2022-05-13T19:21:21.9145654Z '../doc/LICENSE' -> '../doc/LICENSE.txt'
2022-05-13T19:21:21.9500219Z '../doc/LICENSE.mpi' -> '../doc/LICENSE.mpi.txt'
2022-05-13T19:21:21.9708707Z '../doc/MARKOV' -> '../doc/MARKOV.txt'
2022-05-13T19:21:21.9923152Z '../doc/MASK' -> '../doc/MASK.txt'
2022-05-13T19:21:22.0167181Z '../doc/MODES' -> '../doc/MODES.txt'
2022-05-13T19:21:22.0453844Z '../doc/NETNTLM_README' -> '../doc/NETNTLM_README.txt'
2022-05-13T19:21:22.0804028Z '../doc/NEWS' -> '../doc/NEWS.txt'
2022-05-13T19:21:22.1061672Z '../doc/OFFICE' -> '../doc/OFFICE.txt'
2022-05-13T19:21:22.1365883Z '../doc/OPTIONS' -> '../doc/OPTIONS.txt'
2022-05-13T19:21:22.1563062Z '../doc/pass_gen.Manifest' -> '../doc/pass_gen.Manifest.txt'
2022-05-13T19:21:22.1806200Z '../doc/pcap2john.readme' -> '../doc/pcap2john.readme.txt'
2022-05-13T19:21:22.2024893Z '../doc/PRINCE' -> '../doc/PRINCE.txt'
2022-05-13T19:21:22.2264767Z '../doc/README-CUDA' -> '../doc/README-CUDA.txt'
2022-05-13T19:21:22.2475140Z '../doc/README-DISTROS' -> '../doc/README-DISTROS.txt'
2022-05-13T19:21:22.2674876Z '../doc/README-krb5-18-23' -> '../doc/README-krb5-18-23.txt'
2022-05-13T19:21:22.2905082Z '../doc/README-MIC' -> '../doc/README-MIC.txt'
2022-05-13T19:21:22.3206855Z '../doc/README-OPENCL' -> '../doc/README-OPENCL.txt'
2022-05-13T19:21:22.3538581Z '../doc/README-PDF' -> '../doc/README-PDF.txt'
2022-05-13T19:21:22.3829121Z '../doc/README-PST' -> '../doc/README-PST.txt'
2022-05-13T19:21:22.4114907Z '../doc/README-TACACS+' -> '../doc/README-TACACS+.txt'
2022-05-13T19:21:22.4361954Z '../doc/README-ZIP' -> '../doc/README-ZIP.txt'
2022-05-13T19:21:22.4571459Z '../doc/README-ZTEX' -> '../doc/README-ZTEX.txt'
2022-05-13T19:21:22.4823753Z '../doc/README.apex' -> '../doc/README.apex.txt'
2022-05-13T19:21:22.5178516Z '../doc/README.Apple_DMG' -> '../doc/README.Apple_DMG.txt'
2022-05-13T19:21:22.5476437Z '../doc/README.bash-completion' -> '../doc/README.bash-completion.txt'
2022-05-13T19:21:22.5746546Z '../doc/README.bitcoin' -> '../doc/README.bitcoin.txt'
2022-05-13T19:21:22.6052314Z '../doc/README.BitLocker' -> '../doc/README.BitLocker.txt'
2022-05-13T19:21:22.6307808Z '../doc/README.coding-style' -> '../doc/README.coding-style.txt'
2022-05-13T19:21:22.6541445Z '../doc/README.cprepair' -> '../doc/README.cprepair.txt'
2022-05-13T19:21:22.6769640Z '../doc/README.Ethereum' -> '../doc/README.Ethereum.txt'
2022-05-13T19:21:22.6958369Z '../doc/README.FileVault2' -> '../doc/README.FileVault2.txt'
2022-05-13T19:21:22.7165596Z '../doc/README.format-epi' -> '../doc/README.format-epi.txt'
2022-05-13T19:21:22.7418698Z '../doc/README.FreeBSD' -> '../doc/README.FreeBSD.txt'
2022-05-13T19:21:22.7699521Z '../doc/README.gpg' -> '../doc/README.gpg.txt'
2022-05-13T19:21:22.7963875Z '../doc/README.IBM_AS400' -> '../doc/README.IBM_AS400.txt'
2022-05-13T19:21:22.8176030Z '../doc/README.ios7' -> '../doc/README.ios7.txt'
2022-05-13T19:21:22.8397270Z '../doc/README.keychain' -> '../doc/README.keychain.txt'
2022-05-13T19:21:22.8740641Z '../doc/README.keyring' -> '../doc/README.keyring.txt'
2022-05-13T19:21:22.9159027Z '../doc/README.keystore' -> '../doc/README.keystore.txt'
2022-05-13T19:21:22.9536760Z '../doc/README.kwallet' -> '../doc/README.kwallet.txt'
2022-05-13T19:21:22.9812087Z '../doc/README.librexgen' -> '../doc/README.librexgen.txt'
2022-05-13T19:21:23.0236889Z '../doc/README.LotusNotes' -> '../doc/README.LotusNotes.txt'
2022-05-13T19:21:23.0692747Z '../doc/README.LUKS' -> '../doc/README.LUKS.txt'
2022-05-13T19:21:23.1106458Z '../doc/README.MinGW' -> '../doc/README.MinGW.txt'
2022-05-13T19:21:23.1361879Z '../doc/README.mozilla' -> '../doc/README.mozilla.txt'
2022-05-13T19:21:23.1647297Z '../doc/README.mpi' -> '../doc/README.mpi.txt'
2022-05-13T19:21:23.1890610Z '../doc/README.pwsafe' -> '../doc/README.pwsafe.txt'
2022-05-13T19:21:23.2155290Z '../doc/README.RACF' -> '../doc/README.RACF.txt'
2022-05-13T19:21:23.2389160Z '../doc/README.restic' -> '../doc/README.restic.txt'
2022-05-13T19:21:23.2743200Z '../doc/README.ssh' -> '../doc/README.ssh.txt'
2022-05-13T19:21:23.3045669Z '../doc/README.Tezos' -> '../doc/README.Tezos.txt'
2022-05-13T19:21:23.3355073Z '../doc/RULES' -> '../doc/RULES.txt'
2022-05-13T19:21:23.3675605Z '../doc/RULES-hashcat' -> '../doc/RULES-hashcat.txt'
2022-05-13T19:21:23.3961602Z '../doc/SIPcrack-LICENSE' -> '../doc/SIPcrack-LICENSE.txt'
2022-05-13T19:21:23.4303239Z '../doc/SUBSETS' -> '../doc/SUBSETS.txt'
2022-05-13T19:21:23.4582218Z Executing 'make windows-tiny-link-to-john MAIN_NAME=john-avx512bw.exe '
2022-05-13T19:21:24.0058573Z Build a tiny john.exe that calls the best SIMD binary.
2022-05-13T19:21:24.0068594Z gcc -DMAIN_NAME=\"john-avx512bw.exe\" symlink.c -O2 -Wall -s -o ../run/john.exe
2022-05-13T19:21:24.5564672Z C:\tools\cygwin\bin\cygwin1.dll
2022-05-13T19:21:24.5717037Z 1 File(s) copied
2022-05-13T19:21:24.5880272Z C:\tools\cygwin\bin\cygbz2-1.dll
2022-05-13T19:21:24.5934930Z 1 File(s) copied
2022-05-13T19:21:24.6093265Z C:\tools\cygwin\bin\cygcrypto-1.1.dll
2022-05-13T19:21:24.6204453Z 1 File(s) copied
2022-05-13T19:21:24.6505646Z C:\tools\cygwin\bin\cyggomp-1.dll
2022-05-13T19:21:24.6547005Z 1 File(s) copied
2022-05-13T19:21:24.6707619Z C:\tools\cygwin\bin\cyggmp-10.dll
2022-05-13T19:21:24.6754061Z 1 File(s) copied
2022-05-13T19:21:24.6912283Z C:\tools\cygwin\bin\cygz.dll
2022-05-13T19:21:24.6946163Z 1 File(s) copied
2022-05-13T19:21:24.7092205Z C:\tools\cygwin\bin\cygcrypt-2.dll
2022-05-13T19:21:24.7133994Z 1 File(s) copied
2022-05-13T19:21:24.7349408Z C:\tools\cygwin\bin\cygOpenCL-1.dll
2022-05-13T19:21:24.7365042Z 1 File(s) copied
2022-05-13T19:21:24.7543743Z C:\tools\cygwin\bin\cyggcc_s-seh-1.dll
2022-05-13T19:21:24.7672803Z 1 File(s) copied
2022-05-13T19:21:24.8495951Z 
2022-05-13T19:21:24.8497488Z 
2022-05-13T19:21:24.8503612Z     Directory: D:\a\1\JtR
2022-05-13T19:21:24.8505468Z 
2022-05-13T19:21:24.8505986Z 
2022-05-13T19:21:24.8522182Z Mode                LastWriteTime         Length Name                                                                  
2022-05-13T19:21:24.8531585Z ----                -------------         ------ ----                                                                  
2022-05-13T19:21:24.8544942Z d-----        5/13/2022   7:21 PM                lib                                                                   
2022-05-13T19:21:24.8889718Z C:\tools\cygwin\bin\cygargp-0.dll
2022-05-13T19:21:24.8910798Z C:\tools\cygwin\bin\cygassuan-0.dll
2022-05-13T19:21:24.8914867Z C:\tools\cygwin\bin\cygatomic-1.dll
2022-05-13T19:21:24.8920170Z C:\tools\cygwin\bin\cygattr-1.dll
2022-05-13T19:21:24.9049593Z C:\tools\cygwin\bin\cygblkid-1.dll
2022-05-13T19:21:24.9103517Z C:\tools\cygwin\bin\cygbrotlicommon-1.dll
2022-05-13T19:21:24.9105440Z C:\tools\cygwin\bin\cygbrotlidec-1.dll
2022-05-13T19:21:24.9137986Z C:\tools\cygwin\bin\cygbz2-1.dll
2022-05-13T19:21:24.9139127Z C:\tools\cygwin\bin\cygc++-1.dll
2022-05-13T19:21:24.9144164Z C:\tools\cygwin\bin\cygc++abi-1.dll
2022-05-13T19:21:24.9148771Z C:\tools\cygwin\bin\cygcares-2.dll
2022-05-13T19:21:24.9153467Z C:\tools\cygwin\bin\cygclang-8.dll
2022-05-13T19:21:24.9186156Z C:\tools\cygwin\bin\cygclangAnalysis-8.dll
2022-05-13T19:21:24.9187117Z C:\tools\cygwin\bin\cygclangARCMigrate-8.dll
2022-05-13T19:21:24.9209385Z C:\tools\cygwin\bin\cygclangAST-8.dll
2022-05-13T19:21:24.9246069Z C:\tools\cygwin\bin\cygclangASTMatchers-8.dll
2022-05-13T19:21:24.9253405Z C:\tools\cygwin\bin\cygclangBasic-8.dll
2022-05-13T19:21:24.9283944Z C:\tools\cygwin\bin\cygclangCodeGen-8.dll
2022-05-13T19:21:24.9433885Z C:\tools\cygwin\bin\cygclangCrossTU-8.dll
2022-05-13T19:21:24.9437769Z C:\tools\cygwin\bin\cygclangDriver-8.dll
2022-05-13T19:21:24.9474068Z C:\tools\cygwin\bin\cygclangDynamicASTMatchers-8.dll
2022-05-13T19:21:24.9475053Z C:\tools\cygwin\bin\cygclangEdit-8.dll
2022-05-13T19:21:24.9475836Z C:\tools\cygwin\bin\cygclangFormat-8.dll
2022-05-13T19:21:24.9512299Z C:\tools\cygwin\bin\cygclangFrontend-8.dll
2022-05-13T19:21:24.9624170Z C:\tools\cygwin\bin\cygclangFrontendTool-8.dll
2022-05-13T19:21:24.9626056Z C:\tools\cygwin\bin\cygclangHandleCXX-8.dll
2022-05-13T19:21:24.9627598Z C:\tools\cygwin\bin\cygclangHandleLLVM-8.dll
2022-05-13T19:21:24.9628651Z C:\tools\cygwin\bin\cygclangIndex-8.dll
2022-05-13T19:21:24.9629413Z C:\tools\cygwin\bin\cygclangLex-8.dll
2022-05-13T19:21:24.9630091Z C:\tools\cygwin\bin\cygclangParse-8.dll
2022-05-13T19:21:24.9630820Z C:\tools\cygwin\bin\cygclangRewrite-8.dll
2022-05-13T19:21:24.9631738Z C:\tools\cygwin\bin\cygclangRewriteFrontend-8.dll
2022-05-13T19:21:24.9652519Z C:\tools\cygwin\bin\cygclangSema-8.dll
2022-05-13T19:21:24.9758810Z C:\tools\cygwin\bin\cygclangSerialization-8.dll
2022-05-13T19:21:24.9760230Z C:\tools\cygwin\bin\cygclangStaticAnalyzerCheckers-8.dll
2022-05-13T19:21:24.9835312Z C:\tools\cygwin\bin\cygclangStaticAnalyzerCore-8.dll
2022-05-13T19:21:24.9871799Z C:\tools\cygwin\bin\cygclangStaticAnalyzerFrontend-8.dll
2022-05-13T19:21:24.9872852Z C:\tools\cygwin\bin\cygclangTooling-8.dll
2022-05-13T19:21:24.9875011Z C:\tools\cygwin\bin\cygclangToolingASTDiff-8.dll
2022-05-13T19:21:24.9911830Z C:\tools\cygwin\bin\cygclangToolingCore-8.dll
2022-05-13T19:21:24.9913032Z C:\tools\cygwin\bin\cygclangToolingInclusions-8.dll
2022-05-13T19:21:24.9913875Z C:\tools\cygwin\bin\cygclangToolingRefactor-8.dll
2022-05-13T19:21:24.9916059Z C:\tools\cygwin\bin\cygcom_err-2.dll
2022-05-13T19:21:24.9952574Z C:\tools\cygwin\bin\cygcrypt-2.dll
2022-05-13T19:21:24.9954422Z C:\tools\cygwin\bin\cygcrypto-1.1.dll
2022-05-13T19:21:24.9955386Z C:\tools\cygwin\bin\cygcurl-4.dll
2022-05-13T19:21:25.0027184Z C:\tools\cygwin\bin\cygdb-5.3.dll
2022-05-13T19:21:25.0141588Z C:\tools\cygwin\bin\cygdb_cxx-5.3.dll
2022-05-13T19:21:25.0143654Z C:\tools\cygwin\bin\cygdb_sql-5.3.dll
2022-05-13T19:21:25.0145404Z C:\tools\cygwin\bin\cygedit-0.dll
2022-05-13T19:21:25.0146318Z C:\tools\cygwin\bin\cygexpat-1.dll
2022-05-13T19:21:25.0147173Z C:\tools\cygwin\bin\cygfdisk-1.dll
2022-05-13T19:21:25.0147983Z C:\tools\cygwin\bin\cygffi-6.dll
2022-05-13T19:21:25.0148797Z C:\tools\cygwin\bin\cygformw-10.dll
2022-05-13T19:21:25.0149565Z C:\tools\cygwin\bin\cyggc-1.dll
2022-05-13T19:21:25.0150386Z C:\tools\cygwin\bin\cyggcc_s-seh-1.dll
2022-05-13T19:21:25.0189870Z C:\tools\cygwin\bin\cyggcrypt-20.dll
2022-05-13T19:21:25.0201435Z C:\tools\cygwin\bin\cyggdbm-6.dll
2022-05-13T19:21:25.0204461Z C:\tools\cygwin\bin\cyggdbm_compat-4.dll
2022-05-13T19:21:25.0208816Z C:\tools\cygwin\bin\cyggmp-10.dll
2022-05-13T19:21:25.0216335Z C:\tools\cygwin\bin\cyggmpxx-4.dll
2022-05-13T19:21:25.0219992Z C:\tools\cygwin\bin\cyggnutls-30.dll
2022-05-13T19:21:25.0233240Z C:\tools\cygwin\bin\cyggomp-1.dll
2022-05-13T19:21:25.0238184Z C:\tools\cygwin\bin\cyggpg-error-0.dll
2022-05-13T19:21:25.0242477Z C:\tools\cygwin\bin\cyggpgme-11.dll
2022-05-13T19:21:25.0322484Z C:\tools\cygwin\bin\cyggsasl-7.dll
2022-05-13T19:21:25.0323636Z C:\tools\cygwin\bin\cyggssapi_krb5-2.dll
2022-05-13T19:21:25.0324370Z C:\tools\cygwin\bin\cygguile-2.2-1.dll
2022-05-13T19:21:25.0325110Z C:\tools\cygwin\bin\cyghistory7.dll
2022-05-13T19:21:25.0325837Z C:\tools\cygwin\bin\cyghogweed-4.dll
2022-05-13T19:21:25.0326538Z C:\tools\cygwin\bin\cyghwloc-15.dll
2022-05-13T19:21:25.0327177Z C:\tools\cygwin\bin\cygiconv-2.dll
2022-05-13T19:21:25.0327864Z C:\tools\cygwin\bin\cygidn-11.dll
2022-05-13T19:21:25.0328572Z C:\tools\cygwin\bin\cygidn2-0.dll
2022-05-13T19:21:25.0366733Z C:\tools\cygwin\bin\cygintl-8.dll
2022-05-13T19:21:25.0399501Z C:\tools\cygwin\bin\cygisl-23.dll
2022-05-13T19:21:25.0415406Z C:\tools\cygwin\bin\cygk5crypto-3.dll
2022-05-13T19:21:25.0430017Z C:\tools\cygwin\bin\cygkrb5-3.dll
2022-05-13T19:21:25.0431955Z C:\tools\cygwin\bin\cygkrb5support-0.dll
2022-05-13T19:21:25.0436725Z C:\tools\cygwin\bin\cyglber-2-4-2.dll
2022-05-13T19:21:25.0440820Z C:\tools\cygwin\bin\cyglber-2.dll
2022-05-13T19:21:25.0444963Z C:\tools\cygwin\bin\cygldap-2-4-2.dll
2022-05-13T19:21:25.0452092Z C:\tools\cygwin\bin\cygldap-2.dll
2022-05-13T19:21:25.0458476Z C:\tools\cygwin\bin\cygldap_r-2-4-2.dll
2022-05-13T19:21:25.0465250Z C:\tools\cygwin\bin\cygLLVMAArch64AsmParser-8.dll
2022-05-13T19:21:25.0502937Z C:\tools\cygwin\bin\cygLLVMAArch64AsmPrinter-8.dll
2022-05-13T19:21:25.0513065Z C:\tools\cygwin\bin\cygLLVMAArch64CodeGen-8.dll
2022-05-13T19:21:25.0535738Z C:\tools\cygwin\bin\cygLLVMAArch64Desc-8.dll
2022-05-13T19:21:25.0546220Z C:\tools\cygwin\bin\cygLLVMAArch64Disassembler-8.dll
2022-05-13T19:21:25.0551208Z C:\tools\cygwin\bin\cygLLVMAArch64Info-8.dll
2022-05-13T19:21:25.0556455Z C:\tools\cygwin\bin\cygLLVMAArch64Utils-8.dll
2022-05-13T19:21:25.0561280Z C:\tools\cygwin\bin\cygLLVMAggressiveInstCombine-8.dll
2022-05-13T19:21:25.0566354Z C:\tools\cygwin\bin\cygLLVMAMDGPUAsmParser-8.dll
2022-05-13T19:21:25.0586012Z C:\tools\cygwin\bin\cygLLVMAMDGPUAsmPrinter-8.dll
2022-05-13T19:21:25.0681505Z C:\tools\cygwin\bin\cygLLVMAMDGPUCodeGen-8.dll
2022-05-13T19:21:25.0742482Z C:\tools\cygwin\bin\cygLLVMAMDGPUDesc-8.dll
2022-05-13T19:21:25.0760941Z C:\tools\cygwin\bin\cygLLVMAMDGPUDisassembler-8.dll
2022-05-13T19:21:25.0778589Z C:\tools\cygwin\bin\cygLLVMAMDGPUInfo-8.dll
2022-05-13T19:21:25.0785542Z C:\tools\cygwin\bin\cygLLVMAMDGPUUtils-8.dll
2022-05-13T19:21:25.0792183Z C:\tools\cygwin\bin\cygLLVMAnalysis-8.dll
2022-05-13T19:21:25.0831222Z C:\tools\cygwin\bin\cygLLVMARMAsmParser-8.dll
2022-05-13T19:21:25.0847752Z C:\tools\cygwin\bin\cygLLVMARMAsmPrinter-8.dll
2022-05-13T19:21:25.0854138Z C:\tools\cygwin\bin\cygLLVMARMCodeGen-8.dll
2022-05-13T19:21:25.0883056Z C:\tools\cygwin\bin\cygLLVMARMDesc-8.dll
2022-05-13T19:21:25.0900416Z C:\tools\cygwin\bin\cygLLVMARMDisassembler-8.dll
2022-05-13T19:21:25.0907628Z C:\tools\cygwin\bin\cygLLVMARMInfo-8.dll
2022-05-13T19:21:25.0912760Z C:\tools\cygwin\bin\cygLLVMARMUtils-8.dll
2022-05-13T19:21:25.0919551Z C:\tools\cygwin\bin\cygLLVMAsmParser-8.dll
2022-05-13T19:21:25.0927097Z C:\tools\cygwin\bin\cygLLVMAsmPrinter-8.dll
2022-05-13T19:21:25.0946670Z C:\tools\cygwin\bin\cygLLVMBinaryFormat-8.dll
2022-05-13T19:21:25.0954343Z C:\tools\cygwin\bin\cygLLVMBitReader-8.dll
2022-05-13T19:21:25.0964179Z C:\tools\cygwin\bin\cygLLVMBitWriter-8.dll
2022-05-13T19:21:25.0973463Z C:\tools\cygwin\bin\cygLLVMBPFAsmParser-8.dll
2022-05-13T19:21:25.0982299Z C:\tools\cygwin\bin\cygLLVMBPFAsmPrinter-8.dll
2022-05-13T19:21:25.0986949Z C:\tools\cygwin\bin\cygLLVMBPFCodeGen-8.dll
2022-05-13T19:21:25.1091774Z C:\tools\cygwin\bin\cygLLVMBPFDesc-8.dll
2022-05-13T19:21:25.1096466Z C:\tools\cygwin\bin\cygLLVMBPFDisassembler-8.dll
2022-05-13T19:21:25.1100528Z C:\tools\cygwin\bin\cygLLVMBPFInfo-8.dll
2022-05-13T19:21:25.1105996Z C:\tools\cygwin\bin\cygLLVMCodeGen-8.dll
2022-05-13T19:21:25.1141928Z C:\tools\cygwin\bin\cygLLVMCore-8.dll
2022-05-13T19:21:25.1170146Z C:\tools\cygwin\bin\cygLLVMCoroutines-8.dll
2022-05-13T19:21:25.1178055Z C:\tools\cygwin\bin\cygLLVMCoverage-8.dll
2022-05-13T19:21:25.1190641Z C:\tools\cygwin\bin\cygLLVMDebugInfoCodeView-8.dll
2022-05-13T19:21:25.1201228Z C:\tools\cygwin\bin\cygLLVMDebugInfoDWARF-8.dll
2022-05-13T19:21:25.1216234Z C:\tools\cygwin\bin\cygLLVMDebugInfoMSF-8.dll
2022-05-13T19:21:25.1221334Z C:\tools\cygwin\bin\cygLLVMDebugInfoPDB-8.dll
2022-05-13T19:21:25.1230185Z C:\tools\cygwin\bin\cygLLVMDemangle-8.dll
2022-05-13T19:21:25.1237397Z C:\tools\cygwin\bin\cygLLVMDlltoolDriver-8.dll
2022-05-13T19:21:25.1243099Z C:\tools\cygwin\bin\cygLLVMExecutionEngine-8.dll
2022-05-13T19:21:25.1248626Z C:\tools\cygwin\bin\cygLLVMFuzzMutate-8.dll
2022-05-13T19:21:25.1339991Z C:\tools\cygwin\bin\cygLLVMGlobalISel-8.dll
2022-05-13T19:21:25.1341471Z C:\tools\cygwin\bin\cygLLVMHexagonAsmParser-8.dll
2022-05-13T19:21:25.1342670Z C:\tools\cygwin\bin\cygLLVMHexagonCodeGen-8.dll
2022-05-13T19:21:25.1343697Z C:\tools\cygwin\bin\cygLLVMHexagonDesc-8.dll
2022-05-13T19:21:25.1344717Z C:\tools\cygwin\bin\cygLLVMHexagonDisassembler-8.dll
2022-05-13T19:21:25.1345800Z C:\tools\cygwin\bin\cygLLVMHexagonInfo-8.dll
2022-05-13T19:21:25.1346777Z C:\tools\cygwin\bin\cygLLVMInstCombine-8.dll
2022-05-13T19:21:25.1347782Z C:\tools\cygwin\bin\cygLLVMInstrumentation-8.dll
2022-05-13T19:21:25.1392563Z C:\tools\cygwin\bin\cygLLVMInterpreter-8.dll
2022-05-13T19:21:25.1393876Z C:\tools\cygwin\bin\cygLLVMipo-8.dll
2022-05-13T19:21:25.1404978Z C:\tools\cygwin\bin\cygLLVMIRReader-8.dll
2022-05-13T19:21:25.1408583Z C:\tools\cygwin\bin\cygLLVMLanaiAsmParser-8.dll
2022-05-13T19:21:25.1413026Z C:\tools\cygwin\bin\cygLLVMLanaiAsmPrinter-8.dll
2022-05-13T19:21:25.1427629Z C:\tools\cygwin\bin\cygLLVMLanaiCodeGen-8.dll
2022-05-13T19:21:25.1429239Z C:\tools\cygwin\bin\cygLLVMLanaiDesc-8.dll
2022-05-13T19:21:25.1430630Z C:\tools\cygwin\bin\cygLLVMLanaiDisassembler-8.dll
2022-05-13T19:21:25.1496931Z C:\tools\cygwin\bin\cygLLVMLanaiInfo-8.dll
2022-05-13T19:21:25.1498443Z C:\tools\cygwin\bin\cygLLVMLibDriver-8.dll
2022-05-13T19:21:25.1499243Z C:\tools\cygwin\bin\cygLLVMLineEditor-8.dll
2022-05-13T19:21:25.1500049Z C:\tools\cygwin\bin\cygLLVMLinker-8.dll
2022-05-13T19:21:25.1500826Z C:\tools\cygwin\bin\cygLLVMLTO-8.dll
2022-05-13T19:21:25.1501585Z C:\tools\cygwin\bin\cygLLVMMC-8.dll
2022-05-13T19:21:25.1502302Z C:\tools\cygwin\bin\cygLLVMMCA-8.dll
2022-05-13T19:21:25.1503122Z C:\tools\cygwin\bin\cygLLVMMCDisassembler-8.dll
2022-05-13T19:21:25.1503898Z C:\tools\cygwin\bin\cygLLVMMCJIT-8.dll
2022-05-13T19:21:25.1504592Z C:\tools\cygwin\bin\cygLLVMMCParser-8.dll
2022-05-13T19:21:25.1505401Z C:\tools\cygwin\bin\cygLLVMMipsAsmParser-8.dll
2022-05-13T19:21:25.1506181Z C:\tools\cygwin\bin\cygLLVMMipsAsmPrinter-8.dll
2022-05-13T19:21:25.1506919Z C:\tools\cygwin\bin\cygLLVMMipsCodeGen-8.dll
2022-05-13T19:21:25.1513539Z C:\tools\cygwin\bin\cygLLVMMipsDesc-8.dll
2022-05-13T19:21:25.1524083Z C:\tools\cygwin\bin\cygLLVMMipsDisassembler-8.dll
2022-05-13T19:21:25.1530732Z C:\tools\cygwin\bin\cygLLVMMipsInfo-8.dll
2022-05-13T19:21:25.1535600Z C:\tools\cygwin\bin\cygLLVMMIRParser-8.dll
2022-05-13T19:21:25.1540560Z C:\tools\cygwin\bin\cygLLVMMSP430AsmParser-8.dll
2022-05-13T19:21:25.1544751Z C:\tools\cygwin\bin\cygLLVMMSP430AsmPrinter-8.dll
2022-05-13T19:21:25.1548733Z C:\tools\cygwin\bin\cygLLVMMSP430CodeGen-8.dll
2022-05-13T19:21:25.1605480Z C:\tools\cygwin\bin\cygLLVMMSP430Desc-8.dll
2022-05-13T19:21:25.1606523Z C:\tools\cygwin\bin\cygLLVMMSP430Disassembler-8.dll
2022-05-13T19:21:25.1607444Z C:\tools\cygwin\bin\cygLLVMMSP430Info-8.dll
2022-05-13T19:21:25.1609262Z C:\tools\cygwin\bin\cygLLVMNVPTXAsmPrinter-8.dll
2022-05-13T19:21:25.1612268Z C:\tools\cygwin\bin\cygLLVMNVPTXCodeGen-8.dll
2022-05-13T19:21:25.1613484Z C:\tools\cygwin\bin\cygLLVMNVPTXDesc-8.dll
2022-05-13T19:21:25.1614757Z C:\tools\cygwin\bin\cygLLVMNVPTXInfo-8.dll
2022-05-13T19:21:25.1615723Z C:\tools\cygwin\bin\cygLLVMObjCARCOpts-8.dll
2022-05-13T19:21:25.1616961Z C:\tools\cygwin\bin\cygLLVMObject-8.dll
2022-05-13T19:21:25.1624837Z C:\tools\cygwin\bin\cygLLVMObjectYAML-8.dll
2022-05-13T19:21:25.1654666Z C:\tools\cygwin\bin\cygLLVMOption-8.dll
2022-05-13T19:21:25.1659240Z C:\tools\cygwin\bin\cygLLVMOptRemarks-8.dll
2022-05-13T19:21:25.1663232Z C:\tools\cygwin\bin\cygLLVMOrcJIT-8.dll
2022-05-13T19:21:25.1671227Z C:\tools\cygwin\bin\cygLLVMPasses-8.dll
2022-05-13T19:21:25.1705440Z C:\tools\cygwin\bin\cygLLVMPowerPCAsmParser-8.dll
2022-05-13T19:21:25.1711339Z C:\tools\cygwin\bin\cygLLVMPowerPCAsmPrinter-8.dll
2022-05-13T19:21:25.1716090Z C:\tools\cygwin\bin\cygLLVMPowerPCCodeGen-8.dll
2022-05-13T19:21:25.1728423Z C:\tools\cygwin\bin\cygLLVMPowerPCDesc-8.dll
2022-05-13T19:21:25.1735042Z C:\tools\cygwin\bin\cygLLVMPowerPCDisassembler-8.dll
2022-05-13T19:21:25.1740734Z C:\tools\cygwin\bin\cygLLVMPowerPCInfo-8.dll
2022-05-13T19:21:25.1744470Z C:\tools\cygwin\bin\cygLLVMProfileData-8.dll
2022-05-13T19:21:25.1750624Z C:\tools\cygwin\bin\cygLLVMRuntimeDyld-8.dll
2022-05-13T19:21:25.1756904Z C:\tools\cygwin\bin\cygLLVMScalarOpts-8.dll
2022-05-13T19:21:25.1825190Z C:\tools\cygwin\bin\cygLLVMSelectionDAG-8.dll
2022-05-13T19:21:25.1861875Z C:\tools\cygwin\bin\cygLLVMSparcAsmParser-8.dll
2022-05-13T19:21:25.1868341Z C:\tools\cygwin\bin\cygLLVMSparcAsmPrinter-8.dll
2022-05-13T19:21:25.1873858Z C:\tools\cygwin\bin\cygLLVMSparcCodeGen-8.dll
2022-05-13T19:21:25.1879777Z C:\tools\cygwin\bin\cygLLVMSparcDesc-8.dll
2022-05-13T19:21:25.1887920Z C:\tools\cygwin\bin\cygLLVMSparcDisassembler-8.dll
2022-05-13T19:21:25.1892277Z C:\tools\cygwin\bin\cygLLVMSparcInfo-8.dll
2022-05-13T19:21:25.1897188Z C:\tools\cygwin\bin\cygLLVMSupport-8.dll
2022-05-13T19:21:25.1914633Z C:\tools\cygwin\bin\cygLLVMSymbolize-8.dll
2022-05-13T19:21:25.1920013Z C:\tools\cygwin\bin\cygLLVMSystemZAsmParser-8.dll
2022-05-13T19:21:25.1926717Z C:\tools\cygwin\bin\cygLLVMSystemZAsmPrinter-8.dll
2022-05-13T19:21:25.1931985Z C:\tools\cygwin\bin\cygLLVMSystemZCodeGen-8.dll
2022-05-13T19:21:25.1959765Z C:\tools\cygwin\bin\cygLLVMSystemZDesc-8.dll
2022-05-13T19:21:25.1971369Z C:\tools\cygwin\bin\cygLLVMSystemZDisassembler-8.dll
2022-05-13T19:21:25.1978012Z C:\tools\cygwin\bin\cygLLVMSystemZInfo-8.dll
2022-05-13T19:21:25.1983685Z C:\tools\cygwin\bin\cygLLVMTableGen-8.dll
2022-05-13T19:21:25.1992628Z C:\tools\cygwin\bin\cygLLVMTarget-8.dll
2022-05-13T19:21:25.1998783Z C:\tools\cygwin\bin\cygLLVMTextAPI-8.dll
2022-05-13T19:21:25.2012976Z C:\tools\cygwin\bin\cygLLVMTransformUtils-8.dll
2022-05-13T19:21:25.2028105Z C:\tools\cygwin\bin\cygLLVMVectorize-8.dll
2022-05-13T19:21:25.2041526Z C:\tools\cygwin\bin\cygLLVMWebAssemblyAsmParser-8.dll
2022-05-13T19:21:25.2048174Z C:\tools\cygwin\bin\cygLLVMWebAssemblyAsmPrinter-8.dll
2022-05-13T19:21:25.2076813Z C:\tools\cygwin\bin\cygLLVMWebAssemblyCodeGen-8.dll
2022-05-13T19:21:25.2133845Z C:\tools\cygwin\bin\cygLLVMWebAssemblyDesc-8.dll
2022-05-13T19:21:25.2135096Z C:\tools\cygwin\bin\cygLLVMWebAssemblyDisassembler-8.dll
2022-05-13T19:21:25.2136119Z C:\tools\cygwin\bin\cygLLVMWebAssemblyInfo-8.dll
2022-05-13T19:21:25.2139454Z C:\tools\cygwin\bin\cygLLVMWindowsManifest-8.dll
2022-05-13T19:21:25.2144384Z C:\tools\cygwin\bin\cygLLVMX86AsmParser-8.dll
2022-05-13T19:21:25.2152399Z C:\tools\cygwin\bin\cygLLVMX86AsmPrinter-8.dll
2022-05-13T19:21:25.2159036Z C:\tools\cygwin\bin\cygLLVMX86CodeGen-8.dll
2022-05-13T19:21:25.2194269Z C:\tools\cygwin\bin\cygLLVMX86Desc-8.dll
2022-05-13T19:21:25.2215189Z C:\tools\cygwin\bin\cygLLVMX86Disassembler-8.dll
2022-05-13T19:21:25.2238890Z C:\tools\cygwin\bin\cygLLVMX86Info-8.dll
2022-05-13T19:21:25.2242152Z C:\tools\cygwin\bin\cygLLVMX86Utils-8.dll
2022-05-13T19:21:25.2246154Z C:\tools\cygwin\bin\cygLLVMXCoreAsmPrinter-8.dll
2022-05-13T19:21:25.2249863Z C:\tools\cygwin\bin\cygLLVMXCoreCodeGen-8.dll
2022-05-13T19:21:25.2256537Z C:\tools\cygwin\bin\cygLLVMXCoreDesc-8.dll
2022-05-13T19:21:25.2260598Z C:\tools\cygwin\bin\cygLLVMXCoreDisassembler-8.dll
2022-05-13T19:21:25.2264894Z C:\tools\cygwin\bin\cygLLVMXCoreInfo-8.dll
2022-05-13T19:21:25.2269967Z C:\tools\cygwin\bin\cygLLVMXRay-8.dll
2022-05-13T19:21:25.2276581Z C:\tools\cygwin\bin\cygltdl-7.dll
2022-05-13T19:21:25.2280357Z C:\tools\cygwin\bin\cyglz4-1.dll
2022-05-13T19:21:25.2334898Z C:\tools\cygwin\bin\cyglzma-5.dll
2022-05-13T19:21:25.2341433Z C:\tools\cygwin\bin\cygmagic-1.dll
2022-05-13T19:21:25.2348278Z C:\tools\cygwin\bin\cygman-2-10-2.dll
2022-05-13T19:21:25.2353679Z C:\tools\cygwin\bin\cygmandb-2-10-2.dll
2022-05-13T19:21:25.2357772Z C:\tools\cygwin\bin\cygmenuw-10.dll
2022-05-13T19:21:25.2362913Z C:\tools\cygwin\bin\cygmetalink-3.dll
2022-05-13T19:21:25.2415186Z C:\tools\cygwin\bin\cygmpc-3.dll
2022-05-13T19:21:25.2417384Z C:\tools\cygwin\bin\cygmpfr-6.dll
2022-05-13T19:21:25.2427065Z C:\tools\cygwin\bin\cygncursesw-10.dll
2022-05-13T19:21:25.2439431Z C:\tools\cygwin\bin\cygnettle-6.dll
2022-05-13T19:21:25.2445147Z C:\tools\cygwin\bin\cygnghttp2-14.dll
2022-05-13T19:21:25.2449850Z C:\tools\cygwin\bin\cygntlm-0.dll
2022-05-13T19:21:25.2454293Z C:\tools\cygwin\bin\cygOpenCL-1.dll
2022-05-13T19:21:25.2459027Z C:\tools\cygwin\bin\cygOptRemarks-8.dll
2022-05-13T19:21:25.2462845Z C:\tools\cygwin\bin\cygp11-kit-0.dll
2022-05-13T19:21:25.2472887Z C:\tools\cygwin\bin\cygpanelw-10.dll
2022-05-13T19:21:25.2477047Z C:\tools\cygwin\bin\cygpcre-1.dll
2022-05-13T19:21:25.2485056Z C:\tools\cygwin\bin\cygpcre2-8-0.dll
2022-05-13T19:21:25.2494407Z C:\tools\cygwin\bin\cygperl5_32.dll
2022-05-13T19:21:25.2535118Z C:\tools\cygwin\bin\cygpipeline-1.dll
2022-05-13T19:21:25.2539829Z C:\tools\cygwin\bin\cygpkgconf-3.dll
2022-05-13T19:21:25.2545142Z C:\tools\cygwin\bin\cygpocl-2.dll
2022-05-13T19:21:25.2554659Z C:\tools\cygwin\bin\cygPolly-8.dll
2022-05-13T19:21:25.2572806Z C:\tools\cygwin\bin\cygPollyISL-8.dll
2022-05-13T19:21:25.2590925Z C:\tools\cygwin\bin\cygPollyPPCG-8.dll
2022-05-13T19:21:25.2595540Z C:\tools\cygwin\bin\cygpopt-0.dll
2022-05-13T19:21:25.2605054Z C:\tools\cygwin\bin\cygpsl-5.dll
2022-05-13T19:21:25.2613224Z C:\tools\cygwin\bin\cygquadmath-0.dll
2022-05-13T19:21:25.2626609Z C:\tools\cygwin\bin\cygreadline7.dll
2022-05-13T19:21:25.2636097Z C:\tools\cygwin\bin\cygsasl2-3.dll
2022-05-13T19:21:25.2646096Z C:\tools\cygwin\bin\cygsigsegv-2.dll
2022-05-13T19:21:25.2653879Z C:\tools\cygwin\bin\cygsmartcols-1.dll
2022-05-13T19:21:25.2686915Z C:\tools\cygwin\bin\cygsqlite3-0.dll
2022-05-13T19:21:25.2687960Z C:\tools\cygwin\bin\cygssh2-1.dll
2022-05-13T19:21:25.2695329Z C:\tools\cygwin\bin\cygssl-1.1.dll
2022-05-13T19:21:25.2706521Z C:\tools\cygwin\bin\cygstdc++-6.dll
2022-05-13T19:21:25.2725561Z C:\tools\cygwin\bin\cygtasn1-6.dll
2022-05-13T19:21:25.2729810Z C:\tools\cygwin\bin\cygticw-10.dll
2022-05-13T19:21:25.2735401Z C:\tools\cygwin\bin\cygunistring-2.dll
2022-05-13T19:21:25.2751656Z C:\tools\cygwin\bin\cygunwind-1.dll
2022-05-13T19:21:25.2756241Z C:\tools\cygwin\bin\cygusb0.dll
2022-05-13T19:21:25.2760022Z C:\tools\cygwin\bin\cyguuid-1.dll
2022-05-13T19:21:25.2764586Z C:\tools\cygwin\bin\cygwin1.dll
2022-05-13T19:21:25.2794735Z C:\tools\cygwin\bin\cygxml2-2.dll
2022-05-13T19:21:25.2810888Z C:\tools\cygwin\bin\cygz.dll
2022-05-13T19:21:25.2819454Z C:\tools\cygwin\bin\cygzstd-1.dll
2022-05-13T19:21:25.2837725Z C:\tools\cygwin\bin\libpython2.7.dll
2022-05-13T19:21:25.2878106Z 278 File(s) copied
2022-05-13T19:21:25.3665204Z Version: 1.9.0-jumbo-1+bleeding-52a9bed 2022-05-13 11:45:08 +0200
2022-05-13T19:21:25.3668445Z Build: cygwin 64-bit x86_64 AVX512BW AC OMP OPENCL
2022-05-13T19:21:25.3670069Z SIMD: AVX512BW, interleaving: MD4:3 MD5:3 SHA1:1 SHA256:1 SHA512:1
2022-05-13T19:21:25.3671827Z CPU tests: AVX512BW
2022-05-13T19:21:25.3673432Z CPU fallback binary: john-avx512f
2022-05-13T19:21:25.3674276Z OMP fallback binary: john-avx512bw-non-omp
2022-05-13T19:21:25.3675875Z $JOHN is /run/
2022-05-13T19:21:25.3676620Z Format interface version: 14
2022-05-13T19:21:25.3677418Z Max. number of reported tunable costs: 4
2022-05-13T19:21:25.3678065Z Rec file version: REC4
2022-05-13T19:21:25.3678755Z Charset file version: CHR3
2022-05-13T19:21:25.3679552Z CHARSET_MIN: 1 (0x01)
2022-05-13T19:21:25.3680165Z CHARSET_MAX: 255 (0xff)
2022-05-13T19:21:25.3680826Z CHARSET_LENGTH: 24
2022-05-13T19:21:25.3681646Z SALT_HASH_SIZE: 1048576
2022-05-13T19:21:25.3682356Z SINGLE_IDX_MAX: 2147483648
2022-05-13T19:21:25.3682992Z SINGLE_BUF_MAX: 4294967295
2022-05-13T19:21:25.3683776Z Effective limit: Number of salts vs. SingleMaxBufferSize
2022-05-13T19:21:25.3684587Z Max. Markov mode level: 400
2022-05-13T19:21:25.3685187Z Max. Markov mode password length: 30
2022-05-13T19:21:25.3685886Z gcc version: 11.3.0
2022-05-13T19:21:25.3686588Z OpenCL headers version: 2.2
2022-05-13T19:21:25.3687350Z Crypto library: OpenSSL
2022-05-13T19:21:25.3687965Z OpenSSL library version: 0101010ff
2022-05-13T19:21:25.3689109Z OpenSSL 1.1.1o  3 May 2022
2022-05-13T19:21:25.3689884Z GMP library version: 6.2.1
2022-05-13T19:21:25.3690516Z File locking: fcntl()
2022-05-13T19:21:25.3691169Z fseek(): fseek
2022-05-13T19:21:25.3691979Z ftell(): ftell
2022-05-13T19:21:25.3692739Z fopen(): fopen
2022-05-13T19:21:25.3693191Z memmem(): System's
2022-05-13T19:21:25.3693890Z times(2) sysconf(_SC_CLK_TCK) is 1000
2022-05-13T19:21:25.3694629Z Using times(2) for timers, resolution 1 ms
2022-05-13T19:21:25.3695386Z HR timer: QueryPerformanceCounter(), resolution 100 ns
2022-05-13T19:21:25.3696184Z Total physical host memory: 7167 MiB
2022-05-13T19:21:25.3696810Z Available physical host memory: 5105 MiB
2022-05-13T19:21:25.3697322Z Terminal locale string: C.UTF-8
2022-05-13T19:21:25.3697877Z Parsed terminal locale: UTF-8
2022-05-13T19:21:25.3758451Z 
2022-05-13T19:21:25.3759584Z 
2022-05-13T19:21:25.4562142Z ##[section]Finishing: Build JtR
